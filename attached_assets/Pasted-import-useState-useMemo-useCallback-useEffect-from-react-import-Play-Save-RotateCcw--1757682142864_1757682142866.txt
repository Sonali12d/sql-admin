import { useState, useMemo, useCallback, useEffect } from 'react';
import { Play, Save, RotateCcw, Lightbulb, Dumbbell, TrendingUp, ChevronDown } from 'lucide-react';

interface SQLEditorProps {
  initialQuery?: string;
  onRunQuery: (query: string) => Promise<any>;
  hints?: string[];
  className?: string;
}

// Mock UI components since we don't have shadcn/ui installed
const Button = ({ children, onClick, disabled, variant = 'default', className = '', ...props }: any) => (
  <button
    onClick={onClick}
    disabled={disabled}
    className={`px-4 py-2 rounded-md font-medium transition-colors ${
      variant === 'outline' 
        ? 'border border-gray-300 bg-white text-gray-700 hover:bg-gray-50' 
        : 'bg-blue-600 text-white hover:bg-blue-700'
    } ${disabled ? 'opacity-50 cursor-not-allowed' : ''} ${className}`}
    {...props}
  >
    {children}
  </button>
);

const Card = ({ children, className = '' }: any) => (
  <div className={`bg-white rounded-lg border border-gray-200 shadow-sm ${className}`}>
    {children}
  </div>
);

const CardHeader = ({ children, className = '' }: any) => (
  <div className={`px-4 py-3 ${className}`}>
    {children}
  </div>
);

const CardContent = ({ children, className = '' }: any) => (
  <div className={className}>
    {children}
  </div>
);

const Alert = ({ children, className = '' }: any) => (
  <div className={`p-4 rounded-lg border ${className}`}>
    {children}
  </div>
);

const AlertDescription = ({ children, className = '' }: any) => (
  <div className={className}>
    {children}
  </div>
);

export default function SQLEditor({ 
  initialQuery = '', 
  onRunQuery, 
  hints = [],
  className = '' 
}: SQLEditorProps) {
  const [query, setQuery] = useState(initialQuery);
  const [result, setResult] = useState<any>(null);
  const [isRunning, setIsRunning] = useState(false);
  const [showHint, setShowHint] = useState(false);
  const [hintIndex, setHintIndex] = useState(0);

  const handleRunQuery = useCallback(async () => {
    if (!query.trim()) return;
    
    setIsRunning(true);
    try {
      const result = await onRunQuery(query);
      setResult(result);
    } catch (error) {
      setResult({
        error: true,
        message: error instanceof Error ? error.message : 'Query execution failed',
      });
    } finally {
      setIsRunning(false);
    }
  }, [query, onRunQuery]);

  const handleSave = () => {
    // localStorage.setItem('sqlgym_last_query', query);
    console.log('Saving query:', query);
  };

  const handleReset = () => {
    setQuery(initialQuery);
    setResult(null);
  };

  const handleShowHint = () => {
    setShowHint(true);
  };

  const handleNextHint = () => {
    if (hintIndex < hints.length - 1) {
      setHintIndex(hintIndex + 1);
    }
  };

  return (
    <div className={`w-full max-w-6xl mx-auto ${className}`}>
      {/* Training Zone (Input Section) - Reduced spacing */}
      <div className="mb-3">
        <Card className="overflow-hidden">
          {/* Input Header - Reduced padding */}
          <CardHeader className="bg-gray-50 px-4 py-2 border-b border-gray-200">
            <div className="flex items-center justify-between">
              <div className="flex items-center space-x-2">
                <Dumbbell className="h-4 w-4 text-blue-600" />
                <h3 className="text-base font-semibold text-gray-900">Training Zone</h3>
              </div>
              <div className="flex items-center space-x-2 text-sm text-gray-500">
                <span>PostgreSQL 14</span>
                <ChevronDown className="h-4 w-4" />
              </div>
            </div>
          </CardHeader>
          
          {/* Code Editor - Reduced height */}
          <CardContent className="p-0">
            <div className="relative">
              <textarea
                value={query}
                onChange={(e) => setQuery(e.target.value)}
                placeholder="-- Write your SQL query here&#10;SELECT &#10;    column1,&#10;    column2&#10;FROM table_name&#10;WHERE condition;"
                className="w-full h-48 p-4 font-mono text-sm border-none resize-none focus:outline-none focus:ring-2 focus:ring-blue-500 focus:ring-inset"
                style={{
                  fontFamily: 'ui-monospace, SFMono-Regular, "SF Mono", Consolas, "Liberation Mono", Menlo, monospace',
                  lineHeight: '1.5',
                }}
                onKeyDown={(e) => {
                  if ((e.metaKey || e.ctrlKey) && e.key === 'Enter') {
                    e.preventDefault();
                    handleRunQuery();
                  }
                }}
              />
              <div className="absolute top-2 right-2 text-xs text-gray-400">
                Ctrl/Cmd + Enter to run
              </div>
            </div>
          </CardContent>
        </Card>
      </div>

      {/* Gym Controls - Moved up and made more compact */}
      <div className="flex flex-wrap gap-2 mb-3">
        <Button
          onClick={handleRunQuery}
          disabled={isRunning || !query.trim()}
          className="bg-blue-600 text-white hover:bg-blue-700 font-semibold flex items-center"
        >
          <Dumbbell className="mr-2 h-4 w-4" />
          {isRunning ? 'Running...' : 'Run Code'}
        </Button>
        
        <Button 
          onClick={handleSave} 
          variant="outline"
          className="flex items-center"
        >
          <Save className="mr-2 h-4 w-4" />
          Save Query
        </Button>
        
        <Button 
          onClick={handleReset} 
          variant="outline"
          className="flex items-center"
        >
          <RotateCcw className="mr-2 h-4 w-4" />
          Reset
        </Button>

        {hints.length > 0 && (
          <Button 
            onClick={handleShowHint} 
            variant="outline"
            className="text-blue-600 hover:bg-blue-50 flex items-center"
          >
            <Lightbulb className="mr-2 h-4 w-4" />
            Get Hint
          </Button>
        )}

        {/* Check Solution button like in your screenshot */}
        <Button
          onClick={() => console.log('Checking solution...')}
          className="bg-green-600 text-white hover:bg-green-700 font-semibold flex items-center ml-auto"
        >
          ‚úì Check Solution
        </Button>
      </div>

      {/* Trainer Tips - More compact */}
      {showHint && hints.length > 0 && (
        <Alert className="border-blue-200 bg-blue-50 mb-3 py-3">
          <div className="flex">
            <Lightbulb className="h-4 w-4 text-blue-600 mt-0.5 mr-2 flex-shrink-0" />
            <AlertDescription className="text-gray-800">
              <strong>üí° Hint {hintIndex + 1}:</strong> {hints[hintIndex]}
              {hintIndex < hints.length - 1 && (
                <Button 
                  onClick={handleNextHint}
                  variant="link" 
                  className="p-0 ml-2 text-blue-600 underline text-sm"
                >
                  Next hint ‚Üí
                </Button>
              )}
            </AlertDescription>
          </div>
        </Alert>
      )}

      {/* Performance Report (Output Section) - More compact when empty */}
      {result && (
        <div className="mb-4">
          <Card className="overflow-hidden">
            <CardHeader className="bg-gray-50 px-4 py-2 border-b border-gray-200">
              <div className="flex items-center justify-between">
                <div className="flex items-center space-x-2">
                  <TrendingUp className="h-4 w-4 text-blue-600" />
                  <h3 className="text-base font-semibold text-gray-900">Query Results</h3>
                </div>
                {result && !result.error && (
                  <div className="text-sm text-gray-500">
                    Execution: {result.executionTime || 0}ms
                  </div>
                )}
              </div>
            </CardHeader>
            
            <CardContent className="p-4">
              {result.error ? (
                <div className="space-y-3">
                  <div className="flex items-center space-x-2 text-red-600">
                    <div className="w-2 h-2 bg-red-500 rounded-full"></div>
                    <span className="font-medium text-sm">Query Failed</span>
                  </div>
                  <div className="bg-red-50 border border-red-200 rounded p-3">
                    <p className="text-red-800 text-sm font-mono">{result.message}</p>
                  </div>
                </div>
              ) : (
                <div className="space-y-3">
                  <div className="flex items-center space-x-2 text-green-600">
                    <div className="w-2 h-2 bg-green-500 rounded-full"></div>
                    <span className="font-medium text-sm">
                      {result.isCorrect ? 'Perfect! üèÜ' : 'Query Executed'}
                    </span>
                  </div>
                  
                  {result.isCorrect && (
                    <div className="bg-green-50 border border-green-200 rounded p-3">
                      <div className="flex items-center space-x-2">
                        <span className="text-lg">üéâ</span>
                        <div>
                          <p className="text-green-800 font-medium text-sm">Excellent work!</p>
                          <p className="text-green-700 text-sm">Solution is correct!</p>
                        </div>
                      </div>
                    </div>
                  )}
                  
                  <div className="bg-gray-50 rounded p-3">
                    <p className="text-sm text-gray-600 mb-2">üìä Results:</p>
                    <div className="font-mono text-sm bg-white rounded border p-2">
                      <p>Status: {result.isCorrect ? '‚úÖ Correct' : '‚ö†Ô∏è Check again'}</p>
                      <p>Performance: {result.executionTime || 0}ms</p>
                      <p className="text-gray-500 mt-1 text-xs">
                        [Table data would be displayed here]
                      </p>
                    </div>
                  </div>
                </div>
              )}
            </CardContent>
          </Card>
        </div>
      )}

      {/* Empty state hint when no result */}
      {!result && (
        <div className="text-center py-4 text-gray-500 text-sm">
          üí° Write your SQL query above and click "Run Code" to see results
        </div>
      )}
    </div>
  );
}