{"file_contents":{"drizzle.config.ts":{"content":"// import { defineConfig } from \"drizzle-kit\";\n\n// if (!process.env.DATABASE_URL) {\n//   throw new Error(\"DATABASE_URL, ensure the database is provisioned\");\n// }\n\n// export default defineConfig({\n//   out: \"./migrations\",\n//   schema: \"./shared/schema.ts\",\n//   dialect: \"postgresql\",\n//   dbCredentials: {\n//     url: process.env.DATABASE_URL,\n//   },\n// });\n","size_bytes":361},"postcss.config.js":{"content":"export default {\n  plugins: {\n    tailwindcss: {},\n    autoprefixer: {},\n  },\n}\n","size_bytes":80},"replit.md":{"content":"# Overview\n\nSQLGym is a gamified SQL learning platform that combines coding practice with fitness-themed motivation. The application allows users to solve SQL problems, track their progress through an XP system, compete on leaderboards, and participate in a community forum. The platform features a comprehensive problem set with different difficulty levels, submission tracking, and a badge system to reward achievements.\n\n# User Preferences\n\nPreferred communication style: Simple, everyday language.\n\n# System Architecture\n\n## Frontend Architecture\nThe client uses React with TypeScript, built with Vite for fast development. The UI is constructed with shadcn/ui components and Radix UI primitives, providing a consistent design system with Tailwind CSS for styling. The application uses Wouter for lightweight client-side routing and TanStack Query for server state management and caching. Form handling is implemented with React Hook Form and Zod for validation.\n\n## Backend Architecture\nThe server is built with Express.js and TypeScript, following a RESTful API pattern. The architecture uses a storage abstraction layer that encapsulates all database operations, making it database-agnostic. JWT tokens handle authentication with bcrypt for password hashing. The server includes middleware for request logging and error handling.\n\n## Database Design\nThe system uses SQLAlchemy ORM with PostgreSQL as the primary database. The schema includes tables for users, problems, submissions, community posts, post comments, post likes, and user badges. The database supports user progression tracking, problem solving statistics, and social features like community posts and comments.\n\n## Authentication System\nAuthentication is implemented using JWT tokens stored in localStorage on the client side. The server validates tokens using middleware that checks for Authorization headers. User registration includes password hashing with bcrypt, and the system checks for existing usernames and emails to prevent duplicates.\n\n## Key Features\n- **Gamification**: XP system with levels (SQL Beginner, Trainee, Athlete, Powerlifter) and badge rewards\n- **Problem Management**: SQL problems categorized by difficulty with hints and expected outputs\n- **Code Execution**: SQL query submission and validation system\n- **Social Features**: Community posts with likes and comments\n- **Progress Tracking**: User submissions history and leaderboards\n- **Responsive Design**: Mobile-friendly interface with proper breakpoints\n\n## State Management\nClient-side state is managed through TanStack Query for server state and React's built-in state management for UI state. Authentication state is handled through a custom AuthContext provider that persists user sessions in localStorage.\n\n# External Dependencies\n\n## Database Services\n- **Neon Database**: PostgreSQL hosting service accessed via @neondatabase/serverless driver\n- **SQLAlchemy ORM**: Type-safe database operations with automatic schema migration support\n\n## UI Libraries\n- **Radix UI**: Unstyled, accessible UI primitives for complex components\n- **shadcn/ui**: Pre-built component library built on Radix UI\n- **Tailwind CSS**: Utility-first CSS framework for styling\n- **Lucide React**: Icon library for consistent iconography\n\n## Development Tools\n- **Vite**: Build tool with hot module replacement for development\n- **TypeScript**: Type safety across the entire application\n- **TanStack Query**: Server state management and caching\n- **React Hook Form**: Form handling with validation\n- **Zod**: Schema validation for forms and API data\n\n## Authentication & Security\n- **JSON Web Tokens (jsonwebtoken)**: Token-based authentication\n- **bcrypt**: Password hashing and verification\n- **Wouter**: Lightweight client-side routing\n\n## Development Environment\n- **Replit Integration**: Special development tools and error overlays for Replit environment\n- **ESBuild**: Fast bundling for production builds\n- **PostCSS**: CSS processing with Autoprefixer","size_bytes":3993},"tailwind.config.ts":{"content":"import type { Config } from \"tailwindcss\";\n\nexport default {\n  darkMode: [\"class\"],\n  content: [\"./client/index.html\", \"./client/src/**/*.{js,jsx,ts,tsx}\"],\n  theme: {\n    extend: {\n      borderRadius: {\n        lg: \"var(--radius)\",\n        md: \"calc(var(--radius) - 2px)\",\n        sm: \"calc(var(--radius) - 4px)\",\n      },\n      colors: {\n        background: \"var(--background)\",\n        foreground: \"var(--foreground)\",\n        card: {\n          DEFAULT: \"var(--card)\",\n          foreground: \"var(--card-foreground)\",\n        },\n        popover: {\n          DEFAULT: \"var(--popover)\",\n          foreground: \"var(--popover-foreground)\",\n        },\n        primary: {\n          DEFAULT: \"var(--primary)\",\n          foreground: \"var(--primary-foreground)\",\n        },\n        secondary: {\n          DEFAULT: \"var(--secondary)\",\n          foreground: \"var(--secondary-foreground)\",\n        },\n        muted: {\n          DEFAULT: \"var(--muted)\",\n          foreground: \"var(--muted-foreground)\",\n        },\n        accent: {\n          DEFAULT: \"var(--accent)\",\n          foreground: \"var(--accent-foreground)\",\n        },\n        destructive: {\n          DEFAULT: \"var(--destructive)\",\n          foreground: \"var(--destructive-foreground)\",\n        },\n        border: \"var(--border)\",\n        input: \"var(--input)\",\n        ring: \"var(--ring)\",\n        chart: {\n          \"1\": \"var(--chart-1)\",\n          \"2\": \"var(--chart-2)\",\n          \"3\": \"var(--chart-3)\",\n          \"4\": \"var(--chart-4)\",\n          \"5\": \"var(--chart-5)\",\n        },\n        sidebar: {\n          DEFAULT: \"var(--sidebar)\",\n          foreground: \"var(--sidebar-foreground)\",\n          primary: \"var(--sidebar-primary)\",\n          \"primary-foreground\": \"var(--sidebar-primary-foreground)\",\n          accent: \"var(--sidebar-accent)\",\n          \"accent-foreground\": \"var(--sidebar-accent-foreground)\",\n          border: \"var(--sidebar-border)\",\n          ring: \"var(--sidebar-ring)\",\n        },\n      },\n      fontFamily: {\n        sans: [\"var(--font-sans)\"],\n        serif: [\"var(--font-serif)\"],\n        mono: [\"var(--font-mono)\"],\n      },\n      keyframes: {\n        \"accordion-down\": {\n          from: {\n            height: \"0\",\n          },\n          to: {\n            height: \"var(--radix-accordion-content-height)\",\n          },\n        },\n        \"accordion-up\": {\n          from: {\n            height: \"var(--radix-accordion-content-height)\",\n          },\n          to: {\n            height: \"0\",\n          },\n        },\n        fillProgress: {\n          from: {\n            width: \"0%\",\n          },\n          to: {\n            width: \"var(--progress-width)\",\n          },\n        },\n      },\n      animation: {\n        \"accordion-down\": \"accordion-down 0.2s ease-out\",\n        \"accordion-up\": \"accordion-up 0.2s ease-out\",\n        \"fill-progress\": \"fillProgress 2s ease-in-out\",\n      },\n    },\n  },\n  plugins: [require(\"tailwindcss-animate\"), require(\"@tailwindcss/typography\")],\n} satisfies Config;\n","size_bytes":2975},"vite.config.ts":{"content":"import { defineConfig } from \"vite\";\nimport react from \"@vitejs/plugin-react\";\nimport path from \"path\";\nimport runtimeErrorOverlay from \"@replit/vite-plugin-runtime-error-modal\";\n\nexport default defineConfig({\n  plugins: [\n    react(),\n    runtimeErrorOverlay(),\n    ...(process.env.NODE_ENV !== \"production\" &&\n    process.env.REPL_ID !== undefined\n      ? [\n          await import(\"@replit/vite-plugin-cartographer\").then((m) =>\n            m.cartographer()\n          ),\n        ]\n      : []),\n  ],\n  resolve: {\n    alias: {\n      \"@\": path.resolve(import.meta.dirname, \"client\", \"src\"),\n      \"@shared\": path.resolve(import.meta.dirname, \"shared\"),\n      \"@assets\": path.resolve(import.meta.dirname, \"attached_assets\"),\n    },\n  },\n  root: path.resolve(import.meta.dirname, \"client\"),\n  build: {\n    outDir: path.resolve(import.meta.dirname, \"dist/public\"),\n    emptyOutDir: true,\n  },\n  server: {\n    fs: {\n      strict: true,\n      deny: [\"**/.*\"],\n    },\n    allowedHosts: true,\n    host: \"0.0.0.0\",\n    port: 5000,\n    proxy: {\n      \"/api\": {\n        target: \"http://localhost:8000\",\n        changeOrigin: true,\n      },\n    },\n  },\n});\n","size_bytes":1145},"server/db.ts":{"content":"import { Pool, neonConfig } from '@neondatabase/serverless';\nimport { drizzle } from 'drizzle-orm/neon-serverless';\nimport ws from \"ws\";\nimport * as schema from \"@shared/schema\";\n\n// Environment detection\nconst isReplit = !!(process.env.REPL_ID || process.env.REPLIT_DEV_DOMAIN);\nconst isDevelopment = process.env.NODE_ENV === 'development';\nconst isProduction = process.env.NODE_ENV === 'production';\n\n// Neon configuration\nneonConfig.webSocketConstructor = ws;\nneonConfig.pipelineConnect = false;\n\n// SSL Configuration based on environment\nif (isDevelopment) {\n  // For development (both local and Replit), disable strict SSL verification\n  process.env[\"NODE_TLS_REJECT_UNAUTHORIZED\"] = \"0\";\n  console.log(\"🔓 SSL verification disabled for development\");\n}\n\nif (!process.env.DATABASE_URL) {\n  const environmentHelp = isReplit \n    ? \"Make sure PostgreSQL is enabled in your Replit environment\" \n    : \"Set DATABASE_URL in your local environment (.env file)\";\n  \n  throw new Error(\n    `DATABASE_URL must be set. ${environmentHelp}`\n  );\n}\n\n// Database connection configuration\nconst dbConfig: any = {\n  connectionString: process.env.DATABASE_URL,\n};\n\n// SSL configuration based on environment\nif (isProduction) {\n  // Production: Enable SSL but don't reject unauthorized (for compatibility)\n  dbConfig.ssl = { rejectUnauthorized: false };\n} else if (isReplit) {\n  // Replit development: No SSL for internal connections\n  dbConfig.ssl = false;\n} else {\n  // Local development: Typically no SSL needed\n  dbConfig.ssl = false;\n}\n\n// Log connection info (without exposing sensitive data)\nconst dbUrl = new URL(process.env.DATABASE_URL);\nconsole.log(`🗄️  Database: ${dbUrl.hostname}:${dbUrl.port}${dbUrl.pathname}`);\nconsole.log(`🔧 Environment: ${isReplit ? 'Replit' : 'Local'} (${process.env.NODE_ENV || 'development'})`);\n\nexport const pool = new Pool(dbConfig);\nexport const db = drizzle({ client: pool, schema });","size_bytes":1924},"server/index.ts":{"content":"import \"dotenv/config\";\nimport express, { type Request, Response, NextFunction } from \"express\";\nimport { registerRoutes } from \"./routes\";\nimport { setupVite, serveStatic, log } from \"./vite\";\n\nconst app = express();\napp.use(express.json());\napp.use(express.urlencoded({ extended: false }));\n\napp.use((req, res, next) => {\n  const start = Date.now();\n  const path = req.path;\n  let capturedJsonResponse: Record<string, any> | undefined = undefined;\n\n  const originalResJson = res.json;\n  res.json = function (bodyJson, ...args) {\n    capturedJsonResponse = bodyJson;\n    return originalResJson.apply(res, [bodyJson, ...args]);\n  };\n\n  res.on(\"finish\", () => {\n    const duration = Date.now() - start;\n    if (path.startsWith(\"/api\")) {\n      let logLine = `${req.method} ${path} ${res.statusCode} in ${duration}ms`;\n      if (capturedJsonResponse) {\n        logLine += ` :: ${JSON.stringify(capturedJsonResponse)}`;\n      }\n\n      if (logLine.length > 80) {\n        logLine = logLine.slice(0, 79) + \"…\";\n      }\n\n      log(logLine);\n    }\n  });\n\n  next();\n});\n\n(async () => {\n  const server = await registerRoutes(app);\n\n  app.use((err: any, _req: Request, res: Response, _next: NextFunction) => {\n    const status = err.status || err.statusCode || 500;\n    const message = err.message || \"Internal Server Error\";\n\n    res.status(status).json({ message });\n    throw err;\n  });\n\n  // importantly only setup vite in development and after\n  // setting up all the other routes so the catch-all route\n  // doesn't interfere with the other routes\n  if (app.get(\"env\") === \"development\") {\n    await setupVite(app, server);\n  } else {\n    serveStatic(app);\n  }\n\n  // Environment detection\n  const isReplit = process.env.REPL_ID || process.env.REPLIT_DEV_DOMAIN;\n  const isProduction = process.env.NODE_ENV === \"production\";\n\n  // Port configuration - flexible for local and Replit\n  const port = parseInt(\n    process.env.PORT || (isReplit ? \"5000\" : \"3000\"), // Default to 5000 for Replit, 3000 for local\n    10\n  );\n\n  // Host configuration - 0.0.0.0 for Replit, localhost for local\n  const host = isReplit ? \"0.0.0.0\" : \"localhost\";\n\n  // Server options\n  const serverOptions: any = {\n    port,\n    host,\n  };\n\n  // Only add reusePort for Replit to avoid local conflicts\n  if (isReplit) {\n    serverOptions.reusePort = true;\n  }\n\n  server.listen(serverOptions, () => {\n    const environment = isReplit ? \"Replit\" : \"Local\";\n    log(`🚀 ${environment} server running at http://${host}:${port}`);\n    log(`📊 Environment: ${process.env.NODE_ENV || \"development\"}`);\n    log(\n      `🔗 Database: ${\n        process.env.DATABASE_URL ? \"Connected\" : \"Not configured\"\n      }`\n    );\n  });\n})();\n","size_bytes":2696},"server/oauth.ts":{"content":"import passport from 'passport';\nimport { Strategy as GoogleStrategy } from 'passport-google-oauth20';\nimport { Strategy as GitHubStrategy } from 'passport-github2';\nimport { storage } from './storage';\nimport jwt from 'jsonwebtoken';\n\nconst JWT_SECRET = process.env.JWT_SECRET || \"your-jwt-secret-key\";\n\nexport function setupOAuth() {\n  // Only setup OAuth if environment variables are provided\n  const googleClientId = process.env.GOOGLE_CLIENT_ID;\n  const googleClientSecret = process.env.GOOGLE_CLIENT_SECRET;\n  const githubClientId = process.env.GITHUB_CLIENT_ID;\n  const githubClientSecret = process.env.GITHUB_CLIENT_SECRET;\n\n  // Google OAuth Strategy\n  if (googleClientId && googleClientSecret) {\n    passport.use(new GoogleStrategy({\n      clientID: googleClientId,\n      clientSecret: googleClientSecret,\n      callbackURL: \"/api/auth/google/callback\"\n    },\n    async (accessToken: string, refreshToken: string, profile: any, done: any) => {\n    try {\n      let user = await storage.getUserByGoogleId(profile.id);\n      \n      if (user) {\n        return done(null, user);\n      }\n      \n      // Check if user exists with same email\n      if (profile.emails && profile.emails[0]) {\n        user = await storage.getUserByEmail(profile.emails[0].value);\n        if (user) {\n          // Update existing user with Google ID\n          user = await storage.updateUser(user.id, {\n            googleId: profile.id,\n            authProvider: 'google',\n            profileImageUrl: user.profileImageUrl || profile.photos?.[0]?.value,\n          });\n          return done(null, user);\n        }\n      }\n      \n      // Create new user\n      const newUser = await storage.createUser({\n        username: profile.displayName || `user_${profile.id}`,\n        email: profile.emails?.[0]?.value || '',\n        firstName: profile.name?.givenName,\n        lastName: profile.name?.familyName,\n        profileImageUrl: profile.photos?.[0]?.value,\n        googleId: profile.id,\n        authProvider: 'google',\n      });\n      \n      return done(null, newUser);\n    } catch (error) {\n      return done(error, undefined);\n    }\n    }));\n  }\n\n  // GitHub OAuth Strategy\n  if (githubClientId && githubClientSecret) {\n    passport.use(new GitHubStrategy({\n      clientID: githubClientId,\n      clientSecret: githubClientSecret,\n      callbackURL: \"/api/auth/github/callback\"\n    },\n    async (accessToken: string, refreshToken: string, profile: any, done: any) => {\n    try {\n      let user = await storage.getUserByGithubId(profile.id);\n      \n      if (user) {\n        return done(null, user);\n      }\n      \n      // Check if user exists with same email\n      if (profile.emails && profile.emails[0]) {\n        user = await storage.getUserByEmail(profile.emails[0].value);\n        if (user) {\n          // Update existing user with GitHub ID\n          user = await storage.updateUser(user.id, {\n            githubId: profile.id,\n            authProvider: 'github',\n            profileImageUrl: user.profileImageUrl || profile.photos?.[0]?.value,\n          });\n          return done(null, user);\n        }\n      }\n      \n      // Create new user\n      const newUser = await storage.createUser({\n        username: profile.username || `user_${profile.id}`,\n        email: profile.emails?.[0]?.value || '',\n        firstName: profile.displayName?.split(' ')[0],\n        lastName: profile.displayName?.split(' ').slice(1).join(' '),\n        profileImageUrl: profile.photos?.[0]?.value,\n        githubId: profile.id,\n        authProvider: 'github',\n      });\n      \n      return done(null, newUser);\n    } catch (error) {\n      return done(error, undefined);\n    }\n    }));\n  }\n\n  passport.serializeUser((user: any, done) => {\n    done(null, user.id);\n  });\n\n  passport.deserializeUser(async (id: string, done) => {\n    try {\n      const user = await storage.getUserById(id);\n      done(null, user);\n    } catch (error) {\n      done(error, null);\n    }\n  });\n}","size_bytes":3942},"server/routes.ts":{"content":"import type { Express } from \"express\";\nimport { createServer, type Server } from \"http\";\nimport { storage } from \"./storage\";\nimport {\n  insertUserSchema,\n  insertSubmissionSchema,\n  insertCommunityPostSchema,\n  insertPostCommentSchema,\n} from \"@shared/schema\";\nimport bcrypt from \"bcrypt\";\nimport jwt from \"jsonwebtoken\";\nimport passport from \"passport\";\nimport session from \"express-session\";\nimport { setupOAuth } from \"./oauth\";\n\nconst JWT_SECRET = process.env.JWT_SECRET || \"your-jwt-secret-key\";\n\n// Middleware to verify JWT token\nconst authenticateToken = (req: any, res: any, next: any) => {\n  const authHeader = req.headers[\"authorization\"];\n  const token = authHeader && authHeader.split(\" \")[1];\n\n  if (!token) {\n    return res.status(401).json({ message: \"Access token required\" });\n  }\n\n  jwt.verify(token, JWT_SECRET, (err: any, user: any) => {\n    if (err) {\n      return res.status(403).json({ message: \"Invalid or expired token\" });\n    }\n    req.user = user;\n    next();\n  });\n};\n\nexport async function registerRoutes(app: Express): Promise<Server> {\n  // Configure session middleware\n  app.use(\n    session({\n      secret: process.env.SESSION_SECRET || \"fallback-secret\",\n      resave: false,\n      saveUninitialized: false,\n      cookie: { secure: false }, // Set to true in production with HTTPS\n    })\n  );\n\n  // Initialize passport and session\n  app.use(passport.initialize());\n  app.use(passport.session());\n  setupOAuth();\n\n  // Auth routes\n  app.post(\"/api/auth/register\", async (req, res) => {\n    try {\n      const userData = insertUserSchema.parse(req.body);\n\n      // Check if user already exists\n      const existingUser = await storage.getUserByEmail(userData.email);\n      if (existingUser) {\n        return res.status(400).json({ message: \"User already exists\" });\n      }\n\n      const existingUsername = await storage.getUserByUsername(\n        userData.username\n      );\n      if (existingUsername) {\n        return res.status(400).json({ message: \"Username already taken\" });\n      }\n\n      // Hash password\n      const saltRounds = 10;\n      const passwordHash = userData.passwordHash\n        ? await bcrypt.hash(userData.passwordHash, saltRounds)\n        : undefined;\n\n      // Create user\n      const user = await storage.createUser({\n        ...userData,\n        passwordHash,\n      });\n\n      // Generate JWT token\n      const token = jwt.sign(\n        { userId: user.id, username: user.username },\n        JWT_SECRET,\n        {\n          expiresIn: \"24h\",\n        }\n      );\n\n      res.status(201).json({\n        message: \"User created successfully\",\n        token,\n        user: {\n          id: user.id,\n          username: user.username,\n          email: user.email,\n          firstName: user.firstName,\n          lastName: user.lastName,\n          profileImageUrl: user.profileImageUrl,\n          problemsSolved: user.problemsSolved,\n        },\n      });\n    } catch (error) {\n      console.error(\"Registration error:\", error);\n      res.status(500).json({ message: \"Failed to create user\" });\n    }\n  });\n\n  app.post(\"/api/auth/login\", async (req, res) => {\n    try {\n      const { email, password } = req.body;\n\n      // Find user by email\n      const user = await storage.getUserByEmail(email);\n      if (!user) {\n        return res.status(401).json({ message: \"Invalid credentials\" });\n      }\n\n      // Verify password\n      if (!user.passwordHash) {\n        return res.status(401).json({ message: \"Invalid credentials\" });\n      }\n      const isValidPassword = await bcrypt.compare(password, user.passwordHash);\n      if (!isValidPassword) {\n        return res.status(401).json({ message: \"Invalid credentials\" });\n      }\n\n      // Generate JWT token\n      const token = jwt.sign(\n        { userId: user.id, username: user.username },\n        JWT_SECRET,\n        {\n          expiresIn: \"24h\",\n        }\n      );\n\n      res.json({\n        token,\n        user: {\n          id: user.id,\n          username: user.username,\n          email: user.email,\n          firstName: user.firstName,\n          lastName: user.lastName,\n          profileImageUrl: user.profileImageUrl,\n          problemsSolved: user.problemsSolved,\n        },\n      });\n    } catch (error) {\n      console.error(\"Login error:\", error);\n      res.status(500).json({ message: \"Login failed\" });\n    }\n  });\n\n  // Get current user\n  app.get(\"/api/auth/user\", authenticateToken, async (req: any, res) => {\n    try {\n      const user = await storage.getUserById(req.user.userId);\n      if (!user) {\n        return res.status(404).json({ message: \"User not found\" });\n      }\n\n      res.json({\n        id: user.id,\n        username: user.username,\n        email: user.email,\n        firstName: user.firstName,\n        lastName: user.lastName,\n        profileImageUrl: user.profileImageUrl,\n        problemsSolved: user.problemsSolved,\n      });\n    } catch (error) {\n      console.error(\"Get user error:\", error);\n      res.status(500).json({ message: \"Failed to fetch user\" });\n    }\n  });\n\n  // Problem routes\n  app.get(\"/api/problems\", async (req, res) => {\n    try {\n      const { difficulty } = req.query;\n      const authHeader = req.headers[\"authorization\"];\n      const token = authHeader && authHeader.split(\" \")[1];\n      let problems;\n\n      // If user is authenticated, include solve status\n      if (token) {\n        try {\n          const decoded = jwt.verify(token, JWT_SECRET) as any;\n          const userId = decoded.userId;\n\n          if (difficulty && typeof difficulty === \"string\") {\n            problems = await storage.getProblemsByDifficultyForUser(\n              difficulty,\n              userId\n            );\n          } else {\n            problems = await storage.getAllProblemsForUser(userId);\n          }\n        } catch (jwtError) {\n          // If token is invalid, fall back to unauthenticated response\n          if (difficulty && typeof difficulty === \"string\") {\n            problems = await storage.getProblemsByDifficulty(difficulty);\n          } else {\n            problems = await storage.getAllProblems();\n          }\n        }\n      } else {\n        // Unauthenticated user\n        if (difficulty && typeof difficulty === \"string\") {\n          problems = await storage.getProblemsByDifficulty(difficulty);\n        } else {\n          problems = await storage.getAllProblems();\n        }\n      }\n\n      res.json(problems);\n    } catch (error) {\n      console.error(\"Get problems error:\", error);\n      res.status(500).json({ message: \"Failed to fetch problems\" });\n    }\n  });\n\n  app.get(\"/api/problems/:id\", async (req, res) => {\n    try {\n      const problem = await storage.getProblemById(req.params.id);\n      if (!problem) {\n        return res.status(404).json({ message: \"Problem not found\" });\n      }\n      res.json(problem);\n    } catch (error) {\n      console.error(\"Get problem error:\", error);\n      res.status(500).json({ message: \"Failed to fetch problem\" });\n    }\n  });\n\n  // OAuth routes\n  app.get(\n    \"/api/auth/google\",\n    passport.authenticate(\"google\", { scope: [\"profile\", \"email\"] })\n  );\n\n  app.get(\n    \"/api/auth/google/callback\",\n    passport.authenticate(\"google\", { failureRedirect: \"/\" }),\n    (req, res) => {\n      // Successful authentication, create JWT and redirect\n      const user = req.user as any;\n      const token = jwt.sign({ userId: user.id }, JWT_SECRET, {\n        expiresIn: \"7d\",\n      });\n      res.redirect(`/?token=${token}`);\n    }\n  );\n\n  app.get(\n    \"/api/auth/github\",\n    passport.authenticate(\"github\", { scope: [\"user:email\"] })\n  );\n\n  app.get(\n    \"/api/auth/github/callback\",\n    passport.authenticate(\"github\", { failureRedirect: \"/\" }),\n    (req, res) => {\n      // Successful authentication, create JWT and redirect\n      const user = req.user as any;\n      const token = jwt.sign({ userId: user.id }, JWT_SECRET, {\n        expiresIn: \"7d\",\n      });\n      res.redirect(`/?token=${token}`);\n    }\n  );\n\n  // Submission routes\n  app.post(\"/api/submissions\", authenticateToken, async (req: any, res) => {\n    try {\n      const submissionData = insertSubmissionSchema.parse({\n        ...req.body,\n        userId: req.user.userId,\n      });\n\n      // Simulate SQL query execution\n      const isCorrect = await simulateQueryExecution(\n        submissionData.query,\n        submissionData.problemId\n      );\n      const executionTime = Math.floor(Math.random() * 500) + 50; // Random execution time\n\n      const submission = await storage.createSubmission({\n        ...submissionData,\n        isCorrect,\n        executionTime,\n      });\n\n      // If correct, update user progress\n      if (isCorrect) {\n        await storage.updateUserProgress(req.user.userId);\n      }\n\n      res.json({\n        ...submission,\n        message: isCorrect\n          ? \"Query executed successfully!\"\n          : \"Query has errors or incorrect result\",\n      });\n    } catch (error) {\n      console.error(\"Submission error:\", error);\n      res.status(500).json({ message: \"Failed to submit solution\" });\n    }\n  });\n\n  app.get(\n    \"/api/submissions/user/:userId\",\n    authenticateToken,\n    async (req: any, res) => {\n      try {\n        // Users can only view their own submissions\n        if (req.params.userId !== req.user.userId) {\n          return res.status(403).json({ message: \"Access denied\" });\n        }\n\n        const submissions = await storage.getUserSubmissions(req.params.userId);\n        res.json(submissions);\n      } catch (error) {\n        console.error(\"Get submissions error:\", error);\n        res.status(500).json({ message: \"Failed to fetch submissions\" });\n      }\n    }\n  );\n\n  // Leaderboard routes\n  app.get(\"/api/leaderboard\", async (req, res) => {\n    try {\n      const { limit } = req.query;\n      const leaderboard = await storage.getLeaderboard(\n        limit ? parseInt(limit as string) : undefined\n      );\n\n      res.json(\n        leaderboard.map((user) => ({\n          id: user.id,\n          username: user.username,\n          firstName: user.firstName,\n          lastName: user.lastName,\n          profileImageUrl: user.profileImageUrl,\n          problemsSolved: user.problemsSolved,\n        }))\n      );\n    } catch (error) {\n      console.error(\"Get leaderboard error:\", error);\n      res.status(500).json({ message: \"Failed to fetch leaderboard\" });\n    }\n  });\n\n  // Community routes\n  app.get(\"/api/community/posts\", async (req, res) => {\n    try {\n      const posts = await storage.getAllCommunityPosts();\n      res.json(\n        posts.map((post) => ({\n          ...post,\n          user: {\n            id: post.user.id,\n            username: post.user.username,\n            firstName: post.user.firstName,\n            lastName: post.user.lastName,\n            profileImageUrl: post.user.profileImageUrl,\n          },\n        }))\n      );\n    } catch (error) {\n      console.error(\"Get community posts error:\", error);\n      res.status(500).json({ message: \"Failed to fetch community posts\" });\n    }\n  });\n\n  app.post(\"/api/community/posts\", authenticateToken, async (req: any, res) => {\n    try {\n      const postData = insertCommunityPostSchema.parse({\n        ...req.body,\n        userId: req.user.userId,\n      });\n\n      const post = await storage.createCommunityPost(postData);\n      res.status(201).json(post);\n    } catch (error) {\n      console.error(\"Create post error:\", error);\n      res.status(500).json({ message: \"Failed to create post\" });\n    }\n  });\n\n  app.post(\n    \"/api/community/posts/:postId/like\",\n    authenticateToken,\n    async (req: any, res) => {\n      try {\n        await storage.likeCommunityPost(req.user.userId, req.params.postId);\n        res.json({ message: \"Post liked successfully\" });\n      } catch (error) {\n        console.error(\"Like post error:\", error);\n        res.status(500).json({ message: \"Failed to like post\" });\n      }\n    }\n  );\n\n  app.delete(\n    \"/api/community/posts/:postId/like\",\n    authenticateToken,\n    async (req: any, res) => {\n      try {\n        await storage.unlikeCommunityPost(req.user.userId, req.params.postId);\n        res.json({ message: \"Post unliked successfully\" });\n      } catch (error) {\n        console.error(\"Unlike post error:\", error);\n        res.status(500).json({ message: \"Failed to unlike post\" });\n      }\n    }\n  );\n\n  app.get(\"/api/community/posts/:postId/comments\", async (req, res) => {\n    try {\n      const comments = await storage.getPostComments(req.params.postId);\n      res.json(\n        comments.map((comment) => ({\n          ...comment,\n          user: {\n            id: comment.user.id,\n            username: comment.user.username,\n            firstName: comment.user.firstName,\n            lastName: comment.user.lastName,\n            profileImageUrl: comment.user.profileImageUrl,\n          },\n        }))\n      );\n    } catch (error) {\n      console.error(\"Get comments error:\", error);\n      res.status(500).json({ message: \"Failed to fetch comments\" });\n    }\n  });\n\n  app.post(\n    \"/api/community/posts/:postId/comments\",\n    authenticateToken,\n    async (req: any, res) => {\n      try {\n        const commentData = insertPostCommentSchema.parse({\n          ...req.body,\n          userId: req.user.userId,\n          postId: req.params.postId,\n        });\n\n        const comment = await storage.createPostComment(commentData);\n        res.status(201).json(comment);\n      } catch (error) {\n        console.error(\"Create comment error:\", error);\n        res.status(500).json({ message: \"Failed to create comment\" });\n      }\n    }\n  );\n\n  const httpServer = createServer(app);\n  return httpServer;\n}\n\n// Helper functions\nasync function simulateQueryExecution(\n  query: string,\n  problemId: string\n): Promise<boolean> {\n  // This is a simplified simulation. In a real app, you'd run the query against a sandbox database.\n  const problem = await storage.getProblemById(problemId);\n  if (!problem) return false;\n\n  // Simple validation: check if query contains basic SQL keywords and structure\n  const normalizedQuery = query.toLowerCase().trim();\n\n  // Basic checks for different problem types\n  if (problem.title.toLowerCase().includes(\"sum\")) {\n    return (\n      normalizedQuery.includes(\"select\") &&\n      normalizedQuery.includes(\"from\") &&\n      (normalizedQuery.includes(\"sum\") || normalizedQuery.includes(\"+\"))\n    );\n  }\n\n  if (problem.title.toLowerCase().includes(\"join\")) {\n    return (\n      normalizedQuery.includes(\"select\") &&\n      normalizedQuery.includes(\"from\") &&\n      normalizedQuery.includes(\"join\")\n    );\n  }\n\n  // Default validation: must contain SELECT and FROM\n  return normalizedQuery.includes(\"select\") && normalizedQuery.includes(\"from\");\n}\n","size_bytes":14613},"server/storage.ts":{"content":"import {\n  users,\n  problems,\n  submissions,\n  communityPosts,\n  postLikes,\n  postComments,\n  type User,\n  type InsertUser,\n  type Problem,\n  type InsertProblem,\n  type Submission,\n  type InsertSubmission,\n  type CommunityPost,\n  type InsertCommunityPost,\n  type PostComment,\n  type InsertPostComment,\n} from \"@shared/schema\";\nimport { db } from \"./db\";\nimport { eq, desc, sql, and } from \"drizzle-orm\";\n\nexport interface IStorage {\n  // User operations\n  getUserById(id: string): Promise<User | undefined>;\n  getUserByEmail(email: string): Promise<User | undefined>;\n  getUserByUsername(username: string): Promise<User | undefined>;\n  getUserByGoogleId(googleId: string): Promise<User | undefined>;\n  getUserByGithubId(githubId: string): Promise<User | undefined>;\n  createUser(user: InsertUser): Promise<User>;\n  updateUser(id: string, user: Partial<InsertUser>): Promise<User>;\n  getLeaderboard(limit?: number): Promise<User[]>;\n  updateUserProgress(userId: string): Promise<void>;\n\n  // Problem operations\n  getAllProblems(): Promise<(Problem & { solvedCount: number })[]>;\n  getAllProblemsForUser(userId: string): Promise<(Problem & { solvedCount: number; isUserSolved: boolean })[]>;\n  getProblemById(id: string): Promise<Problem | undefined>;\n  getProblemsByDifficulty(difficulty: string): Promise<(Problem & { solvedCount: number })[]>;\n  getProblemsByDifficultyForUser(difficulty: string, userId: string): Promise<(Problem & { solvedCount: number; isUserSolved: boolean })[]>;\n  createProblem(problem: InsertProblem): Promise<Problem>;\n\n  // Submission operations\n  createSubmission(submission: InsertSubmission): Promise<Submission>;\n  getUserSubmissions(userId: string): Promise<Submission[]>;\n  getUserSubmissionForProblem(userId: string, problemId: string): Promise<Submission[]>;\n\n  // Community operations\n  getAllCommunityPosts(): Promise<(CommunityPost & { user: User })[]>;\n  createCommunityPost(post: InsertCommunityPost): Promise<CommunityPost>;\n  likeCommunityPost(userId: string, postId: string): Promise<void>;\n  unlikeCommunityPost(userId: string, postId: string): Promise<void>;\n  getPostComments(postId: string): Promise<(PostComment & { user: User })[]>;\n  createPostComment(comment: InsertPostComment): Promise<PostComment>;\n\n}\n\nexport class DatabaseStorage implements IStorage {\n  // User operations\n  async getUserById(id: string): Promise<User | undefined> {\n    const [user] = await db.select().from(users).where(eq(users.id, id));\n    return user;\n  }\n\n  async getUserByEmail(email: string): Promise<User | undefined> {\n    const [user] = await db.select().from(users).where(eq(users.email, email));\n    return user;\n  }\n\n  async getUserByUsername(username: string): Promise<User | undefined> {\n    const [user] = await db.select().from(users).where(eq(users.username, username));\n    return user;\n  }\n\n  async getUserByGoogleId(googleId: string): Promise<User | undefined> {\n    const [user] = await db.select().from(users).where(eq(users.googleId, googleId));\n    return user;\n  }\n\n  async getUserByGithubId(githubId: string): Promise<User | undefined> {\n    const [user] = await db.select().from(users).where(eq(users.githubId, githubId));\n    return user;\n  }\n\n  async createUser(userData: InsertUser): Promise<User> {\n    const [user] = await db.insert(users).values(userData).returning();\n    return user;\n  }\n\n  async updateUser(id: string, userData: Partial<InsertUser>): Promise<User> {\n    const [user] = await db\n      .update(users)\n      .set({ ...userData, updatedAt: new Date() })\n      .where(eq(users.id, id))\n      .returning();\n    return user;\n  }\n\n  async getLeaderboard(limit: number = 50): Promise<User[]> {\n    return await db\n      .select()\n      .from(users)\n      .orderBy(desc(users.problemsSolved))\n      .limit(limit);\n  }\n\n  async updateUserProgress(userId: string): Promise<void> {\n    await db\n      .update(users)\n      .set({\n        problemsSolved: sql`${users.problemsSolved} + 1`,\n        updatedAt: new Date(),\n      })\n      .where(eq(users.id, userId));\n  }\n\n  // Problem operations\n  async getAllProblems(): Promise<(Problem & { solvedCount: number })[]> {\n    const result = await db\n      .select({\n        id: problems.id,\n        title: problems.title,\n        description: problems.description,\n        difficulty: problems.difficulty,\n        tags: problems.tags,\n        companies: problems.companies,\n        schema: problems.schema,\n        expectedOutput: problems.expectedOutput,\n        hints: problems.hints,\n        createdAt: problems.createdAt,\n        updatedAt: problems.updatedAt,\n        solvedCount: sql<number>`COALESCE(COUNT(DISTINCT CASE WHEN ${submissions.isCorrect} = true THEN ${submissions.userId} END), 0)`,\n      })\n      .from(problems)\n      .leftJoin(submissions, eq(problems.id, submissions.problemId))\n      .groupBy(problems.id)\n      .orderBy(problems.title);\n    \n    return result.map(row => ({\n      ...row,\n      solvedCount: Number(row.solvedCount)\n    }));\n  }\n\n  async getProblemById(id: string): Promise<Problem | undefined> {\n    const [problem] = await db.select().from(problems).where(eq(problems.id, id));\n    return problem;\n  }\n\n  async getProblemsByDifficulty(difficulty: string): Promise<(Problem & { solvedCount: number })[]> {\n    const result = await db\n      .select({\n        id: problems.id,\n        title: problems.title,\n        description: problems.description,\n        difficulty: problems.difficulty,\n        tags: problems.tags,\n        companies: problems.companies,\n        schema: problems.schema,\n        expectedOutput: problems.expectedOutput,\n        hints: problems.hints,\n        createdAt: problems.createdAt,\n        updatedAt: problems.updatedAt,\n        solvedCount: sql<number>`COALESCE(COUNT(DISTINCT CASE WHEN ${submissions.isCorrect} = true THEN ${submissions.userId} END), 0)`,\n      })\n      .from(problems)\n      .leftJoin(submissions, eq(problems.id, submissions.problemId))\n      .where(eq(problems.difficulty, difficulty))\n      .groupBy(problems.id)\n      .orderBy(problems.title);\n    \n    return result.map(row => ({\n      ...row,\n      solvedCount: Number(row.solvedCount)\n    }));\n  }\n\n  async getAllProblemsForUser(userId: string): Promise<(Problem & { solvedCount: number; isUserSolved: boolean })[]> {\n    const result = await db\n      .select({\n        id: problems.id,\n        title: problems.title,\n        description: problems.description,\n        difficulty: problems.difficulty,\n        tags: problems.tags,\n        companies: problems.companies,\n        schema: problems.schema,\n        expectedOutput: problems.expectedOutput,\n        hints: problems.hints,\n        createdAt: problems.createdAt,\n        updatedAt: problems.updatedAt,\n        solvedCount: sql<number>`COALESCE(COUNT(DISTINCT CASE WHEN ${submissions.isCorrect} = true THEN ${submissions.userId} END), 0)`,\n        isUserSolved: sql<boolean>`COALESCE(MAX(CASE WHEN ${submissions.userId} = ${userId} AND ${submissions.isCorrect} = true THEN 1 ELSE 0 END), 0) = 1`,\n      })\n      .from(problems)\n      .leftJoin(submissions, eq(problems.id, submissions.problemId))\n      .groupBy(problems.id)\n      .orderBy(problems.title);\n    \n    return result.map(row => ({\n      ...row,\n      solvedCount: Number(row.solvedCount),\n      isUserSolved: Boolean(row.isUserSolved)\n    }));\n  }\n\n  async getProblemsByDifficultyForUser(difficulty: string, userId: string): Promise<(Problem & { solvedCount: number; isUserSolved: boolean })[]> {\n    const result = await db\n      .select({\n        id: problems.id,\n        title: problems.title,\n        description: problems.description,\n        difficulty: problems.difficulty,\n        tags: problems.tags,\n        companies: problems.companies,\n        schema: problems.schema,\n        expectedOutput: problems.expectedOutput,\n        hints: problems.hints,\n        createdAt: problems.createdAt,\n        updatedAt: problems.updatedAt,\n        solvedCount: sql<number>`COALESCE(COUNT(DISTINCT CASE WHEN ${submissions.isCorrect} = true THEN ${submissions.userId} END), 0)`,\n        isUserSolved: sql<boolean>`COALESCE(MAX(CASE WHEN ${submissions.userId} = ${userId} AND ${submissions.isCorrect} = true THEN 1 ELSE 0 END), 0) = 1`,\n      })\n      .from(problems)\n      .leftJoin(submissions, eq(problems.id, submissions.problemId))\n      .where(eq(problems.difficulty, difficulty))\n      .groupBy(problems.id)\n      .orderBy(problems.title);\n    \n    return result.map(row => ({\n      ...row,\n      solvedCount: Number(row.solvedCount),\n      isUserSolved: Boolean(row.isUserSolved)\n    }));\n  }\n\n  async createProblem(problemData: InsertProblem): Promise<Problem> {\n    const [problem] = await db.insert(problems).values([problemData]).returning();\n    return problem;\n  }\n\n\n  // Submission operations\n  async createSubmission(submissionData: InsertSubmission): Promise<Submission> {\n    const [submission] = await db.insert(submissions).values(submissionData).returning();\n    return submission;\n  }\n\n  async getUserSubmissions(userId: string): Promise<Submission[]> {\n    return await db\n      .select()\n      .from(submissions)\n      .where(eq(submissions.userId, userId))\n      .orderBy(desc(submissions.submittedAt));\n  }\n\n  async getUserSubmissionForProblem(userId: string, problemId: string): Promise<Submission[]> {\n    return await db\n      .select()\n      .from(submissions)\n      .where(and(eq(submissions.userId, userId), eq(submissions.problemId, problemId)))\n      .orderBy(desc(submissions.submittedAt));\n  }\n\n  // Community operations\n  async getAllCommunityPosts(): Promise<(CommunityPost & { user: User })[]> {\n    return await db\n      .select({\n        id: communityPosts.id,\n        userId: communityPosts.userId,\n        content: communityPosts.content,\n        codeSnippet: communityPosts.codeSnippet,\n        likes: communityPosts.likes,\n        comments: communityPosts.comments,\n        createdAt: communityPosts.createdAt,\n        updatedAt: communityPosts.updatedAt,\n        user: users,\n      })\n      .from(communityPosts)\n      .innerJoin(users, eq(communityPosts.userId, users.id))\n      .orderBy(desc(communityPosts.createdAt));\n  }\n\n  async createCommunityPost(postData: InsertCommunityPost): Promise<CommunityPost> {\n    const [post] = await db.insert(communityPosts).values(postData).returning();\n    return post;\n  }\n\n  async likeCommunityPost(userId: string, postId: string): Promise<void> {\n    await db.insert(postLikes).values({ userId, postId });\n    await db\n      .update(communityPosts)\n      .set({ likes: sql`${communityPosts.likes} + 1` })\n      .where(eq(communityPosts.id, postId));\n  }\n\n  async unlikeCommunityPost(userId: string, postId: string): Promise<void> {\n    await db\n      .delete(postLikes)\n      .where(and(eq(postLikes.userId, userId), eq(postLikes.postId, postId)));\n    await db\n      .update(communityPosts)\n      .set({ likes: sql`${communityPosts.likes} - 1` })\n      .where(eq(communityPosts.id, postId));\n  }\n\n  async getPostComments(postId: string): Promise<(PostComment & { user: User })[]> {\n    return await db\n      .select({\n        id: postComments.id,\n        userId: postComments.userId,\n        postId: postComments.postId,\n        content: postComments.content,\n        createdAt: postComments.createdAt,\n        user: users,\n      })\n      .from(postComments)\n      .innerJoin(users, eq(postComments.userId, users.id))\n      .where(eq(postComments.postId, postId))\n      .orderBy(postComments.createdAt);\n  }\n\n  async createPostComment(commentData: InsertPostComment): Promise<PostComment> {\n    const [comment] = await db.insert(postComments).values(commentData).returning();\n    await db\n      .update(communityPosts)\n      .set({ comments: sql`${communityPosts.comments} + 1` })\n      .where(eq(communityPosts.id, commentData.postId));\n    return comment;\n  }\n\n}\n\nexport const storage = new DatabaseStorage();\n","size_bytes":11877},"server/vite.ts":{"content":"import express, { type Express } from \"express\";\nimport fs from \"fs\";\nimport path from \"path\";\nimport { createServer as createViteServer, createLogger } from \"vite\";\nimport { type Server } from \"http\";\nimport viteConfig from \"../vite.config\";\nimport { nanoid } from \"nanoid\";\n\nconst viteLogger = createLogger();\n\nexport function log(message: string, source = \"express\") {\n  const formattedTime = new Date().toLocaleTimeString(\"en-US\", {\n    hour: \"numeric\",\n    minute: \"2-digit\",\n    second: \"2-digit\",\n    hour12: true,\n  });\n\n  console.log(`${formattedTime} [${source}] ${message}`);\n}\n\nexport async function setupVite(app: Express, server: Server) {\n  // Environment detection for Vite configuration\n  const isReplit = !!(process.env.REPL_ID || process.env.REPLIT_DEV_DOMAIN);\n  \n  const serverOptions = {\n    middlewareMode: true,\n    hmr: { server },\n    // allowedHosts: true is crucial for Replit but also safe for local\n    allowedHosts: true as const,\n    // For local development, you might want to enable these for better debugging\n    ...(isReplit ? {} : {\n      cors: true,\n      strictPort: false,\n    }),\n  };\n\n  log(`🔧 Setting up Vite for ${isReplit ? 'Replit' : 'Local'} environment`);\n\n  const vite = await createViteServer({\n    ...viteConfig,\n    configFile: false,\n    customLogger: {\n      ...viteLogger,\n      error: (msg, options) => {\n        viteLogger.error(msg, options);\n        if (isReplit) {\n          // In Replit, exit on error to trigger restart\n          process.exit(1);\n        } else {\n          // In local development, just log the error but don't exit\n          console.error('Vite error:', msg);\n        }\n      },\n    },\n    server: serverOptions,\n    appType: \"custom\",\n  });\n\n  app.use(vite.middlewares);\n  app.use(\"*\", async (req, res, next) => {\n    const url = req.originalUrl;\n\n    try {\n      const clientTemplate = path.resolve(\n        import.meta.dirname,\n        \"..\",\n        \"client\",\n        \"index.html\",\n      );\n\n      // always reload the index.html file from disk incase it changes\n      let template = await fs.promises.readFile(clientTemplate, \"utf-8\");\n      template = template.replace(\n        `src=\"/src/main.tsx\"`,\n        `src=\"/src/main.tsx?v=${nanoid()}\"`,\n      );\n      const page = await vite.transformIndexHtml(url, template);\n      res.status(200).set({ \"Content-Type\": \"text/html\" }).end(page);\n    } catch (e) {\n      vite.ssrFixStacktrace(e as Error);\n      next(e);\n    }\n  });\n}\n\nexport function serveStatic(app: Express) {\n  const distPath = path.resolve(import.meta.dirname, \"public\");\n\n  if (!fs.existsSync(distPath)) {\n    throw new Error(\n      `Could not find the build directory: ${distPath}, make sure to build the client first`,\n    );\n  }\n\n  app.use(express.static(distPath));\n\n  // fall through to index.html if the file doesn't exist\n  app.use(\"*\", (_req, res) => {\n    res.sendFile(path.resolve(distPath, \"index.html\"));\n  });\n}\n","size_bytes":2929},"shared/schema.ts":{"content":"import { sql } from \"drizzle-orm\";\nimport { pgTable, text, varchar, integer, timestamp, boolean, jsonb, index } from \"drizzle-orm/pg-core\";\nimport { relations } from \"drizzle-orm\";\nimport { createInsertSchema } from \"drizzle-zod\";\nimport { z } from \"zod\";\n\n// Users table\nexport const users = pgTable(\"users\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  username: varchar(\"username\", { length: 50 }).notNull().unique(),\n  email: varchar(\"email\", { length: 255 }).notNull().unique(),\n  passwordHash: text(\"password_hash\"),\n  firstName: varchar(\"first_name\", { length: 50 }),\n  lastName: varchar(\"last_name\", { length: 50 }),\n  profileImageUrl: text(\"profile_image_url\"),\n  googleId: varchar(\"google_id\", { length: 255 }),\n  githubId: varchar(\"github_id\", { length: 255 }),\n  authProvider: varchar(\"auth_provider\", { length: 20 }).default(\"email\").notNull(),\n  problemsSolved: integer(\"problems_solved\").default(0).notNull(),\n  createdAt: timestamp(\"created_at\").defaultNow().notNull(),\n  updatedAt: timestamp(\"updated_at\").defaultNow().notNull(),\n});\n\n// SQL Problems table\nexport const problems = pgTable(\"problems\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  title: varchar(\"title\", { length: 200 }).notNull(),\n  description: text(\"description\").notNull(),\n  difficulty: varchar(\"difficulty\", { length: 20 }).notNull(), // Easy, Medium, Hard\n  tags: jsonb(\"tags\").$type<string[]>().default([]).notNull(),\n  companies: jsonb(\"companies\").$type<string[]>().default([]).notNull(),\n  schema: text(\"schema\").notNull(), // SQL schema definition\n  expectedOutput: text(\"expected_output\").notNull(),\n  hints: jsonb(\"hints\").$type<string[]>().default([]).notNull(),\n  createdAt: timestamp(\"created_at\").defaultNow().notNull(),\n  updatedAt: timestamp(\"updated_at\").defaultNow().notNull(),\n});\n\n// User submissions table\nexport const submissions = pgTable(\"submissions\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  userId: varchar(\"user_id\").notNull().references(() => users.id),\n  problemId: varchar(\"problem_id\").notNull().references(() => problems.id),\n  query: text(\"query\").notNull(),\n  isCorrect: boolean(\"is_correct\").notNull(),\n  executionTime: integer(\"execution_time\"), // in milliseconds\n  submittedAt: timestamp(\"submitted_at\").defaultNow().notNull(),\n});\n\n// Community posts table\nexport const communityPosts = pgTable(\"community_posts\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  userId: varchar(\"user_id\").notNull().references(() => users.id),\n  content: text(\"content\").notNull(),\n  codeSnippet: text(\"code_snippet\"),\n  likes: integer(\"likes\").default(0).notNull(),\n  comments: integer(\"comments\").default(0).notNull(),\n  createdAt: timestamp(\"created_at\").defaultNow().notNull(),\n  updatedAt: timestamp(\"updated_at\").defaultNow().notNull(),\n});\n\n// Post likes table\nexport const postLikes = pgTable(\"post_likes\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  userId: varchar(\"user_id\").notNull().references(() => users.id),\n  postId: varchar(\"post_id\").notNull().references(() => communityPosts.id),\n  createdAt: timestamp(\"created_at\").defaultNow().notNull(),\n});\n\n// Post comments table\nexport const postComments = pgTable(\"post_comments\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  userId: varchar(\"user_id\").notNull().references(() => users.id),\n  postId: varchar(\"post_id\").notNull().references(() => communityPosts.id),\n  content: text(\"content\").notNull(),\n  createdAt: timestamp(\"created_at\").defaultNow().notNull(),\n});\n\n\n// Relations\nexport const usersRelations = relations(users, ({ many }) => ({\n  submissions: many(submissions),\n  communityPosts: many(communityPosts),\n  postLikes: many(postLikes),\n  postComments: many(postComments),\n}));\n\nexport const problemsRelations = relations(problems, ({ many }) => ({\n  submissions: many(submissions),\n}));\n\nexport const submissionsRelations = relations(submissions, ({ one }) => ({\n  user: one(users, {\n    fields: [submissions.userId],\n    references: [users.id],\n  }),\n  problem: one(problems, {\n    fields: [submissions.problemId],\n    references: [problems.id],\n  }),\n}));\n\nexport const communityPostsRelations = relations(communityPosts, ({ one, many }) => ({\n  user: one(users, {\n    fields: [communityPosts.userId],\n    references: [users.id],\n  }),\n  likes: many(postLikes),\n  comments: many(postComments),\n}));\n\nexport const postLikesRelations = relations(postLikes, ({ one }) => ({\n  user: one(users, {\n    fields: [postLikes.userId],\n    references: [users.id],\n  }),\n  post: one(communityPosts, {\n    fields: [postLikes.postId],\n    references: [communityPosts.id],\n  }),\n}));\n\nexport const postCommentsRelations = relations(postComments, ({ one }) => ({\n  user: one(users, {\n    fields: [postComments.userId],\n    references: [users.id],\n  }),\n  post: one(communityPosts, {\n    fields: [postComments.postId],\n    references: [communityPosts.id],\n  }),\n}));\n\n\n// Insert schemas\nexport const insertUserSchema = createInsertSchema(users).omit({\n  id: true,\n  createdAt: true,\n  updatedAt: true,\n}).extend({\n  passwordHash: z.string().optional(),\n});\n\nexport const insertProblemSchema = createInsertSchema(problems).omit({\n  id: true,\n  createdAt: true,\n  updatedAt: true,\n});\n\nexport const insertSubmissionSchema = createInsertSchema(submissions).omit({\n  id: true,\n  submittedAt: true,\n});\n\nexport const insertCommunityPostSchema = createInsertSchema(communityPosts).omit({\n  id: true,\n  likes: true,\n  comments: true,\n  createdAt: true,\n  updatedAt: true,\n});\n\nexport const insertPostCommentSchema = createInsertSchema(postComments).omit({\n  id: true,\n  createdAt: true,\n});\n\n\n// Types\nexport type User = typeof users.$inferSelect;\nexport type InsertUser = z.infer<typeof insertUserSchema>;\n\nexport type Problem = typeof problems.$inferSelect;\nexport type InsertProblem = z.infer<typeof insertProblemSchema>;\n\nexport type Submission = typeof submissions.$inferSelect;\nexport type InsertSubmission = z.infer<typeof insertSubmissionSchema>;\n\nexport type CommunityPost = typeof communityPosts.$inferSelect;\nexport type InsertCommunityPost = z.infer<typeof insertCommunityPostSchema>;\n\nexport type PostComment = typeof postComments.$inferSelect;\nexport type InsertPostComment = z.infer<typeof insertPostCommentSchema>;\n\n","size_bytes":6349},"client/src/App.tsx":{"content":"import { Switch, Route } from \"wouter\";\nimport { QueryClientProvider } from \"@tanstack/react-query\";\nimport { queryClient } from \"./lib/queryClient\";\nimport { Toaster } from \"@/components/ui/toaster\";\nimport { TooltipProvider } from \"@/components/ui/tooltip\";\nimport { AuthProvider, useAuth } from \"@/hooks/use-auth\";\nimport Landing from \"@/pages/landing\";\nimport Home from \"@/pages/home\";\nimport Problems from \"@/pages/problems\";\nimport ProblemDetail from \"@/pages/problem-detail\";\nimport Leaderboard from \"@/pages/leaderboard\";\nimport Community from \"@/pages/community\";\nimport Submissions from \"@/pages/submissions\";\nimport NotFound from \"@/pages/not-found\";\nimport Navbar from \"@/components/navbar\";\n\nfunction AppRouter() {\n  const { isAuthenticated, isLoading } = useAuth();\n\n  if (isLoading) {\n    return (\n      <div className=\"min-h-screen flex items-center justify-center\">\n        <div className=\"text-center\">\n          <div className=\"w-8 h-8 border-4 border-primary border-t-transparent rounded-full animate-spin mx-auto mb-4\"></div>\n          <p className=\"text-muted-foreground\">Loading SQLGym...</p>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <>\n      {isAuthenticated && <Navbar />}\n      <Switch>\n        {!isAuthenticated ? (\n          <Route path=\"/\" component={Landing} />\n        ) : (\n          <>\n            <Route path=\"/\" component={Home} />\n            <Route path=\"/problems\" component={Problems} />\n            <Route path=\"/problems/:id\" component={ProblemDetail} />\n            <Route path=\"/leaderboard\" component={Leaderboard} />\n            <Route path=\"/community\" component={Community} />\n            <Route path=\"/submissions\" component={Submissions} />\n          </>\n        )}\n        <Route component={NotFound} />\n      </Switch>\n    </>\n  );\n}\n\nfunction App() {\n  return (\n    <QueryClientProvider client={queryClient}>\n      <TooltipProvider>\n        <AuthProvider>\n          <Toaster />\n          <AppRouter />\n        </AuthProvider>\n      </TooltipProvider>\n    </QueryClientProvider>\n  );\n}\n\nexport default App;\n","size_bytes":2072},"client/src/index.css":{"content":"@import url('https://fonts.googleapis.com/css2?family=Inter:wght@300;400;500;600;700&display=swap');\n@tailwind base;\n@tailwind components;\n@tailwind utilities;\n\n:root {\n  --background: hsl(0 0% 100%);\n  --foreground: hsl(222 84% 4.9%);\n  --card: hsl(0 0% 100%);\n  --card-foreground: hsl(222 84% 4.9%);\n  --popover: hsl(0 0% 100%);\n  --popover-foreground: hsl(222 84% 4.9%);\n  --primary: hsl(24 95% 53%);\n  --primary-foreground: hsl(210 40% 98%);\n  --secondary: hsl(210 40% 96%);\n  --secondary-foreground: hsl(222 47% 11%);\n  --muted: hsl(210 40% 96%);\n  --muted-foreground: hsl(215 16% 47%);\n  --accent: hsl(210 40% 96%);\n  --accent-foreground: hsl(222 47% 11%);\n  --destructive: hsl(0 84% 60%);\n  --destructive-foreground: hsl(210 40% 98%);\n  --border: hsl(214 32% 91%);\n  --input: hsl(214 32% 91%);\n  --ring: hsl(24 95% 53%);\n  --chart-1: hsl(24 95% 53%);\n  --chart-2: hsl(159.7826 100% 36.0784%);\n  --chart-3: hsl(42.0290 92.8251% 56.2745%);\n  --chart-4: hsl(147.1429 78.5047% 41.9608%);\n  --chart-5: hsl(341.4894 75.2000% 50.9804%);\n  --sidebar: hsl(210 40% 96%);\n  --sidebar-foreground: hsl(222 84% 4.9%);\n  --sidebar-primary: hsl(24 95% 53%);\n  --sidebar-primary-foreground: hsl(210 40% 98%);\n  --sidebar-accent: hsl(210 40% 96%);\n  --sidebar-accent-foreground: hsl(222 47% 11%);\n  --sidebar-border: hsl(214 32% 91%);\n  --sidebar-ring: hsl(24 95% 53%);\n  --font-sans: 'Inter', system-ui, sans-serif;\n  --font-serif: Georgia, serif;\n  --font-mono: 'Courier New', monospace;\n  --radius: 8px;\n  --shadow-2xs: 0px 2px 0px 0px hsl(24 95% 53% / 0.00);\n  --shadow-xs: 0px 2px 0px 0px hsl(24 95% 53% / 0.00);\n  --shadow-sm: 0px 2px 0px 0px hsl(24 95% 53% / 0.00), 0px 1px 2px -1px hsl(24 95% 53% / 0.00);\n  --shadow: 0px 2px 0px 0px hsl(24 95% 53% / 0.00), 0px 1px 2px -1px hsl(24 95% 53% / 0.00);\n  --shadow-md: 0px 2px 0px 0px hsl(24 95% 53% / 0.00), 0px 2px 4px -1px hsl(24 95% 53% / 0.00);\n  --shadow-lg: 0px 2px 0px 0px hsl(24 95% 53% / 0.00), 0px 4px 6px -1px hsl(24 95% 53% / 0.00);\n  --shadow-xl: 0px 2px 0px 0px hsl(24 95% 53% / 0.00), 0px 8px 10px -1px hsl(24 95% 53% / 0.00);\n  --shadow-2xl: 0px 2px 0px 0px hsl(24 95% 53% / 0.00);\n  --tracking-normal: 0em;\n  --spacing: 0.25rem;\n}\n\n.dark {\n  --background: hsl(0 0% 0%);\n  --foreground: hsl(200 6.6667% 91.1765%);\n  --card: hsl(228 9.8039% 10%);\n  --card-foreground: hsl(0 0% 85.0980%);\n  --popover: hsl(0 0% 0%);\n  --popover-foreground: hsl(200 6.6667% 91.1765%);\n  --primary: hsl(24 95% 53%);\n  --primary-foreground: hsl(210 40% 98%);\n  --secondary: hsl(195.0000 15.3846% 94.9020%);\n  --secondary-foreground: hsl(210 25% 7.8431%);\n  --muted: hsl(0 0% 9.4118%);\n  --muted-foreground: hsl(210 3.3898% 46.2745%);\n  --accent: hsl(205.7143 70% 7.8431%);\n  --accent-foreground: hsl(24 95% 53%);\n  --destructive: hsl(0 84% 60%);\n  --destructive-foreground: hsl(210 40% 98%);\n  --border: hsl(210 5.2632% 14.9020%);\n  --input: hsl(207.6923 27.6596% 18.4314%);\n  --ring: hsl(24 95% 53%);\n}\n\n@layer base {\n  * {\n    @apply border-border;\n  }\n\n  body {\n    @apply font-sans antialiased bg-background text-foreground;\n  }\n}\n\n/* Gym-inspired custom styles */\n.dumbbell-btn {\n  position: relative;\n  transition: all 0.3s ease;\n}\n\n.dumbbell-btn:hover {\n  transform: translateY(-2px);\n}\n\n.progress-weight {\n  background: linear-gradient(90deg, var(--primary) 0%, #f59e0b 100%);\n  animation: fillProgress 2s ease-in-out;\n  transition: width 0.3s ease;\n}\n\n@keyframes fillProgress {\n  from { width: 0%; }\n  to { width: var(--progress-width); }\n}\n\n.weight-plate {\n  width: 12px;\n  height: 12px;\n  border-radius: 50%;\n  background: var(--primary);\n  position: relative;\n}\n\n.weight-plate::before {\n  content: '';\n  position: absolute;\n  top: 50%;\n  left: 50%;\n  transform: translate(-50%, -50%);\n  width: 6px;\n  height: 6px;\n  border-radius: 50%;\n  background: white;\n}\n\n.syntax-highlight {\n  font-family: var(--font-mono);\n  background: var(--muted);\n  padding: 1rem;\n  border-radius: 6px;\n  border-left: 4px solid var(--primary);\n  overflow-x: auto;  /* Adds horizontal scroll for very long content */\n  max-width: 100%;   /* Ensures it doesn't break container */\n}\n\n.syntax-highlight pre {\n  white-space: pre-wrap;      /* Allows wrapping while preserving formatting */\n  overflow-wrap: break-word;  /* Breaks long words if needed */\n  word-break: break-all;      /* Breaks long SQL statements at any character */\n  margin: 0;                  /* Remove default pre margin */\n}\n\n.code-editor {\n  font-family: var(--font-mono);\n  background: hsl(222 47% 11%);\n  color: hsl(210 40% 98%);\n}\n\n/* Smooth scrolling */\nhtml {\n  scroll-behavior: smooth;\n}\n\n/* Custom scrollbar */\n::-webkit-scrollbar {\n  width: 8px;\n}\n\n::-webkit-scrollbar-track {\n  background: var(--muted);\n}\n\n::-webkit-scrollbar-thumb {\n  background: var(--border);\n  border-radius: 4px;\n}\n\n::-webkit-scrollbar-thumb:hover {\n  background: var(--muted-foreground);\n}\n","size_bytes":4868},"client/src/main.tsx":{"content":"import { createRoot } from \"react-dom/client\";\nimport App from \"./App\";\nimport \"./index.css\";\n\ncreateRoot(document.getElementById(\"root\")!).render(<App />);\n","size_bytes":157},"client/src/components/badge-display.tsx":{"content":"import { Trophy, Dumbbell, Flame, Award } from 'lucide-react';\n\ninterface Badge {\n  badgeType: string;\n  badgeName: string;\n  earnedAt: string;\n}\n\ninterface BadgeDisplayProps {\n  badges: Badge[];\n  className?: string;\n}\n\nconst badgeIcons: Record<string, { icon: any; color: string }> = {\n  first_rep: { icon: Dumbbell, color: 'bg-primary/10 text-primary' },\n  hot_streak: { icon: Flame, color: 'bg-red-100 text-red-600' },\n  champion: { icon: Trophy, color: 'bg-yellow-100 text-yellow-600' },\n  default: { icon: Award, color: 'bg-gray-100 text-gray-600' },\n};\n\nexport default function BadgeDisplay({ badges, className = '' }: BadgeDisplayProps) {\n  if (badges.length === 0) {\n    return (\n      <div className={`text-center py-8 ${className}`}>\n        <div className=\"w-16 h-16 bg-muted rounded-full flex items-center justify-center mx-auto mb-4\">\n          <Trophy className=\"w-8 h-8 text-muted-foreground\" />\n        </div>\n        <p className=\"text-muted-foreground\">No badges earned yet</p>\n        <p className=\"text-sm text-muted-foreground mt-1\">Start solving problems to earn badges!</p>\n      </div>\n    );\n  }\n\n  return (\n    <div className={`space-y-4 ${className}`}>\n      <h3 className=\"font-semibold text-foreground\">Badges Earned</h3>\n      <div className=\"grid grid-cols-3 gap-3\">\n        {badges.map((badge, index) => {\n          const badgeConfig = badgeIcons[badge.badgeType] || badgeIcons.default;\n          const IconComponent = badgeConfig.icon;\n          \n          return (\n            <div key={index} className=\"text-center\" data-testid={`badge-${badge.badgeType}`}>\n              <div className={`w-12 h-12 ${badgeConfig.color} rounded-full flex items-center justify-center mx-auto mb-2`}>\n                <IconComponent className=\"w-6 h-6\" />\n              </div>\n              <span className=\"text-xs text-muted-foreground\">{badge.badgeName}</span>\n            </div>\n          );\n        })}\n      </div>\n    </div>\n  );\n}\n","size_bytes":1956},"client/src/components/navbar.tsx":{"content":"import { Link, useLocation } from 'wouter';\nimport { Dumbbell, User, LogOut } from 'lucide-react';\nimport { Button } from '@/components/ui/button';\nimport {\n  DropdownMenu,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuTrigger,\n} from '@/components/ui/dropdown-menu';\nimport { useAuth } from '@/hooks/use-auth';\nimport { Avatar, AvatarFallback, AvatarImage } from '@/components/ui/avatar';\n\nexport default function Navbar() {\n  const [location] = useLocation();\n  const { user, logout } = useAuth();\n\n  const handleLogout = () => {\n    logout();\n  };\n\n  const navItems = [\n    { href: '/', label: 'Home' },\n    { href: '/problems', label: 'Problems' },\n    { href: '/leaderboard', label: 'Leaderboard' },\n    { href: '/community', label: 'Community' },\n    { href: '/submissions', label: 'Submissions' },\n  ];\n\n  return (\n    <nav className=\"bg-white border-b border-border shadow-sm sticky top-0 z-50\">\n      <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\n        <div className=\"flex justify-between items-center h-12\">\n          <div className=\"flex items-center space-x-8\">\n            <Link href=\"/\" className=\"flex items-center space-x-2\" data-testid=\"link-home\">\n              <Dumbbell className=\"text-primary text-xl\" />\n              <span className=\"text-xl font-bold text-foreground\">SQLGym</span>\n            </Link>\n            \n            <div className=\"hidden md:flex items-center space-x-6\">\n              {navItems.map((item) => (\n                <Link\n                  key={item.href}\n                  href={item.href}\n                  className={`font-medium transition-colors text-sm ${\n                    location === item.href\n                      ? 'text-primary'\n                      : 'text-foreground hover:text-primary'\n                  }`}\n                  data-testid={`link-${item.label.toLowerCase()}`}\n                >\n                  {item.label}\n                </Link>\n              ))}\n            </div>\n          </div>\n          \n          <div className=\"flex items-center space-x-3\">\n            <DropdownMenu>\n              <DropdownMenuTrigger asChild>\n                <Button variant=\"ghost\" className=\"relative h-8 w-8 rounded-full\" data-testid=\"button-profile\">\n                  <Avatar className=\"h-8 w-8\">\n                    <AvatarImage src={user?.profileImageUrl} alt={user?.username} />\n                    <AvatarFallback>\n                      {user?.username?.charAt(0).toUpperCase() || 'U'}\n                    </AvatarFallback>\n                  </Avatar>\n                </Button>\n              </DropdownMenuTrigger>\n              <DropdownMenuContent className=\"w-56\" align=\"end\" forceMount>\n                <div className=\"flex items-center space-x-2 p-2\">\n                  <Avatar className=\"h-8 w-8\">\n                    <AvatarImage src={user?.profileImageUrl} alt={user?.username} />\n                    <AvatarFallback>\n                      {user?.username?.charAt(0).toUpperCase() || 'U'}\n                    </AvatarFallback>\n                  </Avatar>\n                  <div className=\"flex flex-col space-y-1\">\n                    <p className=\"text-sm font-medium\">{user?.username}</p>\n                    <p className=\"text-xs text-muted-foreground\">{user?.problemsSolved || 0} problems solved</p>\n                  </div>\n                </div>\n                <DropdownMenuItem onClick={handleLogout} data-testid=\"button-logout\">\n                  <LogOut className=\"mr-2 h-4 w-4\" />\n                  <span>Log out</span>\n                </DropdownMenuItem>\n              </DropdownMenuContent>\n            </DropdownMenu>\n          </div>\n        </div>\n      </div>\n    </nav>\n  );\n}\n","size_bytes":3700},"client/src/components/progress-bar.tsx":{"content":"import { useEffect, useRef } from 'react';\n\ninterface ProgressBarProps {\n  value: number;\n  max: number;\n  className?: string;\n  showText?: boolean;\n}\n\nexport default function ProgressBar({ value, max, className = '', showText = true }: ProgressBarProps) {\n  const progressRef = useRef<HTMLDivElement>(null);\n  const percentage = Math.min((value / max) * 100, 100);\n\n  useEffect(() => {\n    if (progressRef.current) {\n      progressRef.current.style.setProperty('--progress-width', `${percentage}%`);\n      // Trigger animation\n      progressRef.current.classList.add('progress-weight');\n    }\n  }, [percentage]);\n\n  return (\n    <div className={`space-y-2 ${className}`}>\n      {showText && (\n        <div className=\"flex justify-between text-sm\">\n          <span className=\"text-muted-foreground\">Progress</span>\n          <span className=\"font-medium text-foreground\">{Math.round(percentage)}%</span>\n        </div>\n      )}\n      <div className=\"w-full bg-muted rounded-full h-3\">\n        <div \n          ref={progressRef}\n          className=\"h-3 rounded-full transition-all duration-300\"\n          style={{ \n            background: 'linear-gradient(90deg, var(--primary) 0%, #f59e0b 100%)',\n            width: `${percentage}%`\n          }}\n        />\n      </div>\n      {showText && (\n        <div className=\"flex items-center space-x-2 mt-2\">\n          <div className=\"weight-plate\" />\n          <span className=\"text-xs text-muted-foreground\">{value}/{max} completed</span>\n        </div>\n      )}\n    </div>\n  );\n}\n","size_bytes":1524},"client/src/components/sql-editor.tsx":{"content":"import { useState, useMemo, useCallback, useEffect } from 'react';\nimport { Play, Save, TrendingUp, ChevronDown, ChevronUp } from 'lucide-react';\nimport { Button } from '@/components/ui/button';\nimport { Card, CardContent, CardHeader } from '@/components/ui/card';\nimport VerticalResizableSplitter from '@/components/vertical-resizable-splitter';\nimport CodeMirror from '@uiw/react-codemirror';\nimport { sql, PostgreSQL } from '@codemirror/lang-sql';\nimport { autocompletion } from '@codemirror/autocomplete';\nimport { EditorView, keymap, placeholder } from '@codemirror/view';\nimport { defaultKeymap, indentWithTab } from '@codemirror/commands';\nimport { oneDark } from '@codemirror/theme-one-dark';\n\ninterface SQLEditorProps {\n  initialQuery?: string;\n  onRunQuery: (query: string) => Promise<any>;\n  onSubmitSolution: (query: string) => Promise<any>;\n  className?: string;\n}\n\nexport default function SQLEditor({ \n  initialQuery = '', \n  onRunQuery,\n  onSubmitSolution,\n  className = '' \n}: SQLEditorProps) {\n  const [query, setQuery] = useState(initialQuery);\n  const [result, setResult] = useState<any>(null);\n  const [isRunning, setIsRunning] = useState(false);\n  const [showOutput, setShowOutput] = useState(false);\n  const [isSubmitting, setIsSubmitting] = useState(false);\n\n  // Detect dark mode with reactivity\n  const [isDarkMode, setIsDarkMode] = useState(() => {\n    if (typeof window !== 'undefined') {\n      return document.documentElement.classList.contains('dark');\n    }\n    return false;\n  });\n\n  useEffect(() => {\n    const observer = new MutationObserver(() => {\n      setIsDarkMode(document.documentElement.classList.contains('dark'));\n    });\n    \n    observer.observe(document.documentElement, {\n      attributes: true,\n      attributeFilter: ['class']\n    });\n    \n    return () => observer.disconnect();\n  }, []);\n\n  const handleRunQuery = useCallback(async () => {\n    if (!query.trim()) return;\n    \n    setIsRunning(true);\n    setShowOutput(true);\n    try {\n      const result = await onRunQuery(query);\n      setResult(result);\n    } catch (error) {\n      setResult({\n        error: true,\n        message: error instanceof Error ? error.message : 'Query execution failed',\n      });\n    } finally {\n      setIsRunning(false);\n    }\n  }, [query, onRunQuery, onSubmitSolution]);\n\n  const handleSubmit = async () => {\n    if (!query.trim()) return;\n    \n    setIsSubmitting(true);\n    setShowOutput(true);\n    try {\n      const result = await onSubmitSolution(query);\n      setResult(result);\n      // Also save to localStorage as backup\n      localStorage.setItem('sqlgym_last_query', query);\n    } catch (error) {\n      setResult({\n        error: true,\n        message: error instanceof Error ? error.message : 'Submission failed',\n      });\n    } finally {\n      setIsSubmitting(false);\n    }\n  };\n\n  // Configure CodeMirror extensions and theme\n  const extensions = useMemo(() => [\n    sql({\n      dialect: PostgreSQL,\n      upperCaseKeywords: true,\n      schema: {\n        customers: ['id', 'name', 'email'],\n        employees: ['id', 'name', 'department'],\n        orders: ['id', 'customer_id', 'total'],\n        order_items: ['id', 'order_id', 'price', 'quantity'],\n      }\n    }),\n    autocompletion(),\n    EditorView.lineWrapping,\n    placeholder('-- Write your SQL query here\\nSELECT \\n    column1,\\n    column2\\nFROM table_name\\nWHERE condition;'),\n    keymap.of([\n      ...defaultKeymap,\n      indentWithTab,\n      {\n        key: 'Mod-Enter',\n        run: () => {\n          handleRunQuery();\n          return true;\n        }\n      }\n    ])\n  ], [handleRunQuery]);\n\n  const theme = useMemo(() => {\n    if (isDarkMode) {\n      return [oneDark];\n    }\n    return [\n      EditorView.theme({\n        '&': {\n          color: 'hsl(var(--foreground))',\n          backgroundColor: 'hsl(var(--background))',\n        },\n        '.cm-content': {\n          padding: '16px',\n          fontSize: '14px',\n          fontFamily: 'var(--font-mono)',\n          minHeight: '300px',\n        },\n        '.cm-focused': {\n          outline: 'none',\n        },\n        '.cm-editor': {\n          borderRadius: '0',\n        },\n        '.cm-scroller': {\n          fontFamily: 'var(--font-mono)',\n        },\n        '.cm-line': {\n          lineHeight: '1.5',\n        },\n        '&.cm-focused .cm-cursor': {\n          borderLeftColor: 'hsl(var(--primary))',\n        },\n        '&.cm-focused .cm-selectionBackground, .cm-selectionBackground': {\n          backgroundColor: 'hsl(var(--primary) / 0.2)',\n        }\n      })\n    ];\n  }, [isDarkMode]);\n\n  // Editor panel content\n  const editorPanel = (\n    <div className=\"h-full flex flex-col\">\n      {/* SQL Editor */}\n      <div className=\"flex-1 flex flex-col min-h-0\">\n        <Card className=\"flex-1 flex flex-col overflow-hidden\">\n          <CardHeader className=\"bg-muted/50 px-6 py-4 border-b border-border flex-shrink-0\">\n            <div className=\"flex items-center justify-between\">\n              <div className=\"flex items-center space-x-3\">\n                <span className=\"text-lg font-semibold text-foreground\">Code</span>\n              </div>\n              <div className=\"flex items-center space-x-2 text-sm text-muted-foreground\">\n                <span>PostgreSQL 14</span>\n                <ChevronDown className=\"h-4 w-4\" />\n              </div>\n            </div>\n          </CardHeader>\n          \n          <CardContent className=\"p-0 flex-1 min-h-0\">\n            <CodeMirror\n              value={query}\n              onChange={(value) => setQuery(value)}\n              height=\"100%\"\n              theme={theme}\n              extensions={extensions}\n              basicSetup={{\n                lineNumbers: true,\n                foldGutter: true,\n                dropCursor: false,\n                allowMultipleSelections: false,\n                indentOnInput: true,\n                bracketMatching: true,\n                closeBrackets: true,\n                autocompletion: false,\n                highlightSelectionMatches: false,\n                searchKeymap: true,\n                tabSize: 2,\n              }}\n              data-testid=\"editor-sql\"\n              className=\"sqlgym-editor h-full\"\n            />\n          </CardContent>\n        </Card>\n      </div>\n      \n      {/* Action Buttons */}\n      <div className=\"flex-shrink-0 p-4 bg-muted/30 border-t border-border\">\n        <div className=\"flex justify-end gap-3\">\n          <Button\n            onClick={handleRunQuery}\n            disabled={isRunning || !query.trim()}\n            className=\"bg-primary text-primary-foreground hover:bg-primary/90 font-semibold\"\n            data-testid=\"button-run-query\"\n          >\n            <Play className=\"mr-2 h-4 w-4\" />\n            {isRunning ? 'Running...' : 'Run Code'}\n          </Button>\n          \n          <Button \n            onClick={handleSubmit} \n            disabled={isSubmitting || !query.trim()}\n            className=\"bg-green-600 hover:bg-green-700 text-white font-semibold\"\n            data-testid=\"button-submit\"\n          >\n            <Save className=\"mr-2 h-4 w-4\" />\n            {isSubmitting ? 'Submitting...' : 'Check Solution'}\n          </Button>\n        </div>\n      </div>\n    </div>\n  );\n\n  // Output panel content\n  const outputPanel = (\n    <Card className=\"h-full rounded-none border-0\">\n      <CardHeader className=\"bg-muted/50 px-6 py-3 border-b border-border\">\n        <div className=\"flex items-center justify-between\">\n          <div className=\"flex items-center space-x-3\">\n            <TrendingUp className=\"h-4 w-4 text-primary\" />\n            <span className=\"font-semibold text-foreground\">Output</span>\n          </div>\n          <Button \n            onClick={() => setShowOutput(false)}\n            variant=\"ghost\"\n            size=\"sm\"\n            data-testid=\"button-hide-output\"\n          >\n            <ChevronUp className=\"h-4 w-4\" />\n          </Button>\n        </div>\n      </CardHeader>\n      \n      <CardContent className=\"p-6 h-full overflow-auto\">\n        {!result ? (\n          <div className=\"flex flex-col items-center justify-center h-full text-center\">\n            <div className=\"text-4xl mb-4\">⚡</div>\n            <p className=\"text-muted-foreground\">Ready to execute!</p>\n            <p className=\"text-sm text-muted-foreground mt-2\">Run your query to see results</p>\n          </div>\n        ) : result.error ? (\n          <div className=\"space-y-4\">\n            <div className=\"flex items-center space-x-3 text-red-600\">\n              <div className=\"w-3 h-3 bg-red-500 rounded-full\"></div>\n              <span className=\"font-medium\">Query Failed</span>\n            </div>\n            <div className=\"bg-red-50 dark:bg-red-950/30 border border-red-200 dark:border-red-800 rounded-lg p-4\">\n              <p className=\"text-red-800 dark:text-red-200 text-sm font-mono\">{result.message}</p>\n            </div>\n            <p className=\"text-sm text-muted-foreground\">Check your query and try again.</p>\n          </div>\n        ) : (\n          <div className=\"space-y-4\">\n            <div className=\"flex items-center justify-between\">\n              <div className=\"flex items-center space-x-3 text-green-600\">\n                <div className=\"w-3 h-3 bg-green-500 rounded-full\"></div>\n                <span className=\"font-medium\">\n                  {result.isCorrect ? 'Perfect! 🏆' : 'Query Complete'}\n                </span>\n              </div>\n              <div className=\"text-sm text-muted-foreground\">\n                Execution time: {result.executionTime || 0}.01604 seconds\n              </div>\n            </div>\n            \n            {result.isCorrect && (\n              <div className=\"bg-green-50 dark:bg-green-950/30 border border-green-200 dark:border-green-800 rounded-lg p-4\">\n                <div className=\"flex items-center space-x-2\">\n                  <span className=\"text-2xl\">🎉</span>\n                  <div>\n                    <p className=\"text-green-800 dark:text-green-200 font-medium\">Excellent work!</p>\n                    <p className=\"text-green-700 dark:text-green-300 text-sm\">Your solution is correct!</p>\n                  </div>\n                </div>\n              </div>\n            )}\n            \n            <div className=\"bg-muted/50 rounded-lg p-4\">\n              <p className=\"text-sm text-muted-foreground mb-2\">📊 Query Results:</p>\n              <div className=\"font-mono text-sm bg-background rounded border p-3 overflow-x-auto\">\n                <p>Status: {result.isCorrect ? '✅ Correct' : '⚠️ Review needed'}</p>\n                <p className=\"text-muted-foreground mt-2\">\n                  [Table data would be displayed here]\n                </p>\n              </div>\n            </div>\n          </div>\n        )}\n      </CardContent>\n    </Card>\n  );\n\n  // Show resizable layout when output is visible, otherwise show just the editor\n  if (showOutput) {\n    return (\n      <div className={`h-full ${className}`}>\n        <VerticalResizableSplitter\n          topPanel={editorPanel}\n          bottomPanel={outputPanel}\n          defaultTopHeight={65}\n          minTopHeight={40}\n          minBottomHeight={25}\n          className=\"h-full\"\n        />\n      </div>\n    );\n  }\n\n  // Show just the editor when no output\n  return (\n    <div className={`h-full ${className}`}>\n      {editorPanel}\n    </div>\n  );\n}","size_bytes":11332},"client/src/hooks/use-auth.tsx":{"content":"import { useState, useEffect, createContext, useContext } from 'react';\n\ninterface User {\n  id: string;\n  username: string;\n  email: string;\n  firstName?: string;\n  lastName?: string;\n  profileImageUrl?: string;\n  xp: number;\n  level: string;\n  problemsSolved: number;\n}\n\ninterface AuthContextType {\n  user: User | null;\n  token: string | null;\n  login: (token: string, user: User) => void;\n  logout: () => void;\n  isAuthenticated: boolean;\n  isLoading: boolean;\n}\n\nconst AuthContext = createContext<AuthContextType | undefined>(undefined);\n\nexport function AuthProvider({ children }: { children: React.ReactNode }) {\n  // TEMPORARY: Mock user for development purposes\n  const mockUser: User = {\n    id: 'dev-user-id',\n    username: 'developer',\n    email: 'dev@example.com',\n    firstName: 'Dev',\n    lastName: 'User',\n    profileImageUrl: undefined,\n    xp: 500,\n    level: 'SQL Trainee',\n    problemsSolved: 5,\n  };\n\n  const [user, setUser] = useState<User | null>(mockUser);\n  const [token, setToken] = useState<string | null>('dev-token');\n  const [isLoading, setIsLoading] = useState(false); // Set to false to skip loading\n\n  useEffect(() => {\n    // TEMPORARY: Skip auth check for development\n    // Uncomment below for normal auth behavior\n    /*\n    // Check for stored token on app start\n    const storedToken = localStorage.getItem('auth_token');\n    const storedUser = localStorage.getItem('auth_user');\n    \n    if (storedToken && storedUser) {\n      try {\n        setToken(storedToken);\n        setUser(JSON.parse(storedUser));\n      } catch (error) {\n        console.error('Error parsing stored user data:', error);\n        localStorage.removeItem('auth_token');\n        localStorage.removeItem('auth_user');\n      }\n    }\n    */\n    \n    setIsLoading(false);\n  }, []);\n\n  const login = (newToken: string, newUser: User) => {\n    setToken(newToken);\n    setUser(newUser);\n    localStorage.setItem('auth_token', newToken);\n    localStorage.setItem('auth_user', JSON.stringify(newUser));\n  };\n\n  const logout = () => {\n    setToken(null);\n    setUser(null);\n    localStorage.removeItem('auth_token');\n    localStorage.removeItem('auth_user');\n  };\n\n  const value = {\n    user,\n    token,\n    login,\n    logout,\n    isAuthenticated: !!user && !!token,\n    isLoading,\n  };\n\n  return (\n    <AuthContext.Provider value={value}>\n      {children}\n    </AuthContext.Provider>\n  );\n}\n\nexport function useAuth() {\n  const context = useContext(AuthContext);\n  if (context === undefined) {\n    throw new Error('useAuth must be used within an AuthProvider');\n  }\n  return context;\n}\n","size_bytes":2585},"client/src/hooks/use-mobile.tsx":{"content":"import * as React from \"react\"\n\nconst MOBILE_BREAKPOINT = 768\n\nexport function useIsMobile() {\n  const [isMobile, setIsMobile] = React.useState<boolean | undefined>(undefined)\n\n  React.useEffect(() => {\n    const mql = window.matchMedia(`(max-width: ${MOBILE_BREAKPOINT - 1}px)`)\n    const onChange = () => {\n      setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    }\n    mql.addEventListener(\"change\", onChange)\n    setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    return () => mql.removeEventListener(\"change\", onChange)\n  }, [])\n\n  return !!isMobile\n}\n","size_bytes":565},"client/src/hooks/use-toast.ts":{"content":"import * as React from \"react\"\n\nimport type {\n  ToastActionElement,\n  ToastProps,\n} from \"@/components/ui/toast\"\n\nconst TOAST_LIMIT = 1\nconst TOAST_REMOVE_DELAY = 1000000\n\ntype ToasterToast = ToastProps & {\n  id: string\n  title?: React.ReactNode\n  description?: React.ReactNode\n  action?: ToastActionElement\n}\n\nconst actionTypes = {\n  ADD_TOAST: \"ADD_TOAST\",\n  UPDATE_TOAST: \"UPDATE_TOAST\",\n  DISMISS_TOAST: \"DISMISS_TOAST\",\n  REMOVE_TOAST: \"REMOVE_TOAST\",\n} as const\n\nlet count = 0\n\nfunction genId() {\n  count = (count + 1) % Number.MAX_SAFE_INTEGER\n  return count.toString()\n}\n\ntype ActionType = typeof actionTypes\n\ntype Action =\n  | {\n      type: ActionType[\"ADD_TOAST\"]\n      toast: ToasterToast\n    }\n  | {\n      type: ActionType[\"UPDATE_TOAST\"]\n      toast: Partial<ToasterToast>\n    }\n  | {\n      type: ActionType[\"DISMISS_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n  | {\n      type: ActionType[\"REMOVE_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n\ninterface State {\n  toasts: ToasterToast[]\n}\n\nconst toastTimeouts = new Map<string, ReturnType<typeof setTimeout>>()\n\nconst addToRemoveQueue = (toastId: string) => {\n  if (toastTimeouts.has(toastId)) {\n    return\n  }\n\n  const timeout = setTimeout(() => {\n    toastTimeouts.delete(toastId)\n    dispatch({\n      type: \"REMOVE_TOAST\",\n      toastId: toastId,\n    })\n  }, TOAST_REMOVE_DELAY)\n\n  toastTimeouts.set(toastId, timeout)\n}\n\nexport const reducer = (state: State, action: Action): State => {\n  switch (action.type) {\n    case \"ADD_TOAST\":\n      return {\n        ...state,\n        toasts: [action.toast, ...state.toasts].slice(0, TOAST_LIMIT),\n      }\n\n    case \"UPDATE_TOAST\":\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === action.toast.id ? { ...t, ...action.toast } : t\n        ),\n      }\n\n    case \"DISMISS_TOAST\": {\n      const { toastId } = action\n\n      // ! Side effects ! - This could be extracted into a dismissToast() action,\n      // but I'll keep it here for simplicity\n      if (toastId) {\n        addToRemoveQueue(toastId)\n      } else {\n        state.toasts.forEach((toast) => {\n          addToRemoveQueue(toast.id)\n        })\n      }\n\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === toastId || toastId === undefined\n            ? {\n                ...t,\n                open: false,\n              }\n            : t\n        ),\n      }\n    }\n    case \"REMOVE_TOAST\":\n      if (action.toastId === undefined) {\n        return {\n          ...state,\n          toasts: [],\n        }\n      }\n      return {\n        ...state,\n        toasts: state.toasts.filter((t) => t.id !== action.toastId),\n      }\n  }\n}\n\nconst listeners: Array<(state: State) => void> = []\n\nlet memoryState: State = { toasts: [] }\n\nfunction dispatch(action: Action) {\n  memoryState = reducer(memoryState, action)\n  listeners.forEach((listener) => {\n    listener(memoryState)\n  })\n}\n\ntype Toast = Omit<ToasterToast, \"id\">\n\nfunction toast({ ...props }: Toast) {\n  const id = genId()\n\n  const update = (props: ToasterToast) =>\n    dispatch({\n      type: \"UPDATE_TOAST\",\n      toast: { ...props, id },\n    })\n  const dismiss = () => dispatch({ type: \"DISMISS_TOAST\", toastId: id })\n\n  dispatch({\n    type: \"ADD_TOAST\",\n    toast: {\n      ...props,\n      id,\n      open: true,\n      onOpenChange: (open) => {\n        if (!open) dismiss()\n      },\n    },\n  })\n\n  return {\n    id: id,\n    dismiss,\n    update,\n  }\n}\n\nfunction useToast() {\n  const [state, setState] = React.useState<State>(memoryState)\n\n  React.useEffect(() => {\n    listeners.push(setState)\n    return () => {\n      const index = listeners.indexOf(setState)\n      if (index > -1) {\n        listeners.splice(index, 1)\n      }\n    }\n  }, [state])\n\n  return {\n    ...state,\n    toast,\n    dismiss: (toastId?: string) => dispatch({ type: \"DISMISS_TOAST\", toastId }),\n  }\n}\n\nexport { useToast, toast }\n","size_bytes":3895},"client/src/lib/auth.ts":{"content":"// Use proxy for API calls - Vite will proxy /api to the backend\nexport const API_BASE_URL = \"/api\";\n\nexport interface LoginCredentials {\n  email: string;\n  password: string;\n}\n\nexport interface RegisterCredentials {\n  username: string;\n  email: string;\n  password: string;\n  firstName?: string;\n  lastName?: string;\n}\n\nexport interface ApiResponse<T = any> {\n  message?: string;\n  token?: string;\n  user?: T;\n  [key: string]: any;\n}\n\nclass ApiError extends Error {\n  constructor(public status: number, message: string) {\n    super(message);\n    this.name = \"ApiError\";\n  }\n}\n\nasync function apiRequest<T = any>(\n  endpoint: string,\n  options: RequestInit = {}\n): Promise<T> {\n  const url = `${API_BASE_URL}${endpoint}`;\n\n  const token = localStorage.getItem(\"auth_token\");\n  const headers: Record<string, string> = {\n    \"Content-Type\": \"application/json\",\n    ...(options.headers as Record<string, string>),\n  };\n\n  if (token) {\n    headers.Authorization = `Bearer ${token}`;\n  }\n\n  const response = await fetch(url, {\n    ...options,\n    headers,\n  });\n\n  const data = await response.json();\n\n  if (!response.ok) {\n    throw new ApiError(response.status, data.message || \"An error occurred\");\n  }\n\n  return data;\n}\n\nexport const authApi = {\n  async login(credentials: LoginCredentials): Promise<ApiResponse> {\n    return apiRequest(\"/auth/login\", {\n      method: \"POST\",\n      body: JSON.stringify(credentials),\n    });\n  },\n\n  async register(credentials: RegisterCredentials): Promise<ApiResponse> {\n    return apiRequest(\"/auth/register\", {\n      method: \"POST\",\n      body: JSON.stringify(credentials),\n    });\n  },\n\n  async getCurrentUser(): Promise<any> {\n    return apiRequest(\"/auth/user\");\n  },\n};\n\nexport const problemsApi = {\n  async getAll(difficulty?: string): Promise<any[]> {\n    const query = difficulty ? `?difficulty=${difficulty}` : \"\";\n    return apiRequest(`/problems${query}`);\n  },\n\n  async getById(id: string): Promise<any> {\n    return apiRequest(`/problems/${id}`);\n  },\n};\n\nexport const submissionsApi = {\n  async create(submission: { problemId: string; query: string }): Promise<any> {\n    return apiRequest(\"/submissions\", {\n      method: \"POST\",\n      body: JSON.stringify(submission),\n    });\n  },\n\n  async getUserSubmissions(userId: string): Promise<any[]> {\n    return apiRequest(`/submissions/user/${userId}`);\n  },\n};\n\nexport const leaderboardApi = {\n  async get(limit?: number): Promise<any[]> {\n    const query = limit ? `?limit=${limit}` : \"\";\n    return apiRequest(`/leaderboard${query}`);\n  },\n};\n\nexport const communityApi = {\n  async getPosts(): Promise<any[]> {\n    return apiRequest(\"/community/posts\");\n  },\n\n  async createPost(post: {\n    content: string;\n    codeSnippet?: string;\n  }): Promise<any> {\n    return apiRequest(\"/community/posts\", {\n      method: \"POST\",\n      body: JSON.stringify(post),\n    });\n  },\n\n  async likePost(postId: string): Promise<void> {\n    return apiRequest(`/community/posts/${postId}/like`, {\n      method: \"POST\",\n    });\n  },\n\n  async unlikePost(postId: string): Promise<void> {\n    return apiRequest(`/community/posts/${postId}/like`, {\n      method: \"DELETE\",\n    });\n  },\n\n  async getComments(postId: string): Promise<any[]> {\n    return apiRequest(`/community/posts/${postId}/comments`);\n  },\n\n  async createComment(postId: string, content: string): Promise<any> {\n    return apiRequest(`/community/posts/${postId}/comments`, {\n      method: \"POST\",\n      body: JSON.stringify({ content }),\n    });\n  },\n};\n\nexport const badgesApi = {\n  async getUserBadges(userId: string): Promise<any[]> {\n    return apiRequest(`/badges/user/${userId}`);\n  },\n};\n\nexport { ApiError };\n","size_bytes":3657},"client/src/lib/queryClient.ts":{"content":"import { QueryClient, QueryFunction } from \"@tanstack/react-query\";\n\nasync function throwIfResNotOk(res: Response) {\n  if (!res.ok) {\n    const text = (await res.text()) || res.statusText;\n    throw new Error(`${res.status}: ${text}`);\n  }\n}\n\nexport async function apiRequest(\n  method: string,\n  url: string,\n  data?: unknown | undefined,\n): Promise<Response> {\n  const res = await fetch(url, {\n    method,\n    headers: data ? { \"Content-Type\": \"application/json\" } : {},\n    body: data ? JSON.stringify(data) : undefined,\n    credentials: \"include\",\n  });\n\n  await throwIfResNotOk(res);\n  return res;\n}\n\ntype UnauthorizedBehavior = \"returnNull\" | \"throw\";\nexport const getQueryFn: <T>(options: {\n  on401: UnauthorizedBehavior;\n}) => QueryFunction<T> =\n  ({ on401: unauthorizedBehavior }) =>\n  async ({ queryKey }) => {\n    const res = await fetch(queryKey.join(\"/\") as string, {\n      credentials: \"include\",\n    });\n\n    if (unauthorizedBehavior === \"returnNull\" && res.status === 401) {\n      return null;\n    }\n\n    await throwIfResNotOk(res);\n    return await res.json();\n  };\n\nexport const queryClient = new QueryClient({\n  defaultOptions: {\n    queries: {\n      queryFn: getQueryFn({ on401: \"throw\" }),\n      refetchInterval: false,\n      refetchOnWindowFocus: false,\n      staleTime: Infinity,\n      retry: false,\n    },\n    mutations: {\n      retry: false,\n    },\n  },\n});\n","size_bytes":1383},"client/src/lib/utils.ts":{"content":"import { clsx, type ClassValue } from \"clsx\"\nimport { twMerge } from \"tailwind-merge\"\n\nexport function cn(...inputs: ClassValue[]) {\n  return twMerge(clsx(inputs))\n}\n","size_bytes":166},"client/src/pages/community.tsx":{"content":"import { useState } from 'react';\nimport { useQuery, useMutation, useQueryClient } from '@tanstack/react-query';\nimport { Heart, MessageCircle, Share, Code, Trophy, Image, Users, Activity } from 'lucide-react';\nimport { Button } from '@/components/ui/button';\nimport { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Textarea } from '@/components/ui/textarea';\nimport { Avatar, AvatarFallback, AvatarImage } from '@/components/ui/avatar';\nimport { Badge } from '@/components/ui/badge';\nimport { useAuth } from '@/hooks/use-auth';\nimport { communityApi } from '@/lib/auth';\nimport { useToast } from '@/hooks/use-toast';\n\nexport default function Community() {\n  const [newPostContent, setNewPostContent] = useState('');\n  const [newPostCodeSnippet, setNewPostCodeSnippet] = useState('');\n  const { user } = useAuth();\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n\n  const { data: posts, isLoading: postsLoading } = useQuery({\n    queryKey: ['/api/community/posts'],\n    queryFn: () => communityApi.getPosts(),\n  });\n\n  const createPostMutation = useMutation({\n    mutationFn: (postData: { content: string; codeSnippet?: string }) => \n      communityApi.createPost(postData),\n    onSuccess: () => {\n      setNewPostContent('');\n      setNewPostCodeSnippet('');\n      queryClient.invalidateQueries({ queryKey: ['/api/community/posts'] });\n      toast({\n        title: 'Success!',\n        description: 'Your post has been shared with the community.',\n      });\n    },\n    onError: (error) => {\n      toast({\n        title: 'Failed to create post',\n        description: error instanceof Error ? error.message : 'Please try again.',\n        variant: 'destructive',\n      });\n    },\n  });\n\n  const likePostMutation = useMutation({\n    mutationFn: ({ postId, isLiked }: { postId: string; isLiked: boolean }) =>\n      isLiked ? communityApi.unlikePost(postId) : communityApi.likePost(postId),\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: ['/api/community/posts'] });\n    },\n    onError: (error) => {\n      toast({\n        title: 'Action failed',\n        description: error instanceof Error ? error.message : 'Please try again.',\n        variant: 'destructive',\n      });\n    },\n  });\n\n  const handleCreatePost = () => {\n    if (!newPostContent.trim()) return;\n    \n    createPostMutation.mutate({\n      content: newPostContent,\n      codeSnippet: newPostCodeSnippet || undefined,\n    });\n  };\n\n  const handleLikePost = (postId: string, isLiked: boolean) => {\n    likePostMutation.mutate({ postId, isLiked });\n  };\n\n  const formatTimeAgo = (dateString: string) => {\n    const date = new Date(dateString);\n    const now = new Date();\n    const diffInHours = Math.floor((now.getTime() - date.getTime()) / (1000 * 60 * 60));\n    \n    if (diffInHours < 1) return 'Just now';\n    if (diffInHours < 24) return `${diffInHours}h ago`;\n    if (diffInHours < 168) return `${Math.floor(diffInHours / 24)}d ago`;\n    return date.toLocaleDateString();\n  };\n\n  const getLevelBadgeColor = (level: string) => {\n    switch (level) {\n      case 'SQL Powerlifter': return 'bg-purple-100 text-purple-800';\n      case 'SQL Athlete': return 'bg-blue-100 text-blue-800';\n      case 'SQL Trainee': return 'bg-green-100 text-green-800';\n      default: return 'bg-gray-100 text-gray-800';\n    }\n  };\n\n  // Mock data for active members and study groups\n  const activeMembers = [\n    { id: '1', username: 'alex_chen', status: 'online', lastActive: 'Online now' },\n    { id: '2', username: 'sarah_j', status: 'away', lastActive: '5 min ago' },\n    { id: '3', username: 'mike_db', status: 'online', lastActive: 'Online now' },\n  ];\n\n  const studyGroups = [\n    { name: 'Advanced Window Functions', members: 12 },\n    { name: 'SQL Performance Tuning', members: 8 },\n    { name: 'Database Design Patterns', members: 15 },\n  ];\n\n  return (\n    <div className=\"min-h-screen bg-background\">\n      <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8\">\n        {/* Header */}\n        <div className=\"text-center mb-12\">\n          <h1 className=\"text-4xl font-bold text-foreground mb-4\">SQL Gym Community</h1>\n          <p className=\"text-xl text-muted-foreground\">Connect, share, and motivate each other</p>\n        </div>\n\n        <div className=\"grid lg:grid-cols-3 gap-8\">\n          {/* Main Feed */}\n          <div className=\"lg:col-span-2 space-y-6\">\n            {/* Create Post */}\n            {user && (\n              <Card>\n                <CardContent className=\"p-6\">\n                  <div className=\"flex items-start space-x-4\">\n                    <Avatar className=\"w-12 h-12\">\n                      <AvatarImage src={user.profileImageUrl} alt={user.username} />\n                      <AvatarFallback>\n                        {user.username?.charAt(0).toUpperCase() || 'U'}\n                      </AvatarFallback>\n                    </Avatar>\n                    <div className=\"flex-1\">\n                      <Textarea\n                        placeholder=\"Share your SQL journey, tips, or celebrate your achievements...\"\n                        value={newPostContent}\n                        onChange={(e) => setNewPostContent(e.target.value)}\n                        rows={3}\n                        className=\"resize-none mb-3\"\n                        data-testid=\"textarea-new-post\"\n                      />\n                      \n                      {/* Code Snippet Input */}\n                      <details className=\"mb-3\">\n                        <summary className=\"cursor-pointer text-sm text-muted-foreground hover:text-foreground\">\n                          Add code snippet (optional)\n                        </summary>\n                        <Textarea\n                          placeholder=\"-- Add your SQL code here\nSELECT column1, column2\nFROM table_name\nWHERE condition;\"\n                          value={newPostCodeSnippet}\n                          onChange={(e) => setNewPostCodeSnippet(e.target.value)}\n                          rows={4}\n                          className=\"mt-2 font-mono text-sm resize-none\"\n                          data-testid=\"textarea-code-snippet\"\n                        />\n                      </details>\n                      \n                      <div className=\"flex justify-between items-center\">\n                        <div className=\"flex items-center space-x-3\">\n                          <Button variant=\"ghost\" size=\"sm\" className=\"text-muted-foreground hover:text-primary\">\n                            <Image className=\"w-4 h-4\" />\n                          </Button>\n                          <Button variant=\"ghost\" size=\"sm\" className=\"text-muted-foreground hover:text-primary\">\n                            <Code className=\"w-4 h-4\" />\n                          </Button>\n                          <Button variant=\"ghost\" size=\"sm\" className=\"text-muted-foreground hover:text-primary\">\n                            <Trophy className=\"w-4 h-4\" />\n                          </Button>\n                        </div>\n                        <Button\n                          onClick={handleCreatePost}\n                          disabled={!newPostContent.trim() || createPostMutation.isPending}\n                          className=\"dumbbell-btn bg-primary text-primary-foreground hover:bg-primary/90\"\n                          data-testid=\"button-share-post\"\n                        >\n                          {createPostMutation.isPending ? 'Sharing...' : 'Share'}\n                        </Button>\n                      </div>\n                    </div>\n                  </div>\n                </CardContent>\n              </Card>\n            )}\n\n            {/* Community Posts */}\n            {postsLoading ? (\n              <div className=\"space-y-6\">\n                {[...Array(3)].map((_, i) => (\n                  <Card key={i} className=\"animate-pulse\">\n                    <CardContent className=\"p-6\">\n                      <div className=\"flex items-start space-x-4\">\n                        <div className=\"w-12 h-12 bg-muted rounded-full\" />\n                        <div className=\"flex-1 space-y-3\">\n                          <div className=\"h-4 bg-muted rounded w-1/3\" />\n                          <div className=\"h-4 bg-muted rounded\" />\n                          <div className=\"h-4 bg-muted rounded w-4/5\" />\n                          <div className=\"h-20 bg-muted rounded\" />\n                          <div className=\"flex space-x-4\">\n                            <div className=\"h-8 bg-muted rounded w-16\" />\n                            <div className=\"h-8 bg-muted rounded w-16\" />\n                            <div className=\"h-8 bg-muted rounded w-16\" />\n                          </div>\n                        </div>\n                      </div>\n                    </CardContent>\n                  </Card>\n                ))}\n              </div>\n            ) : posts?.length === 0 ? (\n              <Card>\n                <CardContent className=\"p-12 text-center\">\n                  <div className=\"w-16 h-16 bg-muted rounded-full flex items-center justify-center mx-auto mb-4\">\n                    <MessageCircle className=\"w-8 h-8 text-muted-foreground\" />\n                  </div>\n                  <h3 className=\"text-lg font-semibold text-foreground mb-2\">No posts yet</h3>\n                  <p className=\"text-muted-foreground\">Be the first to share something with the community!</p>\n                </CardContent>\n              </Card>\n            ) : (\n              <div className=\"space-y-6\">\n                {posts?.map((post) => (\n                  <Card key={post.id} data-testid={`post-${post.id}`}>\n                    <CardContent className=\"p-6\">\n                      <div className=\"flex items-start space-x-4\">\n                        <Avatar className=\"w-12 h-12\">\n                          <AvatarImage src={post.user.profileImageUrl} alt={post.user.username} />\n                          <AvatarFallback>\n                            {post.user.username?.charAt(0).toUpperCase() || 'U'}\n                          </AvatarFallback>\n                        </Avatar>\n                        \n                        <div className=\"flex-1\">\n                          <div className=\"flex items-center space-x-2 mb-2\">\n                            <h4 className=\"font-semibold text-foreground\" data-testid={`text-post-author-${post.id}`}>\n                              {post.user.firstName && post.user.lastName \n                                ? `${post.user.firstName} ${post.user.lastName}`\n                                : post.user.username}\n                            </h4>\n                            <span className=\"text-sm text-muted-foreground\">•</span>\n                            <span className=\"text-sm text-muted-foreground\" data-testid={`text-post-time-${post.id}`}>\n                              {formatTimeAgo(post.createdAt)}\n                            </span>\n                            <Badge className={`text-xs ${getLevelBadgeColor(post.user.level)}`}>\n                              {post.user.level}\n                            </Badge>\n                          </div>\n                          \n                          <p className=\"text-foreground mb-4 leading-relaxed\" data-testid={`text-post-content-${post.id}`}>\n                            {post.content}\n                          </p>\n                          \n                          {/* Code Snippet */}\n                          {post.codeSnippet && (\n                            <div className=\"bg-muted rounded-lg p-3 mb-4 overflow-x-auto\">\n                              <pre className=\"text-sm text-muted-foreground font-mono\">\n                                <code data-testid={`code-snippet-${post.id}`}>{post.codeSnippet}</code>\n                              </pre>\n                            </div>\n                          )}\n                          \n                          {/* Actions */}\n                          <div className=\"flex items-center justify-between\">\n                            <div className=\"flex items-center space-x-6\">\n                              <Button\n                                variant=\"ghost\"\n                                size=\"sm\"\n                                onClick={() => handleLikePost(post.id, false)} // For simplicity, always like\n                                className=\"flex items-center space-x-2 text-muted-foreground hover:text-red-500 transition-colors\"\n                                data-testid={`button-like-${post.id}`}\n                              >\n                                <Heart className=\"w-4 h-4\" />\n                                <span className=\"text-sm\">{post.likes}</span>\n                              </Button>\n                              \n                              <Button\n                                variant=\"ghost\"\n                                size=\"sm\"\n                                className=\"flex items-center space-x-2 text-muted-foreground hover:text-blue-500 transition-colors\"\n                                data-testid={`button-comment-${post.id}`}\n                              >\n                                <MessageCircle className=\"w-4 h-4\" />\n                                <span className=\"text-sm\">{post.comments}</span>\n                              </Button>\n                              \n                              <Button\n                                variant=\"ghost\"\n                                size=\"sm\"\n                                className=\"flex items-center space-x-2 text-muted-foreground hover:text-green-500 transition-colors\"\n                                data-testid={`button-share-${post.id}`}\n                              >\n                                <Share className=\"w-4 h-4\" />\n                                <span className=\"text-sm\">Share</span>\n                              </Button>\n                            </div>\n                          </div>\n                        </div>\n                      </div>\n                    </CardContent>\n                  </Card>\n                ))}\n              </div>\n            )}\n          </div>\n\n          {/* Sidebar */}\n          <div className=\"space-y-6\">\n            {/* Active Members */}\n            <Card>\n              <CardHeader>\n                <CardTitle className=\"flex items-center space-x-2\">\n                  <Activity className=\"w-5 h-5 text-primary\" />\n                  <span>Active Members</span>\n                </CardTitle>\n              </CardHeader>\n              <CardContent className=\"space-y-3\">\n                {activeMembers.map((member) => (\n                  <div key={member.id} className=\"flex items-center space-x-3\" data-testid={`active-member-${member.username}`}>\n                    <Avatar className=\"w-10 h-10\">\n                      <AvatarFallback>\n                        {member.username.charAt(0).toUpperCase()}\n                      </AvatarFallback>\n                    </Avatar>\n                    <div className=\"flex-1\">\n                      <p className=\"font-medium text-foreground text-sm\">{member.username}</p>\n                      <p className=\"text-xs text-muted-foreground\">{member.lastActive}</p>\n                    </div>\n                    <div className={`w-3 h-3 rounded-full ${\n                      member.status === 'online' ? 'bg-green-400' : 'bg-yellow-400'\n                    }`} />\n                  </div>\n                ))}\n              </CardContent>\n            </Card>\n\n            {/* Weekly Challenge */}\n            <Card className=\"bg-gradient-to-br from-primary to-orange-400 text-white\">\n              <CardHeader>\n                <CardTitle className=\"text-white\">Weekly Challenge</CardTitle>\n              </CardHeader>\n              <CardContent>\n                <p className=\"text-sm opacity-90 mb-4\">\n                  Share 3 helpful SQL tips this week to earn the \"Community Helper\" badge!\n                </p>\n                <div className=\"space-y-2\">\n                  <div className=\"flex justify-between text-sm\">\n                    <span>Progress</span>\n                    <span>1/3</span>\n                  </div>\n                  <div className=\"w-full bg-white/20 rounded-full h-2\">\n                    <div className=\"bg-white h-2 rounded-full\" style={{ width: '33%' }} />\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n\n            {/* Study Groups */}\n            <Card>\n              <CardHeader>\n                <CardTitle className=\"flex items-center space-x-2\">\n                  <Users className=\"w-5 h-5 text-primary\" />\n                  <span>Study Groups</span>\n                </CardTitle>\n              </CardHeader>\n              <CardContent className=\"space-y-3\">\n                {studyGroups.map((group, index) => (\n                  <div key={index} className=\"flex items-center justify-between\" data-testid={`study-group-${index}`}>\n                    <div>\n                      <p className=\"font-medium text-foreground text-sm\">{group.name}</p>\n                      <p className=\"text-xs text-muted-foreground\">{group.members} members</p>\n                    </div>\n                    <Button \n                      variant=\"ghost\" \n                      size=\"sm\" \n                      className=\"text-primary hover:bg-primary/10\"\n                      data-testid={`button-join-group-${index}`}\n                    >\n                      Join\n                    </Button>\n                  </div>\n                ))}\n              </CardContent>\n            </Card>\n\n            {/* Community Stats */}\n            <Card>\n              <CardHeader>\n                <CardTitle>Community Stats</CardTitle>\n              </CardHeader>\n              <CardContent className=\"space-y-4\">\n                <div className=\"flex justify-between items-center\">\n                  <span className=\"text-muted-foreground\">Total Posts</span>\n                  <span className=\"font-bold text-foreground\">{posts?.length || 0}</span>\n                </div>\n                <div className=\"flex justify-between items-center\">\n                  <span className=\"text-muted-foreground\">Active Today</span>\n                  <span className=\"font-bold text-foreground\">{activeMembers.length}</span>\n                </div>\n                <div className=\"flex justify-between items-center\">\n                  <span className=\"text-muted-foreground\">Study Groups</span>\n                  <span className=\"font-bold text-foreground\">{studyGroups.length}</span>\n                </div>\n              </CardContent>\n            </Card>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}\n","size_bytes":18763},"client/src/pages/home.tsx":{"content":"import { useQuery } from '@tanstack/react-query';\nimport { Play, TrendingUp, Users, Target } from 'lucide-react';\nimport { Link } from 'wouter';\nimport { Button } from '@/components/ui/button';\nimport { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';\nimport { useAuth } from '@/hooks/use-auth';\nimport { problemsApi, leaderboardApi } from '@/lib/auth';\n\nexport default function Home() {\n  const { user } = useAuth();\n\n  const { data: problems, isLoading: problemsLoading } = useQuery({\n    queryKey: ['/api/problems'],\n    queryFn: () => problemsApi.getAll(),\n  });\n\n  const { data: leaderboard, isLoading: leaderboardLoading } = useQuery({\n    queryKey: ['/api/leaderboard'],\n    queryFn: () => leaderboardApi.get(5),\n  });\n\n\n\n  const recentProblems = problems?.slice(0, 3) || [];\n  const topUsers = leaderboard?.slice(0, 3) || [];\n\n  return (\n    <div className=\"min-h-screen bg-background\">\n      <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8\">\n        {/* Header */}\n        <div className=\"mb-8\">\n          <h1 className=\"text-4xl font-bold text-foreground mb-2\">\n            Welcome back, <span className=\"text-primary\">{user?.username}</span>! 💪\n          </h1>\n          <p className=\"text-xl text-muted-foreground\">\n            Ready to continue your SQL training journey?\n          </p>\n        </div>\n\n        <div className=\"grid lg:grid-cols-3 gap-8\">\n          {/* Main Content */}\n          <div className=\"lg:col-span-2 space-y-8\">\n            {/* Progress Overview */}\n            <Card>\n              <CardHeader>\n                <CardTitle className=\"flex items-center space-x-2\">\n                  <TrendingUp className=\"w-5 h-5 text-primary\" />\n                  <span>Your Progress</span>\n                </CardTitle>\n              </CardHeader>\n              <CardContent className=\"space-y-6\">\n                <div className=\"text-center\">\n                  <div className=\"text-3xl font-bold text-green-600\">{user?.problemsSolved || 0}</div>\n                  <div className=\"text-sm text-muted-foreground\">Problems Solved</div>\n                  <p className=\"text-sm text-muted-foreground mt-2\">Keep solving problems to improve your skills!</p>\n                </div>\n              </CardContent>\n            </Card>\n\n            {/* Quick Actions */}\n            <Card>\n              <CardHeader>\n                <CardTitle className=\"flex items-center space-x-2\">\n                  <Target className=\"w-5 h-5 text-primary\" />\n                  <span>Quick Actions</span>\n                </CardTitle>\n              </CardHeader>\n              <CardContent>\n                <div className=\"grid md:grid-cols-2 gap-4\">\n                  <Link href=\"/problems\">\n                    <Button \n                      className=\"w-full dumbbell-btn bg-primary text-primary-foreground hover:bg-primary/90 h-16\"\n                      data-testid=\"button-browse-problems\"\n                    >\n                      <Play className=\"mr-2 h-5 w-5\" />\n                      <div className=\"text-left\">\n                        <div className=\"font-semibold\">Browse Problems</div>\n                        <div className=\"text-sm opacity-90\">Find your next challenge</div>\n                      </div>\n                    </Button>\n                  </Link>\n                  \n                  <Link href=\"/community\">\n                    <Button \n                      variant=\"outline\" \n                      className=\"w-full h-16\"\n                      data-testid=\"button-join-community\"\n                    >\n                      <Users className=\"mr-2 h-5 w-5\" />\n                      <div className=\"text-left\">\n                        <div className=\"font-semibold\">Join Community</div>\n                        <div className=\"text-sm opacity-70\">Share and learn together</div>\n                      </div>\n                    </Button>\n                  </Link>\n                </div>\n              </CardContent>\n            </Card>\n\n            {/* Recent Problems */}\n            <Card>\n              <CardHeader>\n                <div className=\"flex justify-between items-center\">\n                  <CardTitle>Recommended Problems</CardTitle>\n                  <Link href=\"/problems\">\n                    <Button variant=\"ghost\" size=\"sm\" data-testid=\"link-view-all-problems\">\n                      View All\n                    </Button>\n                  </Link>\n                </div>\n              </CardHeader>\n              <CardContent>\n                {problemsLoading ? (\n                  <div className=\"space-y-4\">\n                    {[...Array(3)].map((_, i) => (\n                      <div key={i} className=\"h-20 bg-muted rounded-lg animate-pulse\" />\n                    ))}\n                  </div>\n                ) : (\n                  <div className=\"space-y-4\">\n                    {recentProblems.map((problem) => (\n                      <Link key={problem.id} href={`/problems/${problem.id}`}>\n                        <Card className=\"hover:shadow-md transition-shadow cursor-pointer\" data-testid={`card-problem-${problem.id}`}>\n                          <CardContent className=\"p-4\">\n                            <div className=\"flex items-start justify-between\">\n                              <div className=\"flex-1\">\n                                <h3 className=\"font-semibold text-foreground mb-2\">{problem.title}</h3>\n                                <p className=\"text-sm text-muted-foreground line-clamp-2\">\n                                  {problem.description}\n                                </p>\n                              </div>\n                              <div className=\"ml-4\">\n                                <span className={`px-2 py-1 text-xs font-medium rounded-full ${\n                                  problem.difficulty === 'Easy' \n                                    ? 'bg-green-100 text-green-800'\n                                    : problem.difficulty === 'Medium'\n                                    ? 'bg-yellow-100 text-yellow-800'\n                                    : 'bg-red-100 text-red-800'\n                                }`}>\n                                  {problem.difficulty}\n                                </span>\n                              </div>\n                            </div>\n                            <div className=\"flex items-center justify-between mt-3\">\n                              <div className=\"flex items-center space-x-4\">\n                                <span className=\"text-xs text-muted-foreground\">\n                                  {problem.solvedCount} solved\n                                </span>\n                              </div>\n                              <Button size=\"sm\" variant=\"ghost\" className=\"text-primary\">\n                                Start Training →\n                              </Button>\n                            </div>\n                          </CardContent>\n                        </Card>\n                      </Link>\n                    ))}\n                  </div>\n                )}\n              </CardContent>\n            </Card>\n          </div>\n\n          {/* Sidebar */}\n          <div className=\"space-y-6\">\n\n            {/* Leaderboard Preview */}\n            <Card>\n              <CardHeader>\n                <div className=\"flex justify-between items-center\">\n                  <CardTitle>Top Athletes</CardTitle>\n                  <Link href=\"/leaderboard\">\n                    <Button variant=\"ghost\" size=\"sm\" data-testid=\"link-view-leaderboard\">\n                      View All\n                    </Button>\n                  </Link>\n                </div>\n              </CardHeader>\n              <CardContent>\n                {leaderboardLoading ? (\n                  <div className=\"space-y-3\">\n                    {[...Array(3)].map((_, i) => (\n                      <div key={i} className=\"flex items-center space-x-3\">\n                        <div className=\"w-10 h-10 bg-muted rounded-full\" />\n                        <div className=\"flex-1 space-y-1\">\n                          <div className=\"h-4 bg-muted rounded w-3/4\" />\n                          <div className=\"h-3 bg-muted rounded w-1/2\" />\n                        </div>\n                      </div>\n                    ))}\n                  </div>\n                ) : (\n                  <div className=\"space-y-3\">\n                    {topUsers.map((topUser, index) => (\n                      <div key={topUser.id} className=\"flex items-center space-x-3\" data-testid={`user-rank-${index + 1}`}>\n                        <div className=\"w-10 h-10 bg-primary text-primary-foreground rounded-full flex items-center justify-center font-bold text-sm\">\n                          {index + 1}\n                        </div>\n                        <div className=\"flex-1\">\n                          <div className=\"font-medium text-foreground\">{topUser.username}</div>\n                          <div className=\"text-sm text-muted-foreground\">{topUser.problemsSolved} problems solved</div>\n                        </div>\n                      </div>\n                    ))}\n                  </div>\n                )}\n              </CardContent>\n            </Card>\n\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}\n","size_bytes":9315},"client/src/pages/landing.tsx":{"content":"import { useState, useEffect } from \"react\";\nimport { Play, Users, Code, CheckCircle } from \"lucide-react\";\nimport { FaGoogle, FaGithub } from \"react-icons/fa\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent } from \"@/components/ui/card\";\nimport {\n  Dialog,\n  DialogContent,\n  DialogHeader,\n  DialogTitle,\n  DialogTrigger,\n} from \"@/components/ui/dialog\";\nimport {\n  Form,\n  FormControl,\n  FormField,\n  FormItem,\n  FormLabel,\n  FormMessage,\n} from \"@/components/ui/form\";\nimport { Input } from \"@/components/ui/input\";\nimport { useForm } from \"react-hook-form\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { z } from \"zod\";\nimport { useAuth } from \"@/hooks/use-auth\";\nimport { authApi } from \"@/lib/auth\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport ProgressBar from \"@/components/progress-bar\";\n\nconst loginSchema = z.object({\n  email: z.string().email(\"Invalid email address\"),\n  password: z.string().min(6, \"Password must be at least 6 characters\"),\n});\n\nconst registerSchema = z.object({\n  username: z.string().min(3, \"Username must be at least 3 characters\"),\n  email: z.string().email(\"Invalid email address\"),\n  password: z.string().min(6, \"Password must be at least 6 characters\"),\n  firstName: z.string().optional(),\n  lastName: z.string().optional(),\n});\n\nexport default function Landing() {\n  const [isLoginOpen, setIsLoginOpen] = useState(false);\n  const [isRegisterOpen, setIsRegisterOpen] = useState(false);\n  const [isLoading, setIsLoading] = useState(false);\n  const { login } = useAuth();\n  const { toast } = useToast();\n\n  // Handle OAuth callback tokens\n  useEffect(() => {\n    const urlParams = new URLSearchParams(window.location.search);\n    const token = urlParams.get(\"token\");\n\n    if (token) {\n      // Store the token and get user info\n      localStorage.setItem(\"auth_token\", token);\n\n      // Clean up URL\n      window.history.replaceState({}, document.title, \"/\");\n\n      // Get user info and complete login\n      authApi\n        .getCurrentUser()\n        .then((user) => {\n          login(token, user);\n          toast({\n            title: \"Welcome!\",\n            description: \"Successfully logged into SQL Practice Hub.\",\n          });\n        })\n        .catch(() => {\n          toast({\n            title: \"Authentication failed\",\n            description: \"Please try logging in again.\",\n            variant: \"destructive\",\n          });\n        });\n    }\n  }, [login, toast]);\n\n  const loginForm = useForm({\n    resolver: zodResolver(loginSchema),\n    defaultValues: {\n      email: \"\",\n      password: \"\",\n    },\n  });\n\n  const registerForm = useForm({\n    resolver: zodResolver(registerSchema),\n    defaultValues: {\n      username: \"\",\n      email: \"\",\n      password: \"\",\n      firstName: \"\",\n      lastName: \"\",\n    },\n  });\n\n  const handleLogin = async (data: z.infer<typeof loginSchema>) => {\n    setIsLoading(true);\n    try {\n      const response = await authApi.login(data);\n      login(response.token!, response.user!);\n      setIsLoginOpen(false);\n      toast({\n        title: \"Welcome back!\",\n        description: \"Successfully logged into SQL Practice Hub.\",\n      });\n    } catch (error) {\n      toast({\n        title: \"Login failed\",\n        description:\n          error instanceof Error\n            ? error.message\n            : \"Please check your credentials.\",\n        variant: \"destructive\",\n      });\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  const handleRegister = async (data: z.infer<typeof registerSchema>) => {\n    setIsLoading(true);\n    try {\n      const response = await authApi.register(data);\n      login(response.token!, response.user!);\n      setIsRegisterOpen(false);\n      toast({\n        title: \"Welcome to SQL Practice Hub!\",\n        description: \"Your account has been created successfully.\",\n      });\n    } catch (error) {\n      toast({\n        title: \"Registration failed\",\n        description:\n          error instanceof Error ? error.message : \"Please try again.\",\n        variant: \"destructive\",\n      });\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  return (\n    <div className=\"bg-background\">\n      {/* Navigation */}\n      <nav className=\"bg-white border-b border-border shadow-sm\">\n        <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\n          <div className=\"flex justify-between items-center h-16\">\n            <div className=\"flex items-center space-x-2\">\n              <Code className=\"text-primary text-2xl\" />\n              <span className=\"text-2xl font-bold text-foreground\">\n                SQL Practice Hub\n              </span>\n            </div>\n\n            <div className=\"flex items-center space-x-3\">\n              <Dialog open={isLoginOpen} onOpenChange={setIsLoginOpen}>\n                <DialogTrigger asChild>\n                  <Button variant=\"ghost\" data-testid=\"button-login\">\n                    Login\n                  </Button>\n                </DialogTrigger>\n                <DialogContent>\n                  <DialogHeader>\n                    <DialogTitle>Login to SQL Practice Hub</DialogTitle>\n                  </DialogHeader>\n                  <Form {...loginForm}>\n                    <form\n                      onSubmit={loginForm.handleSubmit(handleLogin)}\n                      className=\"space-y-4\"\n                    >\n                      <FormField\n                        control={loginForm.control}\n                        name=\"email\"\n                        render={({ field }) => (\n                          <FormItem>\n                            <FormLabel>Email</FormLabel>\n                            <FormControl>\n                              <Input\n                                {...field}\n                                type=\"email\"\n                                data-testid=\"input-email\"\n                              />\n                            </FormControl>\n                            <FormMessage />\n                          </FormItem>\n                        )}\n                      />\n                      <FormField\n                        control={loginForm.control}\n                        name=\"password\"\n                        render={({ field }) => (\n                          <FormItem>\n                            <FormLabel>Password</FormLabel>\n                            <FormControl>\n                              <Input\n                                {...field}\n                                type=\"password\"\n                                data-testid=\"input-password\"\n                              />\n                            </FormControl>\n                            <FormMessage />\n                          </FormItem>\n                        )}\n                      />\n                      <Button\n                        type=\"submit\"\n                        disabled={isLoading}\n                        className=\"w-full\"\n                        data-testid=\"button-submit-login\"\n                      >\n                        {isLoading ? \"Logging in...\" : \"Login\"}\n                      </Button>\n\n                      <div className=\"relative my-4\">\n                        <div className=\"absolute inset-0 flex items-center\">\n                          <div className=\"w-full border-t border-muted\"></div>\n                        </div>\n                        <div className=\"relative flex justify-center text-xs uppercase\">\n                          <span className=\"bg-background px-2 text-muted-foreground\">\n                            Or continue with\n                          </span>\n                        </div>\n                      </div>\n\n                      <div className=\"grid grid-cols-2 gap-2\">\n                        <Button\n                          type=\"button\"\n                          variant=\"outline\"\n                          className=\"w-full\"\n                          onClick={() =>\n                            (window.location.href = \"/api/auth/google\")\n                          }\n                          data-testid=\"button-google-login\"\n                        >\n                          <FaGoogle className=\"mr-2 h-4 w-4 text-red-500\" />\n                          Google\n                        </Button>\n                        <Button\n                          type=\"button\"\n                          variant=\"outline\"\n                          className=\"w-full\"\n                          onClick={() =>\n                            (window.location.href = \"/api/auth/github\")\n                          }\n                          data-testid=\"button-github-login\"\n                        >\n                          <FaGithub className=\"mr-2 h-4 w-4\" />\n                          GitHub\n                        </Button>\n                      </div>\n                    </form>\n                  </Form>\n                </DialogContent>\n              </Dialog>\n\n              <Dialog open={isRegisterOpen} onOpenChange={setIsRegisterOpen}>\n                <DialogTrigger asChild>\n                  <Button\n                    className=\"bg-primary text-primary-foreground hover:bg-primary/90\"\n                    data-testid=\"button-register\"\n                  >\n                    <Code className=\"mr-2 h-4 w-4\" />\n                    Start Practicing\n                  </Button>\n                </DialogTrigger>\n                <DialogContent>\n                  <DialogHeader>\n                    <DialogTitle>Join SQL Practice Hub</DialogTitle>\n                  </DialogHeader>\n                  <Form {...registerForm}>\n                    <form\n                      onSubmit={registerForm.handleSubmit(handleRegister)}\n                      className=\"space-y-4\"\n                    >\n                      <div className=\"grid grid-cols-2 gap-4\">\n                        <FormField\n                          control={registerForm.control}\n                          name=\"firstName\"\n                          render={({ field }) => (\n                            <FormItem>\n                              <FormLabel>First Name</FormLabel>\n                              <FormControl>\n                                <Input\n                                  {...field}\n                                  data-testid=\"input-firstName\"\n                                />\n                              </FormControl>\n                              <FormMessage />\n                            </FormItem>\n                          )}\n                        />\n                        <FormField\n                          control={registerForm.control}\n                          name=\"lastName\"\n                          render={({ field }) => (\n                            <FormItem>\n                              <FormLabel>Last Name</FormLabel>\n                              <FormControl>\n                                <Input\n                                  {...field}\n                                  data-testid=\"input-lastName\"\n                                />\n                              </FormControl>\n                              <FormMessage />\n                            </FormItem>\n                          )}\n                        />\n                      </div>\n                      <FormField\n                        control={registerForm.control}\n                        name=\"username\"\n                        render={({ field }) => (\n                          <FormItem>\n                            <FormLabel>Username</FormLabel>\n                            <FormControl>\n                              <Input {...field} data-testid=\"input-username\" />\n                            </FormControl>\n                            <FormMessage />\n                          </FormItem>\n                        )}\n                      />\n                      <FormField\n                        control={registerForm.control}\n                        name=\"email\"\n                        render={({ field }) => (\n                          <FormItem>\n                            <FormLabel>Email</FormLabel>\n                            <FormControl>\n                              <Input\n                                {...field}\n                                type=\"email\"\n                                data-testid=\"input-register-email\"\n                              />\n                            </FormControl>\n                            <FormMessage />\n                          </FormItem>\n                        )}\n                      />\n                      <FormField\n                        control={registerForm.control}\n                        name=\"password\"\n                        render={({ field }) => (\n                          <FormItem>\n                            <FormLabel>Password</FormLabel>\n                            <FormControl>\n                              <Input\n                                {...field}\n                                type=\"password\"\n                                data-testid=\"input-register-password\"\n                              />\n                            </FormControl>\n                            <FormMessage />\n                          </FormItem>\n                        )}\n                      />\n                      <Button\n                        type=\"submit\"\n                        disabled={isLoading}\n                        className=\"w-full\"\n                        data-testid=\"button-submit-register\"\n                      >\n                        {isLoading ? \"Creating account...\" : \"Create Account\"}\n                      </Button>\n\n                      <div className=\"relative my-4\">\n                        <div className=\"absolute inset-0 flex items-center\">\n                          <div className=\"w-full border-t border-muted\"></div>\n                        </div>\n                        <div className=\"relative flex justify-center text-xs uppercase\">\n                          <span className=\"bg-background px-2 text-muted-foreground\">\n                            Or sign up with\n                          </span>\n                        </div>\n                      </div>\n\n                      <div className=\"grid grid-cols-2 gap-2\">\n                        <Button\n                          type=\"button\"\n                          variant=\"outline\"\n                          className=\"w-full\"\n                          onClick={() =>\n                            (window.location.href = \"/api/auth/google\")\n                          }\n                          data-testid=\"button-google-register\"\n                        >\n                          <FaGoogle className=\"mr-2 h-4 w-4 text-red-500\" />\n                          Google\n                        </Button>\n                        <Button\n                          type=\"button\"\n                          variant=\"outline\"\n                          className=\"w-full\"\n                          onClick={() =>\n                            (window.location.href = \"/api/auth/github\")\n                          }\n                          data-testid=\"button-github-register\"\n                        >\n                          <FaGithub className=\"mr-2 h-4 w-4\" />\n                          GitHub\n                        </Button>\n                      </div>\n                    </form>\n                  </Form>\n                </DialogContent>\n              </Dialog>\n            </div>\n          </div>\n        </div>\n      </nav>\n\n      {/* Hero Section */}\n      <section className=\"bg-white\">\n        <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-20\">\n          <div className=\"grid lg:grid-cols-2 gap-12 items-center\">\n            <div className=\"space-y-8\">\n              <div>\n                <h1 className=\"text-5xl font-bold text-foreground leading-tight\">\n                  Master <span className=\"text-primary\">SQL Skills</span> for\n                  Interviews & Work\n                </h1>\n                <p className=\"text-xl text-muted-foreground mt-6 leading-relaxed\">\n                  Practice SQL with real-world problems designed for interviews\n                  and professional development. Progress from Junior to Senior\n                  level with our comprehensive platform.\n                </p>\n              </div>\n\n              {/* Progress Showcase */}\n              <Card className=\"p-6\">\n                <h3 className=\"font-semibold text-foreground mb-4\">\n                  Your Progress\n                </h3>\n                <ProgressBar value={15} max={20} />\n              </Card>\n\n              <div className=\"flex flex-col sm:flex-row gap-4\">\n                <Dialog>\n                  <DialogTrigger asChild>\n                    <Button\n                      size=\"lg\"\n                      className=\"bg-primary text-primary-foreground px-8 py-4 text-lg hover:bg-primary/90\"\n                      data-testid=\"button-start-practice\"\n                    >\n                      <Play className=\"mr-3 h-5 w-5\" />\n                      Start Practicing\n                    </Button>\n                  </DialogTrigger>\n                  <DialogContent>\n                    <DialogHeader>\n                      <DialogTitle>Join SQL Practice Hub</DialogTitle>\n                    </DialogHeader>\n                    <p className=\"text-muted-foreground mb-4\">\n                      Create your free account to access hundreds of\n                      interview-focused SQL problems and join our professional\n                      community.\n                    </p>\n                    <Button\n                      onClick={() => {\n                        setIsRegisterOpen(true);\n                      }}\n                      className=\"w-full\"\n                      data-testid=\"button-join-now\"\n                    >\n                      Join Now - It's Free!\n                    </Button>\n                  </DialogContent>\n                </Dialog>\n\n                <Button\n                  variant=\"outline\"\n                  size=\"lg\"\n                  className=\"px-8 py-4 text-lg\"\n                  onClick={() =>\n                    document\n                      .getElementById(\"community\")\n                      ?.scrollIntoView({ behavior: \"smooth\" })\n                  }\n                  data-testid=\"button-join-community\"\n                >\n                  <Users className=\"mr-3 h-5 w-5\" />\n                  Join Community\n                </Button>\n              </div>\n            </div>\n\n            <div className=\"relative\">\n              <img\n                src=\"https://images.unsplash.com/photo-1517077304055-6e89abbf09b0?ixlib=rb-4.0.3&auto=format&fit=crop&w=800&h=600\"\n                alt=\"Professional coding workspace\"\n                className=\"rounded-xl shadow-2xl w-full\"\n              />\n\n              {/* Floating achievement cards */}\n              <Card className=\"absolute -top-4 -right-4 p-4 shadow-lg\">\n                <div className=\"flex items-center space-x-3\">\n                  <div className=\"w-12 h-12 bg-primary/10 rounded-full flex items-center justify-center\">\n                    <CheckCircle className=\"text-primary text-xl\" />\n                  </div>\n                  <div>\n                    <p className=\"font-semibold text-foreground\">\n                      Senior Developer\n                    </p>\n                    <p className=\"text-sm text-muted-foreground\">\n                      Level Achieved!\n                    </p>\n                  </div>\n                </div>\n              </Card>\n\n              <Card className=\"absolute -bottom-4 -left-4 p-4 shadow-lg\">\n                <div className=\"flex items-center space-x-3\">\n                  <div className=\"w-12 h-12 bg-green-100 rounded-full flex items-center justify-center\">\n                    <CheckCircle className=\"text-green-600 text-xl\" />\n                  </div>\n                  <div>\n                    <p className=\"font-semibold text-foreground\">\n                      Problem Solved!\n                    </p>\n                    <p className=\"text-sm text-muted-foreground\">\n                      +50 XP Gained\n                    </p>\n                  </div>\n                </div>\n              </Card>\n            </div>\n          </div>\n        </div>\n      </section>\n\n      {/* Community Section */}\n      <section id=\"community\" className=\"bg-muted/30 py-20\">\n        <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 text-center\">\n          <h2 className=\"text-4xl font-bold text-foreground mb-4\">\n            Join the SQL Practice Community\n          </h2>\n          <p className=\"text-xl text-muted-foreground mb-8\">\n            Connect with fellow developers, share solutions, and advance your\n            career\n          </p>\n\n          <div className=\"grid md:grid-cols-3 gap-8 mb-12\">\n            <div className=\"text-center\">\n              <div className=\"w-16 h-16 bg-primary/10 rounded-full flex items-center justify-center mx-auto mb-4\">\n                <Code className=\"w-8 h-8 text-primary\" />\n              </div>\n              <h3 className=\"font-semibold text-foreground mb-2\">\n                Practice Together\n              </h3>\n              <p className=\"text-muted-foreground\">\n                Solve problems with peers and share your solutions\n              </p>\n            </div>\n\n            <div className=\"text-center\">\n              <div className=\"w-16 h-16 bg-green-100 rounded-full flex items-center justify-center mx-auto mb-4\">\n                <Users className=\"w-8 h-8 text-green-600\" />\n              </div>\n              <h3 className=\"font-semibold text-foreground mb-2\">\n                Learn from Experts\n              </h3>\n              <p className=\"text-muted-foreground\">\n                Get tips and tricks from senior developers\n              </p>\n            </div>\n\n            <div className=\"text-center\">\n              <div className=\"w-16 h-16 bg-yellow-100 rounded-full flex items-center justify-center mx-auto mb-4\">\n                <CheckCircle className=\"w-8 h-8 text-yellow-600\" />\n              </div>\n              <h3 className=\"font-semibold text-foreground mb-2\">\n                Track Progress\n              </h3>\n              <p className=\"text-muted-foreground\">\n                Earn badges and climb the leaderboards\n              </p>\n            </div>\n          </div>\n\n          <Button\n            onClick={() => setIsRegisterOpen(true)}\n            size=\"lg\"\n            className=\"bg-primary text-primary-foreground px-8 py-4 text-lg hover:bg-primary/90\"\n            data-testid=\"button-get-started\"\n          >\n            <Code className=\"mr-3 h-5 w-5\" />\n            Get Started Now\n          </Button>\n        </div>\n      </section>\n\n      {/* Footer */}\n      <footer className=\"bg-foreground text-background py-12\">\n        <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\n          <div className=\"grid md:grid-cols-4 gap-8\">\n            <div className=\"space-y-4\">\n              <div className=\"flex items-center space-x-2\">\n                <Code className=\"text-primary text-2xl\" />\n                <span className=\"text-2xl font-bold\">SQL Practice Hub</span>\n              </div>\n              <p className=\"text-background/70\">\n                Master SQL skills for interviews and professional development\n                with our comprehensive platform.\n              </p>\n            </div>\n\n            <div>\n              <h3 className=\"font-semibold mb-4\">Platform</h3>\n              <div className=\"space-y-2 text-background/70\">\n                <a\n                  href=\"#\"\n                  className=\"block hover:text-primary transition-colors\"\n                >\n                  Problems\n                </a>\n                <a\n                  href=\"#\"\n                  className=\"block hover:text-primary transition-colors\"\n                >\n                  Leaderboard\n                </a>\n                <a\n                  href=\"#\"\n                  className=\"block hover:text-primary transition-colors\"\n                >\n                  Community\n                </a>\n                <a\n                  href=\"#\"\n                  className=\"block hover:text-primary transition-colors\"\n                >\n                  Submissions\n                </a>\n              </div>\n            </div>\n\n            <div>\n              <h3 className=\"font-semibold mb-4\">Resources</h3>\n              <div className=\"space-y-2 text-background/70\">\n                <a\n                  href=\"#\"\n                  className=\"block hover:text-primary transition-colors\"\n                >\n                  Documentation\n                </a>\n                <a\n                  href=\"#\"\n                  className=\"block hover:text-primary transition-colors\"\n                >\n                  SQL Guide\n                </a>\n                <a\n                  href=\"#\"\n                  className=\"block hover:text-primary transition-colors\"\n                >\n                  Video Tutorials\n                </a>\n                <a\n                  href=\"#\"\n                  className=\"block hover:text-primary transition-colors\"\n                >\n                  Blog\n                </a>\n              </div>\n            </div>\n\n            <div>\n              <h3 className=\"font-semibold mb-4\">Company</h3>\n              <div className=\"space-y-2 text-background/70\">\n                <a\n                  href=\"#\"\n                  className=\"block hover:text-primary transition-colors\"\n                >\n                  About\n                </a>\n                <a\n                  href=\"#\"\n                  className=\"block hover:text-primary transition-colors\"\n                >\n                  Contact\n                </a>\n                <a\n                  href=\"#\"\n                  className=\"block hover:text-primary transition-colors\"\n                >\n                  Privacy\n                </a>\n                <a\n                  href=\"#\"\n                  className=\"block hover:text-primary transition-colors\"\n                >\n                  Terms\n                </a>\n              </div>\n            </div>\n          </div>\n\n          <div className=\"border-t border-background/20 mt-8 pt-8 text-center text-background/70\">\n            <p>\n              &copy; 2024 SQL Practice Hub. All rights reserved. Practice smart,\n              code professionally.\n            </p>\n          </div>\n        </div>\n      </footer>\n    </div>\n  );\n}\n","size_bytes":26535},"client/src/pages/leaderboard.tsx":{"content":"import { useState } from 'react';\nimport { useQuery } from '@tanstack/react-query';\nimport { Trophy, Medal, Award, TrendingUp, Users, Target } from 'lucide-react';\nimport { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Avatar, AvatarFallback, AvatarImage } from '@/components/ui/avatar';\nimport { Badge } from '@/components/ui/badge';\nimport { Button } from '@/components/ui/button';\nimport { leaderboardApi } from '@/lib/auth';\nimport { useAuth } from '@/hooks/use-auth';\n\nexport default function Leaderboard() {\n  const [limit, setLimit] = useState(50);\n  const { user } = useAuth();\n\n  const { data: leaderboard, isLoading } = useQuery({\n    queryKey: ['/api/leaderboard', limit],\n    queryFn: () => leaderboardApi.get(limit),\n  });\n\n\n  const getRankIcon = (rank: number) => {\n    switch (rank) {\n      case 1: return <Trophy className=\"w-6 h-6 text-yellow-500\" />;\n      case 2: return <Medal className=\"w-6 h-6 text-gray-400\" />;\n      case 3: return <Award className=\"w-6 h-6 text-orange-400\" />;\n      default: return null;\n    }\n  };\n\n\n  const currentUserRank = leaderboard?.findIndex(u => u.id === user?.id) ?? -1;\n\n  return (\n    <div className=\"min-h-screen bg-background\">\n      <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8\">\n        {/* Header */}\n        <div className=\"text-center mb-12\">\n          <h1 className=\"text-4xl font-bold text-foreground mb-4\">SQL Athletes Leaderboard</h1>\n          <p className=\"text-xl text-muted-foreground\">See who's crushing their SQL workouts</p>\n        </div>\n\n        <div className=\"grid lg:grid-cols-3 gap-8\">\n          {/* Main Leaderboard */}\n          <div className=\"lg:col-span-2\">\n            <Card className=\"overflow-hidden\">\n              <CardHeader className=\"bg-gradient-to-r from-primary to-orange-400 text-white\">\n                <CardTitle className=\"text-2xl font-bold mb-2\">Top SQL Athletes</CardTitle>\n                <p className=\"opacity-90\">This week's strongest performers</p>\n              </CardHeader>\n              \n              <CardContent className=\"p-6\">\n                {isLoading ? (\n                  <div className=\"space-y-4\">\n                    {[...Array(10)].map((_, i) => (\n                      <div key={i} className=\"flex items-center space-x-4 py-4 animate-pulse\">\n                        <div className=\"w-12 h-12 bg-muted rounded-full\" />\n                        <div className=\"w-12 h-12 bg-muted rounded-full\" />\n                        <div className=\"flex-1 space-y-2\">\n                          <div className=\"h-4 bg-muted rounded w-1/3\" />\n                          <div className=\"h-3 bg-muted rounded w-1/4\" />\n                        </div>\n                        <div className=\"space-y-2\">\n                          <div className=\"h-4 bg-muted rounded w-16\" />\n                          <div className=\"h-3 bg-muted rounded w-12\" />\n                        </div>\n                      </div>\n                    ))}\n                  </div>\n                ) : (\n                  <div className=\"space-y-2\">\n                    {leaderboard?.map((athlete, index) => (\n                      <div \n                        key={athlete.id} \n                        className={`flex items-center space-x-4 py-4 border-b border-border last:border-b-0 rounded-lg transition-colors ${\n                          athlete.id === user?.id ? 'bg-primary/5 border-primary/20' : 'hover:bg-muted/50'\n                        }`}\n                        data-testid={`leaderboard-rank-${index + 1}`}\n                      >\n                        {/* Rank */}\n                        <div className=\"flex items-center justify-center w-12 h-12\">\n                          {getRankIcon(index + 1) || (\n                            <div className={`flex items-center justify-center w-12 h-12 rounded-full font-bold text-lg ${\n                              index < 3 ? 'bg-primary text-primary-foreground' : 'bg-muted text-muted-foreground'\n                            }`}>\n                              {index + 1}\n                            </div>\n                          )}\n                        </div>\n\n                        {/* Avatar */}\n                        <Avatar className=\"w-12 h-12\">\n                          <AvatarImage src={athlete.profileImageUrl} alt={athlete.username} />\n                          <AvatarFallback>\n                            {athlete.username?.charAt(0).toUpperCase() || 'U'}\n                          </AvatarFallback>\n                        </Avatar>\n\n                        {/* User Info */}\n                        <div className=\"flex-1\">\n                          <div className=\"flex items-center space-x-2\">\n                            <h4 className=\"font-semibold text-foreground\" data-testid={`text-username-${index + 1}`}>\n                              {athlete.firstName && athlete.lastName \n                                ? `${athlete.firstName} ${athlete.lastName}` \n                                : athlete.username}\n                            </h4>\n                            {athlete.id === user?.id && (\n                              <Badge variant=\"outline\" className=\"text-xs\">You</Badge>\n                            )}\n                          </div>\n                          <div className=\"flex items-center space-x-2\">\n                            <span className=\"text-sm text-muted-foreground\">@{athlete.username}</span>\n                          </div>\n                        </div>\n\n                        {/* Stats */}\n                        <div className=\"text-right\">\n                          <p className=\"font-bold text-foreground\" data-testid={`text-problems-${index + 1}`}>\n                            {athlete.problemsSolved} solved\n                          </p>\n                        </div>\n\n                        {/* Achievement Icons */}\n                        <div className=\"flex items-center space-x-1\">\n                          {index === 0 && <Trophy className=\"w-4 h-4 text-yellow-400\" />}\n                          {index <= 1 && <Medal className=\"w-4 h-4 text-gray-400\" />}\n                          {index <= 2 && <Award className=\"w-4 h-4 text-orange-400\" />}\n                        </div>\n                      </div>\n                    ))}\n                  </div>\n                )}\n\n                {/* Load More */}\n                {!isLoading && leaderboard && leaderboard.length >= limit && (\n                  <div className=\"text-center mt-6\">\n                    <Button \n                      variant=\"outline\" \n                      onClick={() => setLimit(limit + 50)}\n                      data-testid=\"button-load-more\"\n                    >\n                      Load More Athletes\n                    </Button>\n                  </div>\n                )}\n              </CardContent>\n            </Card>\n          </div>\n\n          {/* Sidebar */}\n          <div className=\"space-y-6\">\n            {/* Your Stats */}\n            {user && (\n              <Card>\n                <CardHeader>\n                  <CardTitle className=\"flex items-center space-x-2\">\n                    <Target className=\"w-5 h-5 text-primary\" />\n                    <span>Your Stats</span>\n                  </CardTitle>\n                </CardHeader>\n                <CardContent className=\"space-y-4\">\n                  <div className=\"flex justify-between items-center\">\n                    <span className=\"text-muted-foreground\">Rank</span>\n                    <span className=\"font-bold text-foreground\" data-testid=\"text-user-rank\">\n                      #{currentUserRank >= 0 ? currentUserRank + 1 : '?'}\n                    </span>\n                  </div>\n                  <div className=\"flex justify-between items-center\">\n                    <span className=\"text-muted-foreground\">Problems Solved</span>\n                    <span className=\"font-bold text-foreground\" data-testid=\"text-user-problems\">\n                      {user.problemsSolved}\n                    </span>\n                  </div>\n                </CardContent>\n              </Card>\n            )}\n\n\n            {/* Weekly Challenge */}\n            <Card className=\"bg-gradient-to-br from-primary to-orange-400 text-white\">\n              <CardHeader>\n                <CardTitle className=\"text-white\">Weekly Challenge</CardTitle>\n              </CardHeader>\n              <CardContent>\n                <p className=\"text-sm opacity-90 mb-4\">\n                  Solve 5 problems this week to climb the leaderboard faster!\n                </p>\n                <div className=\"space-y-2\">\n                  <div className=\"flex justify-between text-sm\">\n                    <span>Progress</span>\n                    <span>{Math.min(user?.problemsSolved || 0, 5)}/5</span>\n                  </div>\n                  <div className=\"w-full bg-white/20 rounded-full h-2\">\n                    <div \n                      className=\"bg-white h-2 rounded-full transition-all duration-300\" \n                      style={{ width: `${Math.min(((user?.problemsSolved || 0) / 5) * 100, 100)}%` }} \n                    />\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n\n            {/* Leaderboard Stats */}\n            <Card>\n              <CardHeader>\n                <CardTitle className=\"flex items-center space-x-2\">\n                  <Users className=\"w-5 h-5 text-primary\" />\n                  <span>Community Stats</span>\n                </CardTitle>\n              </CardHeader>\n              <CardContent className=\"space-y-4\">\n                <div className=\"flex justify-between items-center\">\n                  <span className=\"text-muted-foreground\">Total Athletes</span>\n                  <span className=\"font-bold text-foreground\">\n                    {leaderboard?.length.toLocaleString() || 0}\n                  </span>\n                </div>\n                <div className=\"flex justify-between items-center\">\n                  <span className=\"text-muted-foreground\">Top Problems Solved</span>\n                  <span className=\"font-bold text-foreground\">\n                    {leaderboard?.[0]?.problemsSolved || 0}\n                  </span>\n                </div>\n              </CardContent>\n            </Card>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}\n","size_bytes":10376},"client/src/pages/not-found.tsx":{"content":"import { Card, CardContent } from \"@/components/ui/card\";\nimport { AlertCircle } from \"lucide-react\";\n\nexport default function NotFound() {\n  return (\n    <div className=\"min-h-screen w-full flex items-center justify-center bg-gray-50\">\n      <Card className=\"w-full max-w-md mx-4\">\n        <CardContent className=\"pt-6\">\n          <div className=\"flex mb-4 gap-2\">\n            <AlertCircle className=\"h-8 w-8 text-red-500\" />\n            <h1 className=\"text-2xl font-bold text-gray-900\">404 Page Not Found</h1>\n          </div>\n\n          <p className=\"mt-4 text-sm text-gray-600\">\n            Did you forget to add the page to the router?\n          </p>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n","size_bytes":711},"client/src/pages/problem-detail.tsx":{"content":"import { useParams } from 'wouter';\nimport { useQuery, useMutation, useQueryClient } from '@tanstack/react-query';\nimport { ArrowLeft, Users, Star, Lightbulb, Play, Save, TrendingUp, ChevronLeft, ChevronRight } from 'lucide-react';\nimport { useState, useMemo, useCallback, useEffect } from 'react';\nimport { Link } from 'wouter';\nimport ReactMarkdown from 'react-markdown';\nimport remarkGfm from 'remark-gfm';\nimport CodeMirror from '@uiw/react-codemirror';\nimport { sql, PostgreSQL } from '@codemirror/lang-sql';\nimport { autocompletion } from '@codemirror/autocomplete';\nimport { EditorView, keymap, placeholder } from '@codemirror/view';\nimport { defaultKeymap, indentWithTab } from '@codemirror/commands';\nimport { oneDark } from '@codemirror/theme-one-dark';\nimport { Button } from '@/components/ui/button';\nimport { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Badge } from '@/components/ui/badge';\nimport { Alert, AlertDescription } from '@/components/ui/alert';\n\nimport { problemsApi, submissionsApi } from '@/lib/auth';\nimport { useAuth } from '@/hooks/use-auth';\nimport { useToast } from '@/hooks/use-toast';\nimport SQLEditor from '@/components/sql-editor';\nimport TableDisplay from '@/components/table-display';\nimport ResizableSplitter from '@/components/resizable-splitter';\nimport VerticalResizableSplitter from '@/components/vertical-resizable-splitter';\n\n// Editor and Output Split Component\nfunction EditorOutputSplit({ \n  problem, \n  handleRunQuery, \n  handleSubmitSolution \n}: {\n  problem: any;\n  handleRunQuery: (query: string) => Promise<any>;\n  handleSubmitSolution: (query: string) => Promise<any>;\n}) {\n  const [query, setQuery] = useState(problem?.question?.starterQuery || '');\n  const [result, setResult] = useState<any>(null);\n  const [isRunning, setIsRunning] = useState(false);\n  const [isSubmitting, setIsSubmitting] = useState(false);\n  const [showOutput, setShowOutput] = useState(false);\n\n  // Detect dark mode with reactivity\n  const [isDarkMode, setIsDarkMode] = useState(() => {\n    if (typeof window !== 'undefined') {\n      return document.documentElement.classList.contains('dark');\n    }\n    return false;\n  });\n\n  useEffect(() => {\n    const observer = new MutationObserver(() => {\n      setIsDarkMode(document.documentElement.classList.contains('dark'));\n    });\n    \n    observer.observe(document.documentElement, {\n      attributes: true,\n      attributeFilter: ['class']\n    });\n    \n    return () => observer.disconnect();\n  }, []);\n\n  const handleRun = useCallback(async () => {\n    if (!query.trim()) return;\n    \n    setIsRunning(true);\n    setShowOutput(true);\n    try {\n      const runResult = await handleRunQuery(query);\n      setResult(runResult);\n    } catch (error) {\n      setResult({\n        error: true,\n        message: error instanceof Error ? error.message : 'Query execution failed',\n      });\n    } finally {\n      setIsRunning(false);\n    }\n  }, [query, handleRunQuery]);\n\n  const handleSubmit = useCallback(async () => {\n    if (!query.trim()) return;\n    \n    setIsSubmitting(true);\n    setShowOutput(true);\n    try {\n      const submitResult = await handleSubmitSolution(query);\n      setResult(submitResult);\n      localStorage.setItem('sqlgym_last_query', query);\n    } catch (error) {\n      setResult({\n        error: true,\n        message: error instanceof Error ? error.message : 'Submission failed',\n      });\n    } finally {\n      setIsSubmitting(false);\n    }\n  }, [query, handleSubmitSolution]);\n\n  // Configure CodeMirror extensions and theme\n  const extensions = useMemo(() => [\n    sql({\n      dialect: PostgreSQL,\n      upperCaseKeywords: true,\n      schema: {\n        customers: ['id', 'name', 'email'],\n        employees: ['id', 'name', 'department'],\n        orders: ['id', 'customer_id', 'total'],\n        order_items: ['id', 'order_id', 'price', 'quantity'],\n      }\n    }),\n    autocompletion(),\n    EditorView.lineWrapping,\n    placeholder('-- Write your SQL query here\\nSELECT \\n    column1,\\n    column2\\nFROM table_name\\nWHERE condition;'),\n    keymap.of([\n      ...defaultKeymap,\n      indentWithTab,\n      {\n        key: 'Mod-Enter',\n        run: () => {\n          handleRun();\n          return true;\n        }\n      }\n    ])\n  ], [handleRun]);\n\n  const theme = useMemo(() => {\n    if (isDarkMode) {\n      return [oneDark];\n    }\n    return [\n      EditorView.theme({\n        '&': {\n          color: 'hsl(var(--foreground))',\n          backgroundColor: 'hsl(var(--background))',\n        },\n        '.cm-content': {\n          padding: '16px',\n          fontSize: '14px',\n          fontFamily: 'var(--font-mono)',\n          minHeight: '200px',\n        },\n        '.cm-focused': {\n          outline: 'none',\n        },\n        '.cm-editor': {\n          borderRadius: '0',\n        },\n        '.cm-scroller': {\n          fontFamily: 'var(--font-mono)',\n        },\n        '.cm-line': {\n          lineHeight: '1.5',\n        },\n        '&.cm-focused .cm-cursor': {\n          borderLeftColor: 'hsl(var(--primary))',\n        },\n        '&.cm-focused .cm-selectionBackground, .cm-selectionBackground': {\n          backgroundColor: 'hsl(var(--primary) / 0.2)',\n        }\n      })\n    ];\n  }, [isDarkMode]);\n\n  // Editor panel\n  const editorPanel = (\n    <div className=\"h-full flex flex-col\">\n      <div className=\"flex-1 flex flex-col min-h-0\">\n        <Card className=\"flex-1 flex flex-col overflow-hidden rounded-none border-0 border-b\">\n          <CardHeader className=\"bg-muted/50 px-6 py-4 border-b border-border flex-shrink-0\">\n            <div className=\"flex items-center justify-end\">\n              <div className=\"flex items-center space-x-2 text-sm text-muted-foreground\">\n                <span>PostgreSQL 14</span>\n              </div>\n            </div>\n          </CardHeader>\n          \n          <CardContent className=\"p-0 flex-1 min-h-0 overflow-hidden\">\n            <CodeMirror\n              value={query}\n              onChange={(value) => setQuery(value)}\n              height=\"calc(100vh - 280px)\"\n              theme={theme}\n              extensions={extensions}\n              basicSetup={{\n                lineNumbers: true,\n                foldGutter: true,\n                dropCursor: false,\n                allowMultipleSelections: false,\n                indentOnInput: true,\n                bracketMatching: true,\n                closeBrackets: true,\n                autocompletion: false,\n                highlightSelectionMatches: false,\n                searchKeymap: true,\n                tabSize: 2,\n              }}\n              data-testid=\"editor-sql\"\n              className=\"sqlgym-editor\"\n            />\n          </CardContent>\n        </Card>\n      </div>\n      \n      {/* Action Buttons */}\n      <div className=\"flex-shrink-0 p-4 bg-muted/30 border-b border-border\">\n        <div className=\"flex justify-end gap-3\">\n          <Button\n            onClick={handleRun}\n            disabled={isRunning || !query.trim()}\n            className=\"bg-primary text-primary-foreground hover:bg-primary/90 font-semibold\"\n            data-testid=\"button-run-query\"\n          >\n            <Play className=\"mr-2 h-4 w-4\" />\n            {isRunning ? 'Running...' : 'Run Code'}\n          </Button>\n          \n          <Button \n            onClick={handleSubmit} \n            disabled={isSubmitting || !query.trim()}\n            className=\"bg-green-600 hover:bg-green-700 text-white font-semibold\"\n            data-testid=\"button-submit\"\n          >\n            <Save className=\"mr-2 h-4 w-4\" />\n            {isSubmitting ? 'Submitting...' : 'Check Solution'}\n          </Button>\n        </div>\n      </div>\n    </div>\n  );\n\n  // Output panel\n  const outputPanel = (\n    <Card className=\"h-full rounded-none border-0\">\n      <CardHeader className=\"bg-muted/50 px-6 py-3 border-b border-border\">\n        <div className=\"flex items-center justify-between\">\n          <div className=\"flex items-center space-x-3\">\n            <TrendingUp className=\"h-4 w-4 text-primary\" />\n            <span className=\"font-semibold text-foreground\">Output</span>\n          </div>\n          <div className=\"text-sm text-muted-foreground\">\n            {result?.executionTime && `Execution time: ${result.executionTime || 0.01604} seconds`}\n          </div>\n        </div>\n      </CardHeader>\n      \n      <CardContent className=\"p-6 h-full overflow-auto\">\n        {!result ? (\n          <div className=\"flex flex-col items-center justify-center h-full text-center\">\n            <div className=\"text-4xl mb-4\">⚡</div>\n            <p className=\"text-muted-foreground\">Ready to execute!</p>\n            <p className=\"text-sm text-muted-foreground mt-2\">Use Alt + Enter to run query</p>\n          </div>\n        ) : result.error ? (\n          <div className=\"space-y-4\">\n            <div className=\"flex items-center space-x-3 text-red-600\">\n              <div className=\"w-3 h-3 bg-red-500 rounded-full\"></div>\n              <span className=\"font-medium\">Query Failed</span>\n            </div>\n            <div className=\"bg-red-50 dark:bg-red-950/30 border border-red-200 dark:border-red-800 rounded-lg p-4\">\n              <p className=\"text-red-800 dark:text-red-200 text-sm font-mono\">{result.message}</p>\n            </div>\n            <p className=\"text-sm text-muted-foreground\">Check your query and try again.</p>\n          </div>\n        ) : (\n          <div className=\"space-y-4\">\n            <div className=\"flex items-center justify-between\">\n              <div className=\"flex items-center space-x-3 text-green-600\">\n                <div className=\"w-3 h-3 bg-green-500 rounded-full\"></div>\n                <span className=\"font-medium\">\n                  {result.isCorrect ? 'Perfect! 🏆' : 'Query Complete'}\n                </span>\n              </div>\n            </div>\n            \n            {result.isCorrect && (\n              <div className=\"bg-green-50 dark:bg-green-950/30 border border-green-200 dark:border-green-800 rounded-lg p-4\">\n                <div className=\"flex items-center space-x-2\">\n                  <span className=\"text-2xl\">🎉</span>\n                  <div>\n                    <p className=\"text-green-800 dark:text-green-200 font-medium\">Excellent work!</p>\n                    <p className=\"text-green-700 dark:text-green-300 text-sm\">Your solution is correct!</p>\n                  </div>\n                </div>\n              </div>\n            )}\n            \n            <div className=\"bg-muted/50 rounded-lg p-4\">\n              <p className=\"text-sm text-muted-foreground mb-2\">📊 Query Results:</p>\n              <div className=\"font-mono text-sm bg-background rounded border p-3 overflow-x-auto\">\n                <p>Status: {result.isCorrect ? '✅ Correct' : '⚠️ Review needed'}</p>\n                <p className=\"text-muted-foreground mt-2\">\n                  [Table data would be displayed here]\n                </p>\n              </div>\n            </div>\n          </div>\n        )}\n      </CardContent>\n    </Card>\n  );\n\n  // Show resizable layout when output is visible, otherwise show just the editor\n  if (showOutput) {\n    return (\n      <VerticalResizableSplitter\n        topPanel={editorPanel}\n        bottomPanel={outputPanel}\n        defaultTopHeight={60}\n        minTopHeight={35}\n        minBottomHeight={25}\n        className=\"h-full\"\n      />\n    );\n  }\n\n  // Show just the editor when no output\n  return (\n    <div className=\"h-full\">\n      {editorPanel}\n    </div>\n  );\n}\n\nexport default function ProblemDetail() {\n  const params = useParams();\n  const problemId = params.id as string;\n  const { user } = useAuth();\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n  const [showHint, setShowHint] = useState(false);\n  const [hintIndex, setHintIndex] = useState(0);\n\n  const { data: problem, isLoading: problemLoading } = useQuery({\n    queryKey: ['/api/problems', problemId],\n    queryFn: () => problemsApi.getById(problemId),\n    enabled: !!problemId,\n  });\n\n  const { data: userSubmissions } = useQuery({\n    queryKey: ['/api/submissions/user', user?.id, problemId],\n    queryFn: () => submissionsApi.getUserSubmissions(user!.id),\n    enabled: !!user?.id,\n    select: (submissions) => submissions.filter(s => s.problemId === problemId),\n  });\n\n  const submitMutation = useMutation({\n    mutationFn: (query: string) => submissionsApi.create({ problemId, query }),\n    onSuccess: (result) => {\n      toast({\n        title: result.isCorrect ? 'Success!' : 'Query Executed',\n        description: result.message,\n        variant: result.isCorrect ? 'default' : 'destructive',\n      });\n      \n      // Invalidate relevant queries\n      queryClient.invalidateQueries({ queryKey: ['/api/submissions/user'] });\n      if (result.isCorrect) {\n        queryClient.invalidateQueries({ queryKey: ['/api/auth/user'] });\n        queryClient.invalidateQueries({ queryKey: ['/api/problems', problemId] });\n      }\n    },\n    onError: (error) => {\n      toast({\n        title: 'Submission failed',\n        description: error instanceof Error ? error.message : 'Please try again.',\n        variant: 'destructive',\n      });\n    },\n  });\n\n  // Run Code - Non-persistent evaluation (no auth required)\n  const handleRunQuery = async (query: string) => {\n    // For now, return a mock evaluation result\n    // In a real app, this would call a separate evaluation endpoint\n    await new Promise(resolve => setTimeout(resolve, 800)); // Simulate processing\n    return {\n      isCorrect: false,\n      message: 'Query executed successfully. Use \"Check Solution\" to submit your final answer.',\n      executionTime: Math.floor(Math.random() * 50) + 10,\n    };\n  };\n  \n  // Check Solution - Persistent submission (auth required)\n  const handleSubmitSolution = async (query: string) => {\n    if (!user) {\n      toast({\n        title: 'Authentication required',\n        description: 'Please log in to submit solutions.',\n        variant: 'destructive',\n      });\n      throw new Error('Authentication required');\n    }\n    \n    return submitMutation.mutateAsync(query);\n  };\n\n  if (problemLoading) {\n    return (\n      <div className=\"min-h-screen bg-background\">\n        <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8\">\n          <div className=\"animate-pulse space-y-8\">\n            <div className=\"h-8 bg-muted rounded w-1/4\" />\n            <div className=\"grid lg:grid-cols-2 gap-8\">\n              <div className=\"space-y-6\">\n                <div className=\"h-6 bg-muted rounded w-3/4\" />\n                <div className=\"h-4 bg-muted rounded\" />\n                <div className=\"h-4 bg-muted rounded w-5/6\" />\n                <div className=\"h-32 bg-muted rounded\" />\n              </div>\n              <div className=\"space-y-6\">\n                <div className=\"h-6 bg-muted rounded w-1/2\" />\n                <div className=\"h-64 bg-muted rounded\" />\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n    );\n  }\n\n  if (!problem) {\n    return (\n      <div className=\"min-h-screen bg-background\">\n        <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8\">\n          <div className=\"text-center py-12\">\n            <h1 className=\"text-2xl font-bold text-foreground mb-4\">Problem not found</h1>\n            <p className=\"text-muted-foreground mb-6\">The problem you're looking for doesn't exist.</p>\n            <Link href=\"/problems\">\n              <Button data-testid=\"button-back-to-problems\">\n                <ArrowLeft className=\"mr-2 h-4 w-4\" />\n                Back to Problems\n              </Button>\n            </Link>\n          </div>\n        </div>\n      </div>\n    );\n  }\n\n  const getDifficultyColor = (difficulty: string) => {\n    switch (difficulty) {\n      case 'Easy': return 'bg-green-100 text-green-800';\n      case 'Medium': return 'bg-yellow-100 text-yellow-800';\n      case 'Hard': return 'bg-red-100 text-red-800';\n      default: return 'bg-gray-100 text-gray-800';\n    }\n  };\n\n  const hasCorrectSubmission = userSubmissions?.some(s => s.isCorrect) || false;\n\n  const handleShowHint = () => {\n    setShowHint(true);\n  };\n\n  const handleNextHint = () => {\n    if (problem?.hints && hintIndex < problem.hints.length - 1) {\n      setHintIndex(hintIndex + 1);\n    }\n  };\n\n  return (\n    <div className=\"h-screen bg-background flex flex-col\">\n      {/* Top Navigation Bar - Compact */}\n      <div className=\"flex-shrink-0 bg-background border-b border-border px-4 py-2\">\n        <div className=\"flex items-center justify-between\">\n          <Link href=\"/problems\">\n            <Button variant=\"ghost\" size=\"sm\" data-testid=\"button-back\">\n              <ArrowLeft className=\"mr-2 h-3 w-3\" />\n              Back to Questions\n            </Button>\n          </Link>\n          \n          {/* Question Navigation */}\n          <div className=\"flex items-center space-x-4\">\n            <Button variant=\"ghost\" size=\"sm\" data-testid=\"button-previous\">\n              <ChevronLeft className=\"h-4 w-4\" />\n            </Button>\n            \n            <div className=\"flex items-center space-x-2 text-sm\">\n              <span className=\"text-muted-foreground\">PostgreSQL</span>\n              <span className=\"text-muted-foreground\">|</span>\n              <span className=\"font-medium text-foreground\" data-testid=\"text-current-problem\">\n                {problem?.title || 'Current Problem'}\n              </span>\n            </div>\n            \n            <Button variant=\"ghost\" size=\"sm\" data-testid=\"button-next\">\n              <ChevronRight className=\"h-4 w-4\" />\n            </Button>\n          </div>\n        </div>\n      </div>\n\n      {/* Main Content Area */}\n      <div className=\"flex-1 min-h-0\">\n        <ResizableSplitter\n          defaultLeftWidth={45}\n          minLeftWidth={30}\n          minRightWidth={30}\n          className=\"h-full\"\n          leftPanel={\n            /* Problem Panel - Full Height */\n            <div className=\"h-full flex flex-col overflow-hidden bg-background\">\n              <div className=\"flex-1 space-y-6 p-6 overflow-auto\">\n                <Card>\n                  <CardHeader>\n                    <div className=\"flex items-center justify-between\">\n                      <div className=\"flex items-center space-x-4\">\n                        <h1 className=\"text-2xl font-bold text-foreground\" data-testid=\"text-problem-title\">\n                          {problem.title}\n                        </h1>\n                        <Badge className={getDifficultyColor(problem.difficulty)}>\n                          {problem.difficulty}\n                        </Badge>\n                        {hasCorrectSubmission && (\n                          <Badge className=\"bg-green-100 text-green-800\">\n                            ✓ Solved\n                          </Badge>\n                        )}\n                      </div>\n                    </div>\n                    <div className=\"flex items-center space-x-6 text-sm text-muted-foreground mt-2\">\n                      <div className=\"flex items-center space-x-1\">\n                        <Users className=\"w-4 h-4\" />\n                        <span data-testid=\"text-solved-count\">{problem.solvedCount} solved</span>\n                      </div>\n                    </div>\n                  </CardHeader>\n                  <CardContent className=\"space-y-6\">\n                    {/* Problem Description */}\n                    <div>\n                      <div className=\"text-foreground leading-relaxed mb-6 prose prose-sm max-w-none\" data-testid=\"text-problem-description\">\n                        <ReactMarkdown \n                          remarkPlugins={[remarkGfm]}\n                          components={{\n                            h1: ({children}) => <h1 className=\"text-2xl font-bold mb-4\">{children}</h1>,\n                            h2: ({children}) => <h2 className=\"text-xl font-semibold mb-3\">{children}</h2>,\n                            h3: ({children}) => <h3 className=\"text-lg font-medium mb-2\">{children}</h3>,\n                            p: ({children}) => <p className=\"mb-4 leading-relaxed\">{children}</p>,\n                            ul: ({children}) => <ul className=\"list-disc list-inside mb-4 space-y-1\">{children}</ul>,\n                            ol: ({children}) => <ol className=\"list-decimal list-inside mb-4 space-y-1\">{children}</ol>,\n                            li: ({children}) => <li className=\"text-foreground\">{children}</li>,\n                            code: ({children, className}) => {\n                              const isInline = !className;\n                              if (isInline) {\n                                return <code className=\"bg-muted px-1.5 py-0.5 rounded text-sm font-mono text-foreground\">{children}</code>;\n                              }\n                              return <code className=\"bg-muted text-sm font-mono block\">{children}</code>;\n                            },\n                            pre: ({children}) => <pre className=\"bg-muted p-4 rounded-lg overflow-x-auto mb-4 text-sm font-mono\">{children}</pre>,\n                            blockquote: ({children}) => <blockquote className=\"border-l-4 border-primary bg-muted/50 pl-4 pr-4 py-3 my-4 rounded-r-lg\">{children}</blockquote>,\n                            strong: ({children}) => <strong className=\"font-semibold text-foreground\">{children}</strong>,\n                            em: ({children}) => <em className=\"italic text-muted-foreground\">{children}</em>,\n                            table: ({children}) => <div className=\"overflow-x-auto my-4\"><table className=\"min-w-full border-collapse border border-muted\">{children}</table></div>,\n                            thead: ({children}) => <thead className=\"bg-muted/50\">{children}</thead>,\n                            tbody: ({children}) => <tbody>{children}</tbody>,\n                            tr: ({children}) => <tr className=\"border-b border-muted\">{children}</tr>,\n                            th: ({children}) => <th className=\"border border-muted px-3 py-2 text-left font-semibold\">{children}</th>,\n                            td: ({children}) => <td className=\"border border-muted px-3 py-2\">{children}</td>,\n                          }}\n                        >\n                          {problem.question?.description || ''}\n                        </ReactMarkdown>\n                      </div>\n                    </div>\n                    \n                    {/* Structured Table Display */}\n                    <TableDisplay \n                      tables={problem.question?.tables || []} \n                      expectedOutput={problem.question?.expectedOutput || []}\n                    />\n\n                    {/* Hints Section */}\n                    {problem?.hints && problem.hints.length > 0 && (\n                      <div className=\"space-y-3\">\n                        <Button \n                          onClick={handleShowHint}\n                          variant=\"outline\"\n                          className=\"w-full text-primary hover:bg-primary/10\"\n                          data-testid=\"button-show-hint\"\n                        >\n                          <Lightbulb className=\"mr-2 h-4 w-4\" />\n                          Show Hints\n                        </Button>\n                        \n                        {showHint && (\n                          <Alert className=\"border-primary/20 bg-primary/10\">\n                            <Lightbulb className=\"h-4 w-4 text-primary\" />\n                            <AlertDescription className=\"text-foreground\">\n                              <strong>💡 Hint {hintIndex + 1}:</strong> {problem.hints[hintIndex]}\n                              {hintIndex < problem.hints.length - 1 && (\n                                <Button \n                                  onClick={handleNextHint}\n                                  variant=\"link\" \n                                  className=\"p-0 ml-2 text-primary\"\n                                  data-testid=\"button-next-hint\"\n                                >\n                                  Next hint →\n                                </Button>\n                              )}\n                            </AlertDescription>\n                          </Alert>\n                        )}\n                      </div>\n                    )}\n                  </CardContent>\n                </Card>\n                \n                {/* Tags */}\n                {problem.tags && problem.tags.length > 0 && (\n                  <Card>\n                    <CardHeader>\n                      <CardTitle>Tags</CardTitle>\n                    </CardHeader>\n                    <CardContent>\n                      <div className=\"flex flex-wrap gap-2\">\n                        {problem.tags.map((tag: string, index: number) => (\n                          <Badge key={index} variant=\"outline\" data-testid={`tag-${tag}`}>\n                            {tag}\n                          </Badge>\n                        ))}\n                      </div>\n                    </CardContent>\n                  </Card>\n                )}\n                \n                {/* Previous Submissions */}\n                {userSubmissions && userSubmissions.length > 0 && (\n                  <Card>\n                    <CardHeader>\n                      <CardTitle>Your Submissions</CardTitle>\n                    </CardHeader>\n                    <CardContent>\n                      <div className=\"space-y-3\">\n                        {userSubmissions.slice(0, 5).map((submission, index) => (\n                          <div \n                            key={submission.id} \n                            className=\"flex items-center justify-between p-3 bg-muted rounded-lg\"\n                            data-testid={`submission-${index}`}\n                          >\n                            <div className=\"flex items-center space-x-3\">\n                              <div className={`w-3 h-3 rounded-full ${\n                                submission.isCorrect ? 'bg-green-500' : 'bg-red-500'\n                              }`} />\n                              <span className=\"text-sm font-medium\">\n                                {submission.isCorrect ? 'Correct' : 'Incorrect'}\n                              </span>\n                            </div>\n                            <div className=\"text-sm text-muted-foreground\">\n                              {new Date(submission.submittedAt).toLocaleDateString()}\n                            </div>\n                          </div>\n                        ))}\n                      </div>\n                    </CardContent>\n                  </Card>\n                )}\n              </div>\n            </div>\n          }\n          rightPanel={\n            /* Editor + Output Panels with Vertical Split */\n            <EditorOutputSplit \n              problem={problem}\n              handleRunQuery={handleRunQuery}\n              handleSubmitSolution={handleSubmitSolution}\n            />\n          }\n        />\n      </div>\n    </div>\n  );\n}\n","size_bytes":27038},"client/src/pages/problems.tsx":{"content":"import { useState, useEffect } from \"react\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport { motion, AnimatePresence } from \"framer-motion\";\nimport {\n  Search,\n  Filter,\n  X,\n  ChevronDown,\n  Users,\n  Building2,\n  Tag,\n  Dumbbell,\n  CheckCircle,\n} from \"lucide-react\";\nimport { Link } from \"wouter\";\nimport ReactMarkdown from 'react-markdown';\nimport remarkGfm from 'remark-gfm';\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Card, CardContent } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Checkbox } from \"@/components/ui/checkbox\";\nimport {\n  Table,\n  TableBody,\n  TableCell,\n  TableHead,\n  TableHeader,\n  TableRow,\n} from \"@/components/ui/table\";\nimport {\n  Popover,\n  PopoverContent,\n  PopoverTrigger,\n} from \"@/components/ui/popover\";\nimport { problemsApi } from \"@/lib/auth\";\nimport { useAuth } from \"@/hooks/use-auth\";\n\ninterface Problem {\n  id: string;\n  title: string;\n  question: {\n    description: string;\n    tables: any[];\n    expectedOutput: any[];\n  };\n  difficulty: string;\n  tags: string[];\n  companies: string[];\n  solvedCount: number;\n  isUserSolved: boolean;\n}\n\ninterface FilterState {\n  difficulties: string[];\n  companies: string[];\n  tags: string[];\n  status: \"all\" | \"solved\" | \"unsolved\";\n}\n\nexport default function Problems() {\n  const { user } = useAuth();\n  const [searchQuery, setSearchQuery] = useState(\"\");\n  const [filters, setFilters] = useState<FilterState>({\n    difficulties: [],\n    companies: [],\n    tags: [],\n    status: \"all\",\n  });\n\n  const { data: problems, isLoading } = useQuery<Problem[]>({\n    queryKey: [\"/api/problems\"],\n    queryFn: () => problemsApi.getAll(),\n  });\n\n  // Get unique values for filter options\n  const allCompanies = Array.from(\n    new Set(problems?.flatMap((p) => p.companies || []))\n  ).sort();\n  const allTags = Array.from(\n    new Set(problems?.flatMap((p) => p.tags || []))\n  ).sort();\n  const difficulties = [\"Easy\", \"Medium\", \"Hard\"];\n\n  // Get tag counts for display\n  const getTagCount = (tag: string) => {\n    return problems?.filter((p) => p.tags?.includes(tag)).length || 0;\n  };\n\n  // Filter problems based on all criteria\n  const filteredProblems =\n    problems?.filter((problem) => {\n      // Search filter\n      const matchesSearch =\n        searchQuery === \"\" ||\n        problem.title.toLowerCase().includes(searchQuery.toLowerCase()) ||\n        problem.question.description.toLowerCase().includes(searchQuery.toLowerCase());\n\n      // Difficulty filter\n      const matchesDifficulty =\n        filters.difficulties.length === 0 ||\n        filters.difficulties.includes(problem.difficulty);\n\n      // Company filter\n      const matchesCompany =\n        filters.companies.length === 0 ||\n        filters.companies.some((company) =>\n          problem.companies?.includes(company)\n        );\n\n      // Tags filter - must have ALL selected tags (AND logic)\n      const matchesTags =\n        filters.tags.length === 0 ||\n        filters.tags.every((tag) => problem.tags?.includes(tag));\n\n      // Status filter - check if user has solved the problem\n      const matchesStatus =\n        filters.status === \"all\" ||\n        (filters.status === \"solved\" && problem.isUserSolved === true) ||\n        (filters.status === \"unsolved\" && problem.isUserSolved !== true);\n\n      return (\n        matchesSearch &&\n        matchesDifficulty &&\n        matchesCompany &&\n        matchesTags &&\n        matchesStatus\n      );\n    }) || [];\n\n  const getDifficultyColor = (difficulty: string) => {\n    switch (difficulty) {\n      case \"Easy\":\n        return \"text-green-600 bg-green-50 border-green-200\";\n      case \"Medium\":\n        return \"text-orange-600 bg-orange-50 border-orange-200\";\n      case \"Hard\":\n        return \"text-red-600 bg-red-50 border-red-200\";\n      default:\n        return \"text-gray-600 bg-gray-50 border-gray-200\";\n    }\n  };\n\n  const updateFilter = (key: keyof FilterState, value: any) => {\n    setFilters((prev) => ({ ...prev, [key]: value }));\n  };\n\n  const toggleArrayFilter = (\n    key: \"difficulties\" | \"companies\" | \"tags\",\n    value: string\n  ) => {\n    setFilters((prev) => ({\n      ...prev,\n      [key]: prev[key].includes(value)\n        ? prev[key].filter((item) => item !== value)\n        : [...prev[key], value],\n    }));\n  };\n\n  const clearFilters = () => {\n    setFilters({\n      difficulties: [],\n      companies: [],\n      tags: [],\n      status: \"all\",\n    });\n    setSearchQuery(\"\");\n  };\n\n  const getActiveFilterCount = () => {\n    return (\n      filters.difficulties.length +\n      filters.companies.length +\n      filters.tags.length +\n      (filters.status !== \"all\" ? 1 : 0)\n    );\n  };\n\n  return (\n    <div className=\"min-h-screen bg-white\">\n      <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8\">\n        {/* Header */}\n        <div className=\"mb-8\">\n          <h1 className=\"text-4xl font-bold text-gray-900 mb-4\">\n            SQL Practice Problems\n          </h1>\n          <p className=\"text-xl text-gray-600\">\n            Master SQL for interviews and professional development\n          </p>\n        </div>\n\n        {/* Search and Filters */}\n        <div className=\"mb-8 space-y-4\">\n          {/* Search Bar */}\n          <div className=\"relative\">\n            <Search className=\"absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-400 w-5 h-5\" />\n            <Input\n              placeholder=\"Search problems by title or description...\"\n              value={searchQuery}\n              onChange={(e) => setSearchQuery(e.target.value)}\n              className=\"pl-10 h-12 text-lg border-gray-200 focus:border-orange-500 focus:ring-orange-500\"\n              data-testid=\"input-search-problems\"\n            />\n          </div>\n\n          {/* Filter Section */}\n          <div className=\"flex flex-wrap gap-3 items-center\">\n            {/* Difficulty Filter */}\n            <Popover>\n              <PopoverTrigger asChild>\n                <Button\n                  variant=\"outline\"\n                  className=\"h-10 border-gray-200 hover:border-orange-500\"\n                  data-testid=\"button-difficulty-filter\"\n                >\n                  <Filter className=\"w-4 h-4 mr-2\" />\n                  Difficulty\n                  {filters.difficulties.length > 0 && (\n                    <Badge\n                      variant=\"secondary\"\n                      className=\"ml-2 bg-orange-100 text-orange-700\"\n                    >\n                      {filters.difficulties.length}\n                    </Badge>\n                  )}\n                  <ChevronDown className=\"w-4 h-4 ml-2\" />\n                </Button>\n              </PopoverTrigger>\n              <PopoverContent className=\"w-64\" align=\"start\">\n                <div className=\"space-y-3\">\n                  <h4 className=\"font-medium text-gray-900\">\n                    Filter by Difficulty\n                  </h4>\n                  {difficulties.map((difficulty) => (\n                    <div\n                      key={difficulty}\n                      className=\"flex items-center space-x-2\"\n                    >\n                      <Checkbox\n                        checked={filters.difficulties.includes(difficulty)}\n                        onCheckedChange={() =>\n                          toggleArrayFilter(\"difficulties\", difficulty)\n                        }\n                        data-testid={`checkbox-difficulty-${difficulty.toLowerCase()}`}\n                      />\n                      <label className=\"text-sm font-medium cursor-pointer\">\n                        {difficulty}\n                      </label>\n                    </div>\n                  ))}\n                </div>\n              </PopoverContent>\n            </Popover>\n\n            {/* Companies Filter */}\n            <Popover>\n              <PopoverTrigger asChild>\n                <Button\n                  variant=\"outline\"\n                  className=\"h-10 border-gray-200 hover:border-orange-500\"\n                  data-testid=\"button-companies-filter\"\n                >\n                  <Building2 className=\"w-4 h-4 mr-2\" />\n                  Companies\n                  {filters.companies.length > 0 && (\n                    <Badge\n                      variant=\"secondary\"\n                      className=\"ml-2 bg-orange-100 text-orange-700\"\n                    >\n                      {filters.companies.length}\n                    </Badge>\n                  )}\n                  <ChevronDown className=\"w-4 h-4 ml-2\" />\n                </Button>\n              </PopoverTrigger>\n              <PopoverContent className=\"w-80\" align=\"start\">\n                <div className=\"space-y-3\">\n                  <h4 className=\"font-medium text-gray-900\">\n                    Filter by Companies\n                  </h4>\n                  <div className=\"max-h-64 overflow-y-auto space-y-2\">\n                    {allCompanies.map((company: string) => (\n                      <div\n                        key={company}\n                        className=\"flex items-center space-x-2\"\n                      >\n                        <Checkbox\n                          checked={filters.companies.includes(company)}\n                          onCheckedChange={() =>\n                            toggleArrayFilter(\"companies\", company)\n                          }\n                          data-testid={`checkbox-company-${company\n                            .toLowerCase()\n                            .replace(/\\s+/g, \"-\")}`}\n                        />\n                        <label className=\"text-sm font-medium cursor-pointer\">\n                          {company}\n                        </label>\n                      </div>\n                    ))}\n                  </div>\n                </div>\n              </PopoverContent>\n            </Popover>\n\n            {/* Status Filter - Only show if user is authenticated */}\n            {user && (\n              <Popover>\n                <PopoverTrigger asChild>\n                  <Button\n                    variant=\"outline\"\n                    className=\"h-10 border-gray-200 hover:border-orange-500\"\n                    data-testid=\"button-status-filter\"\n                  >\n                    <CheckCircle className=\"w-4 h-4 mr-2\" />\n                    Status\n                    {filters.status !== \"all\" && (\n                      <Badge\n                        variant=\"secondary\"\n                        className=\"ml-2 bg-orange-100 text-orange-700\"\n                      >\n                        1\n                      </Badge>\n                    )}\n                    <ChevronDown className=\"w-4 h-4 ml-2\" />\n                  </Button>\n                </PopoverTrigger>\n                <PopoverContent className=\"w-64\" align=\"start\">\n                  <div className=\"space-y-3\">\n                    <h4 className=\"font-medium text-gray-900\">\n                      Filter by Status\n                    </h4>\n                    {[\n                      { value: \"all\", label: \"All Problems\" },\n                      { value: \"solved\", label: \"Solved\" },\n                      { value: \"unsolved\", label: \"Unsolved\" },\n                    ].map((option) => (\n                      <div\n                        key={option.value}\n                        className=\"flex items-center space-x-2\"\n                      >\n                        <Checkbox\n                          checked={filters.status === option.value}\n                          onCheckedChange={() =>\n                            updateFilter(\"status\", option.value)\n                          }\n                          data-testid={`checkbox-status-${option.value}`}\n                        />\n                        <label className=\"text-sm font-medium cursor-pointer\">\n                          {option.label}\n                        </label>\n                      </div>\n                    ))}\n                  </div>\n                </PopoverContent>\n              </Popover>\n            )}\n\n            {/* Clear Filters */}\n            {getActiveFilterCount() > 0 && (\n              <Button\n                variant=\"ghost\"\n                onClick={clearFilters}\n                className=\"h-10 text-gray-600 hover:text-gray-900\"\n                data-testid=\"button-clear-filters\"\n              >\n                <X className=\"w-4 h-4 mr-2\" />\n                Clear filters\n              </Button>\n            )}\n          </div>\n\n          {/* Active Filter Chips */}\n          <AnimatePresence>\n            {getActiveFilterCount() > 0 && (\n              <motion.div\n                initial={{ opacity: 0, height: 0 }}\n                animate={{ opacity: 1, height: \"auto\" }}\n                exit={{ opacity: 0, height: 0 }}\n                className=\"flex flex-wrap gap-2\"\n              >\n                {filters.difficulties.map((difficulty) => (\n                  <motion.div\n                    key={`difficulty-${difficulty}`}\n                    initial={{ opacity: 0, scale: 0.8 }}\n                    animate={{ opacity: 1, scale: 1 }}\n                    exit={{ opacity: 0, scale: 0.8 }}\n                  >\n                    <Badge\n                      variant=\"secondary\"\n                      className=\"bg-orange-100 text-orange-700 hover:bg-orange-200 cursor-pointer\"\n                      onClick={() =>\n                        toggleArrayFilter(\"difficulties\", difficulty)\n                      }\n                      data-testid={`chip-difficulty-${difficulty.toLowerCase()}`}\n                    >\n                      {difficulty}\n                      <X className=\"w-3 h-3 ml-1\" />\n                    </Badge>\n                  </motion.div>\n                ))}\n                {filters.companies.map((company) => (\n                  <motion.div\n                    key={`company-${company}`}\n                    initial={{ opacity: 0, scale: 0.8 }}\n                    animate={{ opacity: 1, scale: 1 }}\n                    exit={{ opacity: 0, scale: 0.8 }}\n                  >\n                    <Badge\n                      variant=\"secondary\"\n                      className=\"bg-blue-100 text-blue-700 hover:bg-blue-200 cursor-pointer\"\n                      onClick={() => toggleArrayFilter(\"companies\", company)}\n                      data-testid={`chip-company-${company\n                        .toLowerCase()\n                        .replace(/\\s+/g, \"-\")}`}\n                    >\n                      {company}\n                      <X className=\"w-3 h-3 ml-1\" />\n                    </Badge>\n                  </motion.div>\n                ))}\n                {filters.tags.map((tag) => (\n                  <motion.div\n                    key={`tag-${tag}`}\n                    initial={{ opacity: 0, scale: 0.8 }}\n                    animate={{ opacity: 1, scale: 1 }}\n                    exit={{ opacity: 0, scale: 0.8 }}\n                  >\n                    <Badge\n                      variant=\"secondary\"\n                      className=\"bg-purple-100 text-purple-700 hover:bg-purple-200 cursor-pointer\"\n                      onClick={() => toggleArrayFilter(\"tags\", tag)}\n                      data-testid={`chip-tag-${tag\n                        .toLowerCase()\n                        .replace(/\\s+/g, \"-\")}`}\n                    >\n                      {tag}\n                      <X className=\"w-3 h-3 ml-1\" />\n                    </Badge>\n                  </motion.div>\n                ))}\n                {filters.status !== \"all\" && (\n                  <motion.div\n                    key={`status-${filters.status}`}\n                    initial={{ opacity: 0, scale: 0.8 }}\n                    animate={{ opacity: 1, scale: 1 }}\n                    exit={{ opacity: 0, scale: 0.8 }}\n                  >\n                    <Badge\n                      variant=\"secondary\"\n                      className=\"bg-green-100 text-green-700 hover:bg-green-200 cursor-pointer\"\n                      onClick={() => updateFilter(\"status\", \"all\")}\n                      data-testid={`chip-status-${filters.status}`}\n                    >\n                      {filters.status === \"solved\" ? \"Solved\" : \"Unsolved\"}\n                      <X className=\"w-3 h-3 ml-1\" />\n                    </Badge>\n                  </motion.div>\n                )}\n              </motion.div>\n            )}\n          </AnimatePresence>\n        </div>\n\n        {/* Main Content Area - Table and Tags Side by Side */}\n        <div className=\"flex gap-8\">\n          {/* Left Side - Table and Results */}\n          <div className=\"flex-1\">\n            {/* Results Summary */}\n            <div className=\"mb-6\">\n              <p className=\"text-gray-600\">\n                Showing{\" \"}\n                <span className=\"font-semibold text-gray-900\">\n                  {filteredProblems.length}\n                </span>{\" \"}\n                of{\" \"}\n                <span className=\"font-semibold text-gray-900\">\n                  {problems?.length || 0}\n                </span>{\" \"}\n                problems\n              </p>\n            </div>\n\n            {/* Problems Table */}\n            {isLoading ? (\n              <div className=\"space-y-4\">\n                {[...Array(6)].map((_, i) => (\n                  <div key={i} className=\"animate-pulse\">\n                    <div className=\"h-16 bg-gray-200 rounded\" />\n                  </div>\n                ))}\n              </div>\n            ) : filteredProblems.length === 0 ? (\n              <motion.div\n                initial={{ opacity: 0, y: 20 }}\n                animate={{ opacity: 1, y: 0 }}\n                className=\"text-center py-16\"\n              >\n                <div className=\"w-24 h-24 bg-gray-100 rounded-full flex items-center justify-center mx-auto mb-6\">\n                  <Search className=\"w-12 h-12 text-gray-400\" />\n                </div>\n                <h3 className=\"text-2xl font-semibold text-gray-900 mb-2\">\n                  No problems found\n                </h3>\n                <p className=\"text-gray-600 mb-6\">\n                  Try changing your filters or search terms\n                </p>\n                <Button\n                  onClick={clearFilters}\n                  variant=\"outline\"\n                  data-testid=\"button-clear-all-filters\"\n                >\n                  Clear all filters\n                </Button>\n              </motion.div>\n            ) : (\n              <motion.div\n                initial={{ opacity: 0 }}\n                animate={{ opacity: 1 }}\n                className=\"border rounded-lg overflow-hidden bg-white\"\n              >\n                <Table>\n                  <TableHeader>\n                    <TableRow className=\"bg-gray-50\">\n                      <TableHead className=\"font-semibold text-gray-900\">\n                        Company\n                      </TableHead>\n                      <TableHead className=\"font-semibold text-gray-900\">\n                        Title\n                      </TableHead>\n                      <TableHead className=\"font-semibold text-gray-900\">\n                        Description\n                      </TableHead>\n                      <TableHead className=\"font-semibold text-gray-900\">\n                        Difficulty\n                      </TableHead>\n                      <TableHead className=\"font-semibold text-gray-900\">\n                        Status\n                      </TableHead>\n                      <TableHead className=\"font-semibold text-gray-900\">\n                        Submissions\n                      </TableHead>\n                    </TableRow>\n                  </TableHeader>\n                  <TableBody>\n                    {filteredProblems.map((problem, index) => (\n                      <motion.tr\n                        key={problem.id}\n                        initial={{ opacity: 0, y: 20 }}\n                        animate={{ opacity: 1, y: 0 }}\n                        transition={{ delay: index * 0.02 }}\n                        className=\"hover:bg-gray-50 transition-colors cursor-pointer\"\n                        onClick={() =>\n                          (window.location.href = `/problems/${problem.id}`)\n                        }\n                        data-testid={`row-problem-${problem.id}`}\n                      >\n                        <TableCell className=\"py-4\">\n                          <div className=\"flex flex-wrap gap-1\">\n                            {problem.companies &&\n                            problem.companies.length > 0 ? (\n                              <>\n                                {problem.companies\n                                  .slice(0, 2)\n                                  .map((company: string) => (\n                                    <Badge\n                                      key={company}\n                                      variant=\"outline\"\n                                      className=\"bg-blue-50 text-blue-700 border-blue-200 text-xs\"\n                                    >\n                                      <Building2 className=\"w-3 h-3 mr-1\" />\n                                      {company}\n                                    </Badge>\n                                  ))}\n                                {problem.companies.length > 2 && (\n                                  <Badge\n                                    variant=\"outline\"\n                                    className=\"bg-blue-50 text-blue-700 border-blue-200 text-xs\"\n                                  >\n                                    +{problem.companies.length - 2}\n                                  </Badge>\n                                )}\n                              </>\n                            ) : (\n                              <span className=\"text-gray-400 text-sm\">-</span>\n                            )}\n                          </div>\n                        </TableCell>\n\n                        <TableCell className=\"py-4\">\n                          <h3 className=\"font-medium text-gray-900 hover:text-orange-600 transition-colors\">\n                            {problem.title}\n                          </h3>\n                        </TableCell>\n\n                        <TableCell className=\"py-4 max-w-md\">\n                          <div className=\"text-gray-600 text-sm line-clamp-2\">\n                            <ReactMarkdown \n                              remarkPlugins={[remarkGfm]}\n                              components={{\n                                // Flatten all elements for preview - keep formatting but avoid line breaks\n                                p: ({children}) => <span className=\"inline\">{children} </span>,\n                                strong: ({children}) => <strong className=\"font-semibold text-gray-800\">{children}</strong>,\n                                em: ({children}) => <em className=\"italic\">{children}</em>,\n                                code: ({children}) => <code className=\"bg-gray-100 px-1 py-0.5 rounded text-xs font-mono text-gray-800\">{children}</code>,\n                                h1: ({children}) => <span className=\"font-bold text-gray-800\">{children} </span>,\n                                h2: ({children}) => <span className=\"font-semibold text-gray-800\">{children} </span>,\n                                h3: ({children}) => <span className=\"font-medium text-gray-800\">{children} </span>,\n                                ul: ({children}) => <span>{children}</span>,\n                                ol: ({children}) => <span>{children}</span>,\n                                li: ({children}) => <span>{children} • </span>,\n                                blockquote: ({children}) => <span className=\"italic text-blue-600\">\"{children}\" </span>,\n                                // Tables and code blocks are hidden in preview\n                                table: () => <span className=\"text-blue-600 font-medium\">[Table] </span>,\n                                pre: () => <span className=\"text-green-600 font-medium\">[Code] </span>,\n                              }}\n                            >\n                              {(() => {\n                                // Get first paragraph or first 150 chars to avoid breaking markdown syntax\n                                const desc = problem.question.description;\n                                const firstParagraph = desc.split('\\n\\n')[0];\n                                if (firstParagraph.length > 150) {\n                                  return firstParagraph.substring(0, 150) + '...';\n                                }\n                                return firstParagraph + (desc.length > firstParagraph.length ? '...' : '');\n                              })()}\n                            </ReactMarkdown>\n                          </div>\n                        </TableCell>\n\n                        <TableCell className=\"py-4\">\n                          <Badge\n                            className={`${getDifficultyColor(\n                              problem.difficulty\n                            )} border font-medium`}\n                          >\n                            {problem.difficulty}\n                          </Badge>\n                        </TableCell>\n\n                        <TableCell className=\"py-4\">\n                          <div className=\"flex items-center justify-center\">\n                            {problem.isUserSolved ? (\n                              <div\n                                className=\"text-green-600\"\n                                data-testid={`dumbbell-solved-${problem.id}`}\n                              >\n                                <Dumbbell className=\"w-5 h-5\" />\n                              </div>\n                            ) : null}\n                          </div>\n                        </TableCell>\n\n                        <TableCell className=\"py-4\">\n                          <div className=\"flex items-center space-x-1 text-sm text-gray-500\">\n                            <Users className=\"w-4 h-4\" />\n                            <span>{problem.solvedCount}</span>\n                          </div>\n                        </TableCell>\n                      </motion.tr>\n                    ))}\n                  </TableBody>\n                </Table>\n              </motion.div>\n            )}\n\n            {/* Stats Footer */}\n            {!isLoading && filteredProblems.length > 0 && (\n              <motion.div\n                initial={{ opacity: 0, y: 20 }}\n                animate={{ opacity: 1, y: 0 }}\n                transition={{ delay: 0.3 }}\n                className=\"mt-16 bg-gray-50 rounded-2xl p-8\"\n              >\n                <div className=\"grid grid-cols-2 md:grid-cols-4 gap-8 text-center\">\n                  <div>\n                    <div className=\"text-3xl font-bold text-gray-900\">\n                      {filteredProblems.length}\n                    </div>\n                    <div className=\"text-sm text-gray-600\">Total Problems</div>\n                  </div>\n                  <div>\n                    <div className=\"text-3xl font-bold text-green-600\">\n                      {\n                        filteredProblems.filter((p) => p.difficulty === \"Easy\")\n                          .length\n                      }\n                    </div>\n                    <div className=\"text-sm text-gray-600\">Easy</div>\n                  </div>\n                  <div>\n                    <div className=\"text-3xl font-bold text-orange-600\">\n                      {\n                        filteredProblems.filter(\n                          (p) => p.difficulty === \"Medium\"\n                        ).length\n                      }\n                    </div>\n                    <div className=\"text-sm text-gray-600\">Medium</div>\n                  </div>\n                  <div>\n                    <div className=\"text-3xl font-bold text-red-600\">\n                      {\n                        filteredProblems.filter((p) => p.difficulty === \"Hard\")\n                          .length\n                      }\n                    </div>\n                    <div className=\"text-sm text-gray-600\">Hard</div>\n                  </div>\n                </div>\n              </motion.div>\n            )}\n          </div>\n\n          {/* Right Sidebar - Tags */}\n          <div className=\"w-80\">\n            {allTags.length > 0 && (\n              <div className=\"sticky top-6\">\n                <h3 className=\"text-lg font-semibold text-gray-900 mb-4\">\n                  Tags\n                </h3>\n                <div className=\"flex flex-wrap gap-1.5 max-h-96 overflow-y-auto\">\n                  {allTags.map((tag) => (\n                    <button\n                      key={tag}\n                      onClick={() => toggleArrayFilter(\"tags\", tag)}\n                      className={`\n                    px-3 py-1.5 rounded-full text-sm font-medium transition-colors duration-200\n                    ${\n                      filters.tags.includes(tag)\n                        ? \"bg-orange-500 text-white border border-orange-500\"\n                        : \"bg-white text-gray-700 border border-gray-300 hover:bg-gray-100 hover:border-gray-400\"\n                    }\n                  `}\n                    >\n                      {tag} ({getTagCount(tag)})\n                    </button>\n                  ))}\n                </div>\n              </div>\n            )}\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}\n","size_bytes":29517},"client/src/pages/submissions.tsx":{"content":"import { useQuery } from '@tanstack/react-query';\nimport { Clock, CheckCircle, XCircle, Code, ArrowRight, Filter } from 'lucide-react';\nimport { useState } from 'react';\nimport { Link } from 'wouter';\nimport { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Badge } from '@/components/ui/badge';\nimport { Button } from '@/components/ui/button';\nimport { submissionsApi, problemsApi } from '@/lib/auth';\nimport { useAuth } from '@/hooks/use-auth';\n\nexport default function Submissions() {\n  const [filter, setFilter] = useState<'all' | 'correct' | 'incorrect'>('all');\n  const { user } = useAuth();\n\n  const { data: submissions, isLoading: submissionsLoading } = useQuery({\n    queryKey: ['/api/submissions/user', user?.id],\n    queryFn: () => submissionsApi.getUserSubmissions(user!.id),\n    enabled: !!user?.id,\n  });\n\n  const { data: problems } = useQuery({\n    queryKey: ['/api/problems'],\n    queryFn: () => problemsApi.getAll(),\n  });\n\n  const filteredSubmissions = submissions?.filter(submission => {\n    if (filter === 'correct') return submission.isCorrect;\n    if (filter === 'incorrect') return !submission.isCorrect;\n    return true;\n  }) || [];\n\n  const getProblemTitle = (problemId: string) => {\n    return problems?.find(p => p.id === problemId)?.title || 'Unknown Problem';\n  };\n\n  const getProblemDifficulty = (problemId: string) => {\n    return problems?.find(p => p.id === problemId)?.difficulty || 'Unknown';\n  };\n\n  const getDifficultyColor = (difficulty: string) => {\n    switch (difficulty) {\n      case 'Easy': return 'bg-green-100 text-green-800';\n      case 'Medium': return 'bg-yellow-100 text-yellow-800';\n      case 'Hard': return 'bg-red-100 text-red-800';\n      default: return 'bg-gray-100 text-gray-800';\n    }\n  };\n\n  const formatDate = (dateString: string) => {\n    const date = new Date(dateString);\n    return date.toLocaleDateString('en-US', {\n      year: 'numeric',\n      month: 'short',\n      day: 'numeric',\n      hour: '2-digit',\n      minute: '2-digit',\n    });\n  };\n\n  const truncateQuery = (query: string, maxLength: number = 100) => {\n    if (query.length <= maxLength) return query;\n    return query.substring(0, maxLength).trim() + '...';\n  };\n\n  // Calculate stats\n  const totalSubmissions = submissions?.length || 0;\n  const correctSubmissions = submissions?.filter(s => s.isCorrect).length || 0;\n  const successRate = totalSubmissions > 0 ? Math.round((correctSubmissions / totalSubmissions) * 100) : 0;\n  const avgExecutionTime = submissions?.length ? \n    Math.round(submissions.reduce((sum, s) => sum + (s.executionTime || 0), 0) / submissions.length) : 0;\n\n  return (\n    <div className=\"min-h-screen bg-background\">\n      <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8\">\n        {/* Header */}\n        <div className=\"mb-8\">\n          <h1 className=\"text-4xl font-bold text-foreground mb-4\">Your Submissions</h1>\n          <p className=\"text-xl text-muted-foreground\">Track your SQL training progress and achievements</p>\n        </div>\n\n        {/* Stats Overview */}\n        <div className=\"grid md:grid-cols-4 gap-6 mb-8\">\n          <Card>\n            <CardContent className=\"p-6 text-center\">\n              <div className=\"text-3xl font-bold text-primary mb-2\" data-testid=\"stat-total-submissions\">\n                {totalSubmissions}\n              </div>\n              <div className=\"text-sm text-muted-foreground\">Total Submissions</div>\n            </CardContent>\n          </Card>\n          \n          <Card>\n            <CardContent className=\"p-6 text-center\">\n              <div className=\"text-3xl font-bold text-green-600 mb-2\" data-testid=\"stat-correct-submissions\">\n                {correctSubmissions}\n              </div>\n              <div className=\"text-sm text-muted-foreground\">Correct Solutions</div>\n            </CardContent>\n          </Card>\n          \n          <Card>\n            <CardContent className=\"p-6 text-center\">\n              <div className=\"text-3xl font-bold text-blue-600 mb-2\" data-testid=\"stat-success-rate\">\n                {successRate}%\n              </div>\n              <div className=\"text-sm text-muted-foreground\">Success Rate</div>\n            </CardContent>\n          </Card>\n          \n          <Card>\n            <CardContent className=\"p-6 text-center\">\n              <div className=\"text-3xl font-bold text-orange-600 mb-2\" data-testid=\"stat-avg-time\">\n                {avgExecutionTime}ms\n              </div>\n              <div className=\"text-sm text-muted-foreground\">Avg Execution Time</div>\n            </CardContent>\n          </Card>\n        </div>\n\n        {/* Filters */}\n        <div className=\"flex items-center space-x-4 mb-6\">\n          <div className=\"flex items-center space-x-2\">\n            <Filter className=\"w-4 h-4 text-muted-foreground\" />\n            <span className=\"text-sm font-medium text-foreground\">Filter:</span>\n          </div>\n          <div className=\"bg-white border border-border rounded-lg p-1 inline-flex\">\n            <Button\n              variant={filter === 'all' ? 'default' : 'ghost'}\n              size=\"sm\"\n              onClick={() => setFilter('all')}\n              className={filter === 'all' ? 'bg-primary text-primary-foreground' : ''}\n              data-testid=\"button-filter-all\"\n            >\n              All ({totalSubmissions})\n            </Button>\n            <Button\n              variant={filter === 'correct' ? 'default' : 'ghost'}\n              size=\"sm\"\n              onClick={() => setFilter('correct')}\n              className={filter === 'correct' ? 'bg-primary text-primary-foreground' : ''}\n              data-testid=\"button-filter-correct\"\n            >\n              Correct ({correctSubmissions})\n            </Button>\n            <Button\n              variant={filter === 'incorrect' ? 'default' : 'ghost'}\n              size=\"sm\"\n              onClick={() => setFilter('incorrect')}\n              className={filter === 'incorrect' ? 'bg-primary text-primary-foreground' : ''}\n              data-testid=\"button-filter-incorrect\"\n            >\n              Incorrect ({totalSubmissions - correctSubmissions})\n            </Button>\n          </div>\n        </div>\n\n        {/* Submissions List */}\n        {submissionsLoading ? (\n          <div className=\"space-y-4\">\n            {[...Array(5)].map((_, i) => (\n              <Card key={i} className=\"animate-pulse\">\n                <CardContent className=\"p-6\">\n                  <div className=\"flex items-start justify-between\">\n                    <div className=\"space-y-3 flex-1\">\n                      <div className=\"h-4 bg-muted rounded w-1/3\" />\n                      <div className=\"h-3 bg-muted rounded w-1/2\" />\n                      <div className=\"h-16 bg-muted rounded\" />\n                    </div>\n                    <div className=\"ml-4 space-y-2\">\n                      <div className=\"h-6 bg-muted rounded w-20\" />\n                      <div className=\"h-4 bg-muted rounded w-16\" />\n                    </div>\n                  </div>\n                </CardContent>\n              </Card>\n            ))}\n          </div>\n        ) : filteredSubmissions.length === 0 ? (\n          <Card>\n            <CardContent className=\"p-12 text-center\">\n              <div className=\"w-16 h-16 bg-muted rounded-full flex items-center justify-center mx-auto mb-4\">\n                <Code className=\"w-8 h-8 text-muted-foreground\" />\n              </div>\n              <h3 className=\"text-lg font-semibold text-foreground mb-2\">\n                {filter === 'all' ? 'No submissions yet' : `No ${filter} submissions`}\n              </h3>\n              <p className=\"text-muted-foreground mb-6\">\n                {filter === 'all' \n                  ? 'Start solving problems to see your submission history here!'\n                  : `You haven't made any ${filter} submissions yet.`}\n              </p>\n              {filter === 'all' && (\n                <Link href=\"/problems\">\n                  <Button className=\"dumbbell-btn bg-primary text-primary-foreground hover:bg-primary/90\" data-testid=\"button-start-solving\">\n                    Start Solving Problems\n                  </Button>\n                </Link>\n              )}\n            </CardContent>\n          </Card>\n        ) : (\n          <div className=\"space-y-4\">\n            {filteredSubmissions.map((submission, index) => (\n              <Card key={submission.id} className=\"hover:shadow-md transition-shadow\" data-testid={`submission-${index}`}>\n                <CardContent className=\"p-6\">\n                  <div className=\"flex items-start justify-between\">\n                    <div className=\"flex-1\">\n                      {/* Header */}\n                      <div className=\"flex items-center space-x-3 mb-3\">\n                        <div className={`flex items-center justify-center w-8 h-8 rounded-full ${\n                          submission.isCorrect ? 'bg-green-100' : 'bg-red-100'\n                        }`}>\n                          {submission.isCorrect ? (\n                            <CheckCircle className=\"w-5 h-5 text-green-600\" />\n                          ) : (\n                            <XCircle className=\"w-5 h-5 text-red-600\" />\n                          )}\n                        </div>\n                        \n                        <div className=\"flex-1\">\n                          <Link href={`/problems/${submission.problemId}`}>\n                            <h3 className=\"font-semibold text-foreground hover:text-primary transition-colors cursor-pointer\" data-testid={`text-problem-title-${index}`}>\n                              {getProblemTitle(submission.problemId)}\n                            </h3>\n                          </Link>\n                          <div className=\"flex items-center space-x-3 mt-1\">\n                            <Badge className={getDifficultyColor(getProblemDifficulty(submission.problemId))}>\n                              {getProblemDifficulty(submission.problemId)}\n                            </Badge>\n                            <div className=\"flex items-center space-x-1 text-sm text-muted-foreground\">\n                              <Clock className=\"w-3 h-3\" />\n                              <span data-testid={`text-submission-date-${index}`}>\n                                {formatDate(submission.submittedAt)}\n                              </span>\n                            </div>\n                            {submission.executionTime && (\n                              <span className=\"text-sm text-muted-foreground\" data-testid={`text-execution-time-${index}`}>\n                                {submission.executionTime}ms\n                              </span>\n                            )}\n                          </div>\n                        </div>\n                      </div>\n\n                      {/* Query Preview */}\n                      <div className=\"bg-muted rounded-lg p-3 mb-3\">\n                        <div className=\"flex items-center justify-between mb-2\">\n                          <span className=\"text-sm font-medium text-foreground\">SQL Query</span>\n                          <Badge variant=\"outline\" className={\n                            submission.isCorrect ? 'text-green-700 border-green-300' : 'text-red-700 border-red-300'\n                          }>\n                            {submission.isCorrect ? 'Correct' : 'Incorrect'}\n                          </Badge>\n                        </div>\n                        <pre className=\"text-sm text-muted-foreground font-mono overflow-x-auto\">\n                          <code data-testid={`code-query-${index}`}>\n                            {truncateQuery(submission.query)}\n                          </code>\n                        </pre>\n                        {submission.query.length > 100 && (\n                          <Button \n                            variant=\"ghost\" \n                            size=\"sm\" \n                            className=\"mt-2 text-primary hover:bg-primary/10\"\n                            data-testid={`button-view-full-${index}`}\n                          >\n                            View Full Query\n                          </Button>\n                        )}\n                      </div>\n                    </div>\n\n                    {/* Actions */}\n                    <div className=\"ml-4 flex flex-col space-y-2\">\n                      <Link href={`/problems/${submission.problemId}`}>\n                        <Button \n                          variant=\"outline\" \n                          size=\"sm\"\n                          className=\"w-full\"\n                          data-testid={`button-view-problem-${index}`}\n                        >\n                          View Problem\n                          <ArrowRight className=\"ml-2 w-3 h-3\" />\n                        </Button>\n                      </Link>\n                      \n                      {!submission.isCorrect && (\n                        <Link href={`/problems/${submission.problemId}`}>\n                          <Button \n                            variant=\"outline\" \n                            size=\"sm\"\n                            className=\"w-full text-primary border-primary hover:bg-primary/10\"\n                            data-testid={`button-retry-${index}`}\n                          >\n                            Try Again\n                          </Button>\n                        </Link>\n                      )}\n                    </div>\n                  </div>\n                </CardContent>\n              </Card>\n            ))}\n          </div>\n        )}\n\n        {/* Performance Insights */}\n        {submissions && submissions.length > 0 && (\n          <Card className=\"mt-8\">\n            <CardHeader>\n              <CardTitle className=\"flex items-center space-x-2\">\n                <Clock className=\"w-5 h-5 text-primary\" />\n                <span>Performance Insights</span>\n              </CardTitle>\n            </CardHeader>\n            <CardContent>\n              <div className=\"grid md:grid-cols-2 gap-8\">\n                <div>\n                  <h4 className=\"font-semibold text-foreground mb-3\">Recent Progress</h4>\n                  <div className=\"space-y-2\">\n                    <div className=\"flex justify-between text-sm\">\n                      <span className=\"text-muted-foreground\">This week</span>\n                      <span className=\"font-medium\">{submissions.filter(s => {\n                        const weekAgo = new Date();\n                        weekAgo.setDate(weekAgo.getDate() - 7);\n                        return new Date(s.submittedAt) > weekAgo;\n                      }).length} submissions</span>\n                    </div>\n                    <div className=\"flex justify-between text-sm\">\n                      <span className=\"text-muted-foreground\">Best streak</span>\n                      <span className=\"font-medium\">5 correct in a row</span>\n                    </div>\n                    <div className=\"flex justify-between text-sm\">\n                      <span className=\"text-muted-foreground\">Fastest solution</span>\n                      <span className=\"font-medium\">\n                        {Math.min(...submissions.map(s => s.executionTime || Infinity))}ms\n                      </span>\n                    </div>\n                  </div>\n                </div>\n                \n                <div>\n                  <h4 className=\"font-semibold text-foreground mb-3\">Areas to Improve</h4>\n                  <div className=\"space-y-2 text-sm text-muted-foreground\">\n                    <p>• Focus on Medium difficulty problems to build confidence</p>\n                    <p>• Practice window functions and CTEs</p>\n                    <p>• Review query optimization techniques</p>\n                  </div>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n        )}\n      </div>\n    </div>\n  );\n}\n","size_bytes":15963},"client/src/components/ui/accordion.tsx":{"content":"import * as React from \"react\"\nimport * as AccordionPrimitive from \"@radix-ui/react-accordion\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Accordion = AccordionPrimitive.Root\n\nconst AccordionItem = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <AccordionPrimitive.Item\n    ref={ref}\n    className={cn(\"border-b\", className)}\n    {...props}\n  />\n))\nAccordionItem.displayName = \"AccordionItem\"\n\nconst AccordionTrigger = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Header className=\"flex\">\n    <AccordionPrimitive.Trigger\n      ref={ref}\n      className={cn(\n        \"flex flex-1 items-center justify-between py-4 font-medium transition-all hover:underline [&[data-state=open]>svg]:rotate-180\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <ChevronDown className=\"h-4 w-4 shrink-0 transition-transform duration-200\" />\n    </AccordionPrimitive.Trigger>\n  </AccordionPrimitive.Header>\n))\nAccordionTrigger.displayName = AccordionPrimitive.Trigger.displayName\n\nconst AccordionContent = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Content\n    ref={ref}\n    className=\"overflow-hidden text-sm transition-all data-[state=closed]:animate-accordion-up data-[state=open]:animate-accordion-down\"\n    {...props}\n  >\n    <div className={cn(\"pb-4 pt-0\", className)}>{children}</div>\n  </AccordionPrimitive.Content>\n))\n\nAccordionContent.displayName = AccordionPrimitive.Content.displayName\n\nexport { Accordion, AccordionItem, AccordionTrigger, AccordionContent }\n","size_bytes":1977},"client/src/components/ui/alert-dialog.tsx":{"content":"import * as React from \"react\"\nimport * as AlertDialogPrimitive from \"@radix-ui/react-alert-dialog\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nconst AlertDialog = AlertDialogPrimitive.Root\n\nconst AlertDialogTrigger = AlertDialogPrimitive.Trigger\n\nconst AlertDialogPortal = AlertDialogPrimitive.Portal\n\nconst AlertDialogOverlay = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nAlertDialogOverlay.displayName = AlertDialogPrimitive.Overlay.displayName\n\nconst AlertDialogContent = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPortal>\n    <AlertDialogOverlay />\n    <AlertDialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    />\n  </AlertDialogPortal>\n))\nAlertDialogContent.displayName = AlertDialogPrimitive.Content.displayName\n\nconst AlertDialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogHeader.displayName = \"AlertDialogHeader\"\n\nconst AlertDialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogFooter.displayName = \"AlertDialogFooter\"\n\nconst AlertDialogTitle = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold\", className)}\n    {...props}\n  />\n))\nAlertDialogTitle.displayName = AlertDialogPrimitive.Title.displayName\n\nconst AlertDialogDescription = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nAlertDialogDescription.displayName =\n  AlertDialogPrimitive.Description.displayName\n\nconst AlertDialogAction = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Action>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Action>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Action\n    ref={ref}\n    className={cn(buttonVariants(), className)}\n    {...props}\n  />\n))\nAlertDialogAction.displayName = AlertDialogPrimitive.Action.displayName\n\nconst AlertDialogCancel = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Cancel>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Cancel>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Cancel\n    ref={ref}\n    className={cn(\n      buttonVariants({ variant: \"outline\" }),\n      \"mt-2 sm:mt-0\",\n      className\n    )}\n    {...props}\n  />\n))\nAlertDialogCancel.displayName = AlertDialogPrimitive.Cancel.displayName\n\nexport {\n  AlertDialog,\n  AlertDialogPortal,\n  AlertDialogOverlay,\n  AlertDialogTrigger,\n  AlertDialogContent,\n  AlertDialogHeader,\n  AlertDialogFooter,\n  AlertDialogTitle,\n  AlertDialogDescription,\n  AlertDialogAction,\n  AlertDialogCancel,\n}\n","size_bytes":4420},"client/src/components/ui/alert.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst alertVariants = cva(\n  \"relative w-full rounded-lg border p-4 [&>svg~*]:pl-7 [&>svg+div]:translate-y-[-3px] [&>svg]:absolute [&>svg]:left-4 [&>svg]:top-4 [&>svg]:text-foreground\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-background text-foreground\",\n        destructive:\n          \"border-destructive/50 text-destructive dark:border-destructive [&>svg]:text-destructive\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Alert = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & VariantProps<typeof alertVariants>\n>(({ className, variant, ...props }, ref) => (\n  <div\n    ref={ref}\n    role=\"alert\"\n    className={cn(alertVariants({ variant }), className)}\n    {...props}\n  />\n))\nAlert.displayName = \"Alert\"\n\nconst AlertTitle = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLHeadingElement>\n>(({ className, ...props }, ref) => (\n  <h5\n    ref={ref}\n    className={cn(\"mb-1 font-medium leading-none tracking-tight\", className)}\n    {...props}\n  />\n))\nAlertTitle.displayName = \"AlertTitle\"\n\nconst AlertDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm [&_p]:leading-relaxed\", className)}\n    {...props}\n  />\n))\nAlertDescription.displayName = \"AlertDescription\"\n\nexport { Alert, AlertTitle, AlertDescription }\n","size_bytes":1584},"client/src/components/ui/aspect-ratio.tsx":{"content":"import * as AspectRatioPrimitive from \"@radix-ui/react-aspect-ratio\"\n\nconst AspectRatio = AspectRatioPrimitive.Root\n\nexport { AspectRatio }\n","size_bytes":140},"client/src/components/ui/avatar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as AvatarPrimitive from \"@radix-ui/react-avatar\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Avatar = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex h-10 w-10 shrink-0 overflow-hidden rounded-full\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatar.displayName = AvatarPrimitive.Root.displayName\n\nconst AvatarImage = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Image>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Image>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Image\n    ref={ref}\n    className={cn(\"aspect-square h-full w-full\", className)}\n    {...props}\n  />\n))\nAvatarImage.displayName = AvatarPrimitive.Image.displayName\n\nconst AvatarFallback = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Fallback>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Fallback>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Fallback\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full items-center justify-center rounded-full bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatarFallback.displayName = AvatarPrimitive.Fallback.displayName\n\nexport { Avatar, AvatarImage, AvatarFallback }\n","size_bytes":1419},"client/src/components/ui/badge.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst badgeVariants = cva(\n  \"inline-flex items-center rounded-full border px-2.5 py-0.5 text-xs font-semibold transition-colors focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2\",\n  {\n    variants: {\n      variant: {\n        default:\n          \"border-transparent bg-primary text-primary-foreground hover:bg-primary/80\",\n        secondary:\n          \"border-transparent bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        destructive:\n          \"border-transparent bg-destructive text-destructive-foreground hover:bg-destructive/80\",\n        outline: \"text-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nexport interface BadgeProps\n  extends React.HTMLAttributes<HTMLDivElement>,\n    VariantProps<typeof badgeVariants> {}\n\nfunction Badge({ className, variant, ...props }: BadgeProps) {\n  return (\n    <div className={cn(badgeVariants({ variant }), className)} {...props} />\n  )\n}\n\nexport { Badge, badgeVariants }\n","size_bytes":1128},"client/src/components/ui/breadcrumb.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Breadcrumb = React.forwardRef<\n  HTMLElement,\n  React.ComponentPropsWithoutRef<\"nav\"> & {\n    separator?: React.ReactNode\n  }\n>(({ ...props }, ref) => <nav ref={ref} aria-label=\"breadcrumb\" {...props} />)\nBreadcrumb.displayName = \"Breadcrumb\"\n\nconst BreadcrumbList = React.forwardRef<\n  HTMLOListElement,\n  React.ComponentPropsWithoutRef<\"ol\">\n>(({ className, ...props }, ref) => (\n  <ol\n    ref={ref}\n    className={cn(\n      \"flex flex-wrap items-center gap-1.5 break-words text-sm text-muted-foreground sm:gap-2.5\",\n      className\n    )}\n    {...props}\n  />\n))\nBreadcrumbList.displayName = \"BreadcrumbList\"\n\nconst BreadcrumbItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentPropsWithoutRef<\"li\">\n>(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    className={cn(\"inline-flex items-center gap-1.5\", className)}\n    {...props}\n  />\n))\nBreadcrumbItem.displayName = \"BreadcrumbItem\"\n\nconst BreadcrumbLink = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentPropsWithoutRef<\"a\"> & {\n    asChild?: boolean\n  }\n>(({ asChild, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      ref={ref}\n      className={cn(\"transition-colors hover:text-foreground\", className)}\n      {...props}\n    />\n  )\n})\nBreadcrumbLink.displayName = \"BreadcrumbLink\"\n\nconst BreadcrumbPage = React.forwardRef<\n  HTMLSpanElement,\n  React.ComponentPropsWithoutRef<\"span\">\n>(({ className, ...props }, ref) => (\n  <span\n    ref={ref}\n    role=\"link\"\n    aria-disabled=\"true\"\n    aria-current=\"page\"\n    className={cn(\"font-normal text-foreground\", className)}\n    {...props}\n  />\n))\nBreadcrumbPage.displayName = \"BreadcrumbPage\"\n\nconst BreadcrumbSeparator = ({\n  children,\n  className,\n  ...props\n}: React.ComponentProps<\"li\">) => (\n  <li\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"[&>svg]:w-3.5 [&>svg]:h-3.5\", className)}\n    {...props}\n  >\n    {children ?? <ChevronRight />}\n  </li>\n)\nBreadcrumbSeparator.displayName = \"BreadcrumbSeparator\"\n\nconst BreadcrumbEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More</span>\n  </span>\n)\nBreadcrumbEllipsis.displayName = \"BreadcrumbElipssis\"\n\nexport {\n  Breadcrumb,\n  BreadcrumbList,\n  BreadcrumbItem,\n  BreadcrumbLink,\n  BreadcrumbPage,\n  BreadcrumbSeparator,\n  BreadcrumbEllipsis,\n}\n","size_bytes":2712},"client/src/components/ui/button.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst buttonVariants = cva(\n  \"inline-flex items-center justify-center gap-2 whitespace-nowrap rounded-md text-sm font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-primary text-primary-foreground hover:bg-primary/90\",\n        destructive:\n          \"bg-destructive text-destructive-foreground hover:bg-destructive/90\",\n        outline:\n          \"border border-input bg-background hover:bg-accent hover:text-accent-foreground\",\n        secondary:\n          \"bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        ghost: \"hover:bg-accent hover:text-accent-foreground\",\n        link: \"text-primary underline-offset-4 hover:underline\",\n      },\n      size: {\n        default: \"h-10 px-4 py-2\",\n        sm: \"h-9 rounded-md px-3\",\n        lg: \"h-11 rounded-md px-8\",\n        icon: \"h-10 w-10\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nexport interface ButtonProps\n  extends React.ButtonHTMLAttributes<HTMLButtonElement>,\n    VariantProps<typeof buttonVariants> {\n  asChild?: boolean\n}\n\nconst Button = React.forwardRef<HTMLButtonElement, ButtonProps>(\n  ({ className, variant, size, asChild = false, ...props }, ref) => {\n    const Comp = asChild ? Slot : \"button\"\n    return (\n      <Comp\n        className={cn(buttonVariants({ variant, size, className }))}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nButton.displayName = \"Button\"\n\nexport { Button, buttonVariants }\n","size_bytes":1901},"client/src/components/ui/calendar.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight } from \"lucide-react\"\nimport { DayPicker } from \"react-day-picker\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nexport type CalendarProps = React.ComponentProps<typeof DayPicker>\n\nfunction Calendar({\n  className,\n  classNames,\n  showOutsideDays = true,\n  ...props\n}: CalendarProps) {\n  return (\n    <DayPicker\n      showOutsideDays={showOutsideDays}\n      className={cn(\"p-3\", className)}\n      classNames={{\n        months: \"flex flex-col sm:flex-row space-y-4 sm:space-x-4 sm:space-y-0\",\n        month: \"space-y-4\",\n        caption: \"flex justify-center pt-1 relative items-center\",\n        caption_label: \"text-sm font-medium\",\n        nav: \"space-x-1 flex items-center\",\n        nav_button: cn(\n          buttonVariants({ variant: \"outline\" }),\n          \"h-7 w-7 bg-transparent p-0 opacity-50 hover:opacity-100\"\n        ),\n        nav_button_previous: \"absolute left-1\",\n        nav_button_next: \"absolute right-1\",\n        table: \"w-full border-collapse space-y-1\",\n        head_row: \"flex\",\n        head_cell:\n          \"text-muted-foreground rounded-md w-9 font-normal text-[0.8rem]\",\n        row: \"flex w-full mt-2\",\n        cell: \"h-9 w-9 text-center text-sm p-0 relative [&:has([aria-selected].day-range-end)]:rounded-r-md [&:has([aria-selected].day-outside)]:bg-accent/50 [&:has([aria-selected])]:bg-accent first:[&:has([aria-selected])]:rounded-l-md last:[&:has([aria-selected])]:rounded-r-md focus-within:relative focus-within:z-20\",\n        day: cn(\n          buttonVariants({ variant: \"ghost\" }),\n          \"h-9 w-9 p-0 font-normal aria-selected:opacity-100\"\n        ),\n        day_range_end: \"day-range-end\",\n        day_selected:\n          \"bg-primary text-primary-foreground hover:bg-primary hover:text-primary-foreground focus:bg-primary focus:text-primary-foreground\",\n        day_today: \"bg-accent text-accent-foreground\",\n        day_outside:\n          \"day-outside text-muted-foreground aria-selected:bg-accent/50 aria-selected:text-muted-foreground\",\n        day_disabled: \"text-muted-foreground opacity-50\",\n        day_range_middle:\n          \"aria-selected:bg-accent aria-selected:text-accent-foreground\",\n        day_hidden: \"invisible\",\n        ...classNames,\n      }}\n      components={{\n        IconLeft: ({ className, ...props }) => (\n          <ChevronLeft className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n        IconRight: ({ className, ...props }) => (\n          <ChevronRight className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n      }}\n      {...props}\n    />\n  )\n}\nCalendar.displayName = \"Calendar\"\n\nexport { Calendar }\n","size_bytes":2695},"client/src/components/ui/card.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Card = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"rounded-lg border bg-card text-card-foreground shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nCard.displayName = \"Card\"\n\nconst CardHeader = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex flex-col space-y-1.5 p-6\", className)}\n    {...props}\n  />\n))\nCardHeader.displayName = \"CardHeader\"\n\nconst CardTitle = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"text-2xl font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nCardTitle.displayName = \"CardTitle\"\n\nconst CardDescription = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nCardDescription.displayName = \"CardDescription\"\n\nconst CardContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"p-6 pt-0\", className)} {...props} />\n))\nCardContent.displayName = \"CardContent\"\n\nconst CardFooter = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex items-center p-6 pt-0\", className)}\n    {...props}\n  />\n))\nCardFooter.displayName = \"CardFooter\"\n\nexport { Card, CardHeader, CardFooter, CardTitle, CardDescription, CardContent }\n","size_bytes":1858},"client/src/components/ui/carousel.tsx":{"content":"import * as React from \"react\"\nimport useEmblaCarousel, {\n  type UseEmblaCarouselType,\n} from \"embla-carousel-react\"\nimport { ArrowLeft, ArrowRight } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\n\ntype CarouselApi = UseEmblaCarouselType[1]\ntype UseCarouselParameters = Parameters<typeof useEmblaCarousel>\ntype CarouselOptions = UseCarouselParameters[0]\ntype CarouselPlugin = UseCarouselParameters[1]\n\ntype CarouselProps = {\n  opts?: CarouselOptions\n  plugins?: CarouselPlugin\n  orientation?: \"horizontal\" | \"vertical\"\n  setApi?: (api: CarouselApi) => void\n}\n\ntype CarouselContextProps = {\n  carouselRef: ReturnType<typeof useEmblaCarousel>[0]\n  api: ReturnType<typeof useEmblaCarousel>[1]\n  scrollPrev: () => void\n  scrollNext: () => void\n  canScrollPrev: boolean\n  canScrollNext: boolean\n} & CarouselProps\n\nconst CarouselContext = React.createContext<CarouselContextProps | null>(null)\n\nfunction useCarousel() {\n  const context = React.useContext(CarouselContext)\n\n  if (!context) {\n    throw new Error(\"useCarousel must be used within a <Carousel />\")\n  }\n\n  return context\n}\n\nconst Carousel = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & CarouselProps\n>(\n  (\n    {\n      orientation = \"horizontal\",\n      opts,\n      setApi,\n      plugins,\n      className,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const [carouselRef, api] = useEmblaCarousel(\n      {\n        ...opts,\n        axis: orientation === \"horizontal\" ? \"x\" : \"y\",\n      },\n      plugins\n    )\n    const [canScrollPrev, setCanScrollPrev] = React.useState(false)\n    const [canScrollNext, setCanScrollNext] = React.useState(false)\n\n    const onSelect = React.useCallback((api: CarouselApi) => {\n      if (!api) {\n        return\n      }\n\n      setCanScrollPrev(api.canScrollPrev())\n      setCanScrollNext(api.canScrollNext())\n    }, [])\n\n    const scrollPrev = React.useCallback(() => {\n      api?.scrollPrev()\n    }, [api])\n\n    const scrollNext = React.useCallback(() => {\n      api?.scrollNext()\n    }, [api])\n\n    const handleKeyDown = React.useCallback(\n      (event: React.KeyboardEvent<HTMLDivElement>) => {\n        if (event.key === \"ArrowLeft\") {\n          event.preventDefault()\n          scrollPrev()\n        } else if (event.key === \"ArrowRight\") {\n          event.preventDefault()\n          scrollNext()\n        }\n      },\n      [scrollPrev, scrollNext]\n    )\n\n    React.useEffect(() => {\n      if (!api || !setApi) {\n        return\n      }\n\n      setApi(api)\n    }, [api, setApi])\n\n    React.useEffect(() => {\n      if (!api) {\n        return\n      }\n\n      onSelect(api)\n      api.on(\"reInit\", onSelect)\n      api.on(\"select\", onSelect)\n\n      return () => {\n        api?.off(\"select\", onSelect)\n      }\n    }, [api, onSelect])\n\n    return (\n      <CarouselContext.Provider\n        value={{\n          carouselRef,\n          api: api,\n          opts,\n          orientation:\n            orientation || (opts?.axis === \"y\" ? \"vertical\" : \"horizontal\"),\n          scrollPrev,\n          scrollNext,\n          canScrollPrev,\n          canScrollNext,\n        }}\n      >\n        <div\n          ref={ref}\n          onKeyDownCapture={handleKeyDown}\n          className={cn(\"relative\", className)}\n          role=\"region\"\n          aria-roledescription=\"carousel\"\n          {...props}\n        >\n          {children}\n        </div>\n      </CarouselContext.Provider>\n    )\n  }\n)\nCarousel.displayName = \"Carousel\"\n\nconst CarouselContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { carouselRef, orientation } = useCarousel()\n\n  return (\n    <div ref={carouselRef} className=\"overflow-hidden\">\n      <div\n        ref={ref}\n        className={cn(\n          \"flex\",\n          orientation === \"horizontal\" ? \"-ml-4\" : \"-mt-4 flex-col\",\n          className\n        )}\n        {...props}\n      />\n    </div>\n  )\n})\nCarouselContent.displayName = \"CarouselContent\"\n\nconst CarouselItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { orientation } = useCarousel()\n\n  return (\n    <div\n      ref={ref}\n      role=\"group\"\n      aria-roledescription=\"slide\"\n      className={cn(\n        \"min-w-0 shrink-0 grow-0 basis-full\",\n        orientation === \"horizontal\" ? \"pl-4\" : \"pt-4\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nCarouselItem.displayName = \"CarouselItem\"\n\nconst CarouselPrevious = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollPrev, canScrollPrev } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute  h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-left-12 top-1/2 -translate-y-1/2\"\n          : \"-top-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollPrev}\n      onClick={scrollPrev}\n      {...props}\n    >\n      <ArrowLeft className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Previous slide</span>\n    </Button>\n  )\n})\nCarouselPrevious.displayName = \"CarouselPrevious\"\n\nconst CarouselNext = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollNext, canScrollNext } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-right-12 top-1/2 -translate-y-1/2\"\n          : \"-bottom-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollNext}\n      onClick={scrollNext}\n      {...props}\n    >\n      <ArrowRight className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Next slide</span>\n    </Button>\n  )\n})\nCarouselNext.displayName = \"CarouselNext\"\n\nexport {\n  type CarouselApi,\n  Carousel,\n  CarouselContent,\n  CarouselItem,\n  CarouselPrevious,\n  CarouselNext,\n}\n","size_bytes":6210},"client/src/components/ui/chart.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as RechartsPrimitive from \"recharts\"\n\nimport { cn } from \"@/lib/utils\"\n\n// Format: { THEME_NAME: CSS_SELECTOR }\nconst THEMES = { light: \"\", dark: \".dark\" } as const\n\nexport type ChartConfig = {\n  [k in string]: {\n    label?: React.ReactNode\n    icon?: React.ComponentType\n  } & (\n    | { color?: string; theme?: never }\n    | { color?: never; theme: Record<keyof typeof THEMES, string> }\n  )\n}\n\ntype ChartContextProps = {\n  config: ChartConfig\n}\n\nconst ChartContext = React.createContext<ChartContextProps | null>(null)\n\nfunction useChart() {\n  const context = React.useContext(ChartContext)\n\n  if (!context) {\n    throw new Error(\"useChart must be used within a <ChartContainer />\")\n  }\n\n  return context\n}\n\nconst ChartContainer = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    config: ChartConfig\n    children: React.ComponentProps<\n      typeof RechartsPrimitive.ResponsiveContainer\n    >[\"children\"]\n  }\n>(({ id, className, children, config, ...props }, ref) => {\n  const uniqueId = React.useId()\n  const chartId = `chart-${id || uniqueId.replace(/:/g, \"\")}`\n\n  return (\n    <ChartContext.Provider value={{ config }}>\n      <div\n        data-chart={chartId}\n        ref={ref}\n        className={cn(\n          \"flex aspect-video justify-center text-xs [&_.recharts-cartesian-axis-tick_text]:fill-muted-foreground [&_.recharts-cartesian-grid_line[stroke='#ccc']]:stroke-border/50 [&_.recharts-curve.recharts-tooltip-cursor]:stroke-border [&_.recharts-dot[stroke='#fff']]:stroke-transparent [&_.recharts-layer]:outline-none [&_.recharts-polar-grid_[stroke='#ccc']]:stroke-border [&_.recharts-radial-bar-background-sector]:fill-muted [&_.recharts-rectangle.recharts-tooltip-cursor]:fill-muted [&_.recharts-reference-line_[stroke='#ccc']]:stroke-border [&_.recharts-sector[stroke='#fff']]:stroke-transparent [&_.recharts-sector]:outline-none [&_.recharts-surface]:outline-none\",\n          className\n        )}\n        {...props}\n      >\n        <ChartStyle id={chartId} config={config} />\n        <RechartsPrimitive.ResponsiveContainer>\n          {children}\n        </RechartsPrimitive.ResponsiveContainer>\n      </div>\n    </ChartContext.Provider>\n  )\n})\nChartContainer.displayName = \"Chart\"\n\nconst ChartStyle = ({ id, config }: { id: string; config: ChartConfig }) => {\n  const colorConfig = Object.entries(config).filter(\n    ([, config]) => config.theme || config.color\n  )\n\n  if (!colorConfig.length) {\n    return null\n  }\n\n  return (\n    <style\n      dangerouslySetInnerHTML={{\n        __html: Object.entries(THEMES)\n          .map(\n            ([theme, prefix]) => `\n${prefix} [data-chart=${id}] {\n${colorConfig\n  .map(([key, itemConfig]) => {\n    const color =\n      itemConfig.theme?.[theme as keyof typeof itemConfig.theme] ||\n      itemConfig.color\n    return color ? `  --color-${key}: ${color};` : null\n  })\n  .join(\"\\n\")}\n}\n`\n          )\n          .join(\"\\n\"),\n      }}\n    />\n  )\n}\n\nconst ChartTooltip = RechartsPrimitive.Tooltip\n\nconst ChartTooltipContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<typeof RechartsPrimitive.Tooltip> &\n    React.ComponentProps<\"div\"> & {\n      hideLabel?: boolean\n      hideIndicator?: boolean\n      indicator?: \"line\" | \"dot\" | \"dashed\"\n      nameKey?: string\n      labelKey?: string\n    }\n>(\n  (\n    {\n      active,\n      payload,\n      className,\n      indicator = \"dot\",\n      hideLabel = false,\n      hideIndicator = false,\n      label,\n      labelFormatter,\n      labelClassName,\n      formatter,\n      color,\n      nameKey,\n      labelKey,\n    },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    const tooltipLabel = React.useMemo(() => {\n      if (hideLabel || !payload?.length) {\n        return null\n      }\n\n      const [item] = payload\n      const key = `${labelKey || item?.dataKey || item?.name || \"value\"}`\n      const itemConfig = getPayloadConfigFromPayload(config, item, key)\n      const value =\n        !labelKey && typeof label === \"string\"\n          ? config[label as keyof typeof config]?.label || label\n          : itemConfig?.label\n\n      if (labelFormatter) {\n        return (\n          <div className={cn(\"font-medium\", labelClassName)}>\n            {labelFormatter(value, payload)}\n          </div>\n        )\n      }\n\n      if (!value) {\n        return null\n      }\n\n      return <div className={cn(\"font-medium\", labelClassName)}>{value}</div>\n    }, [\n      label,\n      labelFormatter,\n      payload,\n      hideLabel,\n      labelClassName,\n      config,\n      labelKey,\n    ])\n\n    if (!active || !payload?.length) {\n      return null\n    }\n\n    const nestLabel = payload.length === 1 && indicator !== \"dot\"\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"grid min-w-[8rem] items-start gap-1.5 rounded-lg border border-border/50 bg-background px-2.5 py-1.5 text-xs shadow-xl\",\n          className\n        )}\n      >\n        {!nestLabel ? tooltipLabel : null}\n        <div className=\"grid gap-1.5\">\n          {payload.map((item, index) => {\n            const key = `${nameKey || item.name || item.dataKey || \"value\"}`\n            const itemConfig = getPayloadConfigFromPayload(config, item, key)\n            const indicatorColor = color || item.payload.fill || item.color\n\n            return (\n              <div\n                key={item.dataKey}\n                className={cn(\n                  \"flex w-full flex-wrap items-stretch gap-2 [&>svg]:h-2.5 [&>svg]:w-2.5 [&>svg]:text-muted-foreground\",\n                  indicator === \"dot\" && \"items-center\"\n                )}\n              >\n                {formatter && item?.value !== undefined && item.name ? (\n                  formatter(item.value, item.name, item, index, item.payload)\n                ) : (\n                  <>\n                    {itemConfig?.icon ? (\n                      <itemConfig.icon />\n                    ) : (\n                      !hideIndicator && (\n                        <div\n                          className={cn(\n                            \"shrink-0 rounded-[2px] border-[--color-border] bg-[--color-bg]\",\n                            {\n                              \"h-2.5 w-2.5\": indicator === \"dot\",\n                              \"w-1\": indicator === \"line\",\n                              \"w-0 border-[1.5px] border-dashed bg-transparent\":\n                                indicator === \"dashed\",\n                              \"my-0.5\": nestLabel && indicator === \"dashed\",\n                            }\n                          )}\n                          style={\n                            {\n                              \"--color-bg\": indicatorColor,\n                              \"--color-border\": indicatorColor,\n                            } as React.CSSProperties\n                          }\n                        />\n                      )\n                    )}\n                    <div\n                      className={cn(\n                        \"flex flex-1 justify-between leading-none\",\n                        nestLabel ? \"items-end\" : \"items-center\"\n                      )}\n                    >\n                      <div className=\"grid gap-1.5\">\n                        {nestLabel ? tooltipLabel : null}\n                        <span className=\"text-muted-foreground\">\n                          {itemConfig?.label || item.name}\n                        </span>\n                      </div>\n                      {item.value && (\n                        <span className=\"font-mono font-medium tabular-nums text-foreground\">\n                          {item.value.toLocaleString()}\n                        </span>\n                      )}\n                    </div>\n                  </>\n                )}\n              </div>\n            )\n          })}\n        </div>\n      </div>\n    )\n  }\n)\nChartTooltipContent.displayName = \"ChartTooltip\"\n\nconst ChartLegend = RechartsPrimitive.Legend\n\nconst ChartLegendContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> &\n    Pick<RechartsPrimitive.LegendProps, \"payload\" | \"verticalAlign\"> & {\n      hideIcon?: boolean\n      nameKey?: string\n    }\n>(\n  (\n    { className, hideIcon = false, payload, verticalAlign = \"bottom\", nameKey },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    if (!payload?.length) {\n      return null\n    }\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"flex items-center justify-center gap-4\",\n          verticalAlign === \"top\" ? \"pb-3\" : \"pt-3\",\n          className\n        )}\n      >\n        {payload.map((item) => {\n          const key = `${nameKey || item.dataKey || \"value\"}`\n          const itemConfig = getPayloadConfigFromPayload(config, item, key)\n\n          return (\n            <div\n              key={item.value}\n              className={cn(\n                \"flex items-center gap-1.5 [&>svg]:h-3 [&>svg]:w-3 [&>svg]:text-muted-foreground\"\n              )}\n            >\n              {itemConfig?.icon && !hideIcon ? (\n                <itemConfig.icon />\n              ) : (\n                <div\n                  className=\"h-2 w-2 shrink-0 rounded-[2px]\"\n                  style={{\n                    backgroundColor: item.color,\n                  }}\n                />\n              )}\n              {itemConfig?.label}\n            </div>\n          )\n        })}\n      </div>\n    )\n  }\n)\nChartLegendContent.displayName = \"ChartLegend\"\n\n// Helper to extract item config from a payload.\nfunction getPayloadConfigFromPayload(\n  config: ChartConfig,\n  payload: unknown,\n  key: string\n) {\n  if (typeof payload !== \"object\" || payload === null) {\n    return undefined\n  }\n\n  const payloadPayload =\n    \"payload\" in payload &&\n    typeof payload.payload === \"object\" &&\n    payload.payload !== null\n      ? payload.payload\n      : undefined\n\n  let configLabelKey: string = key\n\n  if (\n    key in payload &&\n    typeof payload[key as keyof typeof payload] === \"string\"\n  ) {\n    configLabelKey = payload[key as keyof typeof payload] as string\n  } else if (\n    payloadPayload &&\n    key in payloadPayload &&\n    typeof payloadPayload[key as keyof typeof payloadPayload] === \"string\"\n  ) {\n    configLabelKey = payloadPayload[\n      key as keyof typeof payloadPayload\n    ] as string\n  }\n\n  return configLabelKey in config\n    ? config[configLabelKey]\n    : config[key as keyof typeof config]\n}\n\nexport {\n  ChartContainer,\n  ChartTooltip,\n  ChartTooltipContent,\n  ChartLegend,\n  ChartLegendContent,\n  ChartStyle,\n}\n","size_bytes":10481},"client/src/components/ui/checkbox.tsx":{"content":"import * as React from \"react\"\nimport * as CheckboxPrimitive from \"@radix-ui/react-checkbox\"\nimport { Check } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Checkbox = React.forwardRef<\n  React.ElementRef<typeof CheckboxPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof CheckboxPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <CheckboxPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"peer h-4 w-4 shrink-0 rounded-sm border border-primary ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=checked]:text-primary-foreground\",\n      className\n    )}\n    {...props}\n  >\n    <CheckboxPrimitive.Indicator\n      className={cn(\"flex items-center justify-center text-current\")}\n    >\n      <Check className=\"h-4 w-4\" />\n    </CheckboxPrimitive.Indicator>\n  </CheckboxPrimitive.Root>\n))\nCheckbox.displayName = CheckboxPrimitive.Root.displayName\n\nexport { Checkbox }\n","size_bytes":1056},"client/src/components/ui/collapsible.tsx":{"content":"\"use client\"\n\nimport * as CollapsiblePrimitive from \"@radix-ui/react-collapsible\"\n\nconst Collapsible = CollapsiblePrimitive.Root\n\nconst CollapsibleTrigger = CollapsiblePrimitive.CollapsibleTrigger\n\nconst CollapsibleContent = CollapsiblePrimitive.CollapsibleContent\n\nexport { Collapsible, CollapsibleTrigger, CollapsibleContent }\n","size_bytes":329},"client/src/components/ui/command.tsx":{"content":"import * as React from \"react\"\nimport { type DialogProps } from \"@radix-ui/react-dialog\"\nimport { Command as CommandPrimitive } from \"cmdk\"\nimport { Search } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Dialog, DialogContent } from \"@/components/ui/dialog\"\n\nconst Command = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full flex-col overflow-hidden rounded-md bg-popover text-popover-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nCommand.displayName = CommandPrimitive.displayName\n\nconst CommandDialog = ({ children, ...props }: DialogProps) => {\n  return (\n    <Dialog {...props}>\n      <DialogContent className=\"overflow-hidden p-0 shadow-lg\">\n        <Command className=\"[&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground [&_[cmdk-group]:not([hidden])_~[cmdk-group]]:pt-0 [&_[cmdk-group]]:px-2 [&_[cmdk-input-wrapper]_svg]:h-5 [&_[cmdk-input-wrapper]_svg]:w-5 [&_[cmdk-input]]:h-12 [&_[cmdk-item]]:px-2 [&_[cmdk-item]]:py-3 [&_[cmdk-item]_svg]:h-5 [&_[cmdk-item]_svg]:w-5\">\n          {children}\n        </Command>\n      </DialogContent>\n    </Dialog>\n  )\n}\n\nconst CommandInput = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Input>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Input>\n>(({ className, ...props }, ref) => (\n  <div className=\"flex items-center border-b px-3\" cmdk-input-wrapper=\"\">\n    <Search className=\"mr-2 h-4 w-4 shrink-0 opacity-50\" />\n    <CommandPrimitive.Input\n      ref={ref}\n      className={cn(\n        \"flex h-11 w-full rounded-md bg-transparent py-3 text-sm outline-none placeholder:text-muted-foreground disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    />\n  </div>\n))\n\nCommandInput.displayName = CommandPrimitive.Input.displayName\n\nconst CommandList = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.List\n    ref={ref}\n    className={cn(\"max-h-[300px] overflow-y-auto overflow-x-hidden\", className)}\n    {...props}\n  />\n))\n\nCommandList.displayName = CommandPrimitive.List.displayName\n\nconst CommandEmpty = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Empty>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Empty>\n>((props, ref) => (\n  <CommandPrimitive.Empty\n    ref={ref}\n    className=\"py-6 text-center text-sm\"\n    {...props}\n  />\n))\n\nCommandEmpty.displayName = CommandPrimitive.Empty.displayName\n\nconst CommandGroup = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Group>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Group>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Group\n    ref={ref}\n    className={cn(\n      \"overflow-hidden p-1 text-foreground [&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:py-1.5 [&_[cmdk-group-heading]]:text-xs [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandGroup.displayName = CommandPrimitive.Group.displayName\n\nconst CommandSeparator = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nCommandSeparator.displayName = CommandPrimitive.Separator.displayName\n\nconst CommandItem = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default gap-2 select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none data-[disabled=true]:pointer-events-none data-[selected='true']:bg-accent data-[selected=true]:text-accent-foreground data-[disabled=true]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandItem.displayName = CommandPrimitive.Item.displayName\n\nconst CommandShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nCommandShortcut.displayName = \"CommandShortcut\"\n\nexport {\n  Command,\n  CommandDialog,\n  CommandInput,\n  CommandList,\n  CommandEmpty,\n  CommandGroup,\n  CommandItem,\n  CommandShortcut,\n  CommandSeparator,\n}\n","size_bytes":4885},"client/src/components/ui/context-menu.tsx":{"content":"import * as React from \"react\"\nimport * as ContextMenuPrimitive from \"@radix-ui/react-context-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ContextMenu = ContextMenuPrimitive.Root\n\nconst ContextMenuTrigger = ContextMenuPrimitive.Trigger\n\nconst ContextMenuGroup = ContextMenuPrimitive.Group\n\nconst ContextMenuPortal = ContextMenuPrimitive.Portal\n\nconst ContextMenuSub = ContextMenuPrimitive.Sub\n\nconst ContextMenuRadioGroup = ContextMenuPrimitive.RadioGroup\n\nconst ContextMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <ContextMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </ContextMenuPrimitive.SubTrigger>\n))\nContextMenuSubTrigger.displayName = ContextMenuPrimitive.SubTrigger.displayName\n\nconst ContextMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuSubContent.displayName = ContextMenuPrimitive.SubContent.displayName\n\nconst ContextMenuContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Portal>\n    <ContextMenuPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"z-50 max-h-[--radix-context-menu-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md animate-in fade-in-80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </ContextMenuPrimitive.Portal>\n))\nContextMenuContent.displayName = ContextMenuPrimitive.Content.displayName\n\nconst ContextMenuItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuItem.displayName = ContextMenuPrimitive.Item.displayName\n\nconst ContextMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <ContextMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.CheckboxItem>\n))\nContextMenuCheckboxItem.displayName =\n  ContextMenuPrimitive.CheckboxItem.displayName\n\nconst ContextMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <ContextMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.RadioItem>\n))\nContextMenuRadioItem.displayName = ContextMenuPrimitive.RadioItem.displayName\n\nconst ContextMenuLabel = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold text-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuLabel.displayName = ContextMenuPrimitive.Label.displayName\n\nconst ContextMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nContextMenuSeparator.displayName = ContextMenuPrimitive.Separator.displayName\n\nconst ContextMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nContextMenuShortcut.displayName = \"ContextMenuShortcut\"\n\nexport {\n  ContextMenu,\n  ContextMenuTrigger,\n  ContextMenuContent,\n  ContextMenuItem,\n  ContextMenuCheckboxItem,\n  ContextMenuRadioItem,\n  ContextMenuLabel,\n  ContextMenuSeparator,\n  ContextMenuShortcut,\n  ContextMenuGroup,\n  ContextMenuPortal,\n  ContextMenuSub,\n  ContextMenuSubContent,\n  ContextMenuSubTrigger,\n  ContextMenuRadioGroup,\n}\n","size_bytes":7428},"client/src/components/ui/dialog.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as DialogPrimitive from \"@radix-ui/react-dialog\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Dialog = DialogPrimitive.Root\n\nconst DialogTrigger = DialogPrimitive.Trigger\n\nconst DialogPortal = DialogPrimitive.Portal\n\nconst DialogClose = DialogPrimitive.Close\n\nconst DialogOverlay = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Overlay\n    ref={ref}\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogOverlay.displayName = DialogPrimitive.Overlay.displayName\n\nconst DialogContent = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DialogPortal>\n    <DialogOverlay />\n    <DialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <DialogPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-accent data-[state=open]:text-muted-foreground\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </DialogPrimitive.Close>\n    </DialogPrimitive.Content>\n  </DialogPortal>\n))\nDialogContent.displayName = DialogPrimitive.Content.displayName\n\nconst DialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-1.5 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogHeader.displayName = \"DialogHeader\"\n\nconst DialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogFooter.displayName = \"DialogFooter\"\n\nconst DialogTitle = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogTitle.displayName = DialogPrimitive.Title.displayName\n\nconst DialogDescription = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDialogDescription.displayName = DialogPrimitive.Description.displayName\n\nexport {\n  Dialog,\n  DialogPortal,\n  DialogOverlay,\n  DialogClose,\n  DialogTrigger,\n  DialogContent,\n  DialogHeader,\n  DialogFooter,\n  DialogTitle,\n  DialogDescription,\n}\n","size_bytes":3848},"client/src/components/ui/drawer.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport { Drawer as DrawerPrimitive } from \"vaul\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Drawer = ({\n  shouldScaleBackground = true,\n  ...props\n}: React.ComponentProps<typeof DrawerPrimitive.Root>) => (\n  <DrawerPrimitive.Root\n    shouldScaleBackground={shouldScaleBackground}\n    {...props}\n  />\n)\nDrawer.displayName = \"Drawer\"\n\nconst DrawerTrigger = DrawerPrimitive.Trigger\n\nconst DrawerPortal = DrawerPrimitive.Portal\n\nconst DrawerClose = DrawerPrimitive.Close\n\nconst DrawerOverlay = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Overlay\n    ref={ref}\n    className={cn(\"fixed inset-0 z-50 bg-black/80\", className)}\n    {...props}\n  />\n))\nDrawerOverlay.displayName = DrawerPrimitive.Overlay.displayName\n\nconst DrawerContent = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DrawerPortal>\n    <DrawerOverlay />\n    <DrawerPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed inset-x-0 bottom-0 z-50 mt-24 flex h-auto flex-col rounded-t-[10px] border bg-background\",\n        className\n      )}\n      {...props}\n    >\n      <div className=\"mx-auto mt-4 h-2 w-[100px] rounded-full bg-muted\" />\n      {children}\n    </DrawerPrimitive.Content>\n  </DrawerPortal>\n))\nDrawerContent.displayName = \"DrawerContent\"\n\nconst DrawerHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"grid gap-1.5 p-4 text-center sm:text-left\", className)}\n    {...props}\n  />\n)\nDrawerHeader.displayName = \"DrawerHeader\"\n\nconst DrawerFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"mt-auto flex flex-col gap-2 p-4\", className)}\n    {...props}\n  />\n)\nDrawerFooter.displayName = \"DrawerFooter\"\n\nconst DrawerTitle = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDrawerTitle.displayName = DrawerPrimitive.Title.displayName\n\nconst DrawerDescription = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDrawerDescription.displayName = DrawerPrimitive.Description.displayName\n\nexport {\n  Drawer,\n  DrawerPortal,\n  DrawerOverlay,\n  DrawerTrigger,\n  DrawerClose,\n  DrawerContent,\n  DrawerHeader,\n  DrawerFooter,\n  DrawerTitle,\n  DrawerDescription,\n}\n","size_bytes":3021},"client/src/components/ui/dropdown-menu.tsx":{"content":"import * as React from \"react\"\nimport * as DropdownMenuPrimitive from \"@radix-ui/react-dropdown-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst DropdownMenu = DropdownMenuPrimitive.Root\n\nconst DropdownMenuTrigger = DropdownMenuPrimitive.Trigger\n\nconst DropdownMenuGroup = DropdownMenuPrimitive.Group\n\nconst DropdownMenuPortal = DropdownMenuPrimitive.Portal\n\nconst DropdownMenuSub = DropdownMenuPrimitive.Sub\n\nconst DropdownMenuRadioGroup = DropdownMenuPrimitive.RadioGroup\n\nconst DropdownMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent data-[state=open]:bg-accent [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto\" />\n  </DropdownMenuPrimitive.SubTrigger>\n))\nDropdownMenuSubTrigger.displayName =\n  DropdownMenuPrimitive.SubTrigger.displayName\n\nconst DropdownMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuSubContent.displayName =\n  DropdownMenuPrimitive.SubContent.displayName\n\nconst DropdownMenuContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <DropdownMenuPrimitive.Portal>\n    <DropdownMenuPrimitive.Content\n      ref={ref}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 max-h-[var(--radix-dropdown-menu-content-available-height)] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </DropdownMenuPrimitive.Portal>\n))\nDropdownMenuContent.displayName = DropdownMenuPrimitive.Content.displayName\n\nconst DropdownMenuItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuItem.displayName = DropdownMenuPrimitive.Item.displayName\n\nconst DropdownMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <DropdownMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.CheckboxItem>\n))\nDropdownMenuCheckboxItem.displayName =\n  DropdownMenuPrimitive.CheckboxItem.displayName\n\nconst DropdownMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.RadioItem>\n))\nDropdownMenuRadioItem.displayName = DropdownMenuPrimitive.RadioItem.displayName\n\nconst DropdownMenuLabel = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuLabel.displayName = DropdownMenuPrimitive.Label.displayName\n\nconst DropdownMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nDropdownMenuSeparator.displayName = DropdownMenuPrimitive.Separator.displayName\n\nconst DropdownMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\"ml-auto text-xs tracking-widest opacity-60\", className)}\n      {...props}\n    />\n  )\n}\nDropdownMenuShortcut.displayName = \"DropdownMenuShortcut\"\n\nexport {\n  DropdownMenu,\n  DropdownMenuTrigger,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuCheckboxItem,\n  DropdownMenuRadioItem,\n  DropdownMenuLabel,\n  DropdownMenuSeparator,\n  DropdownMenuShortcut,\n  DropdownMenuGroup,\n  DropdownMenuPortal,\n  DropdownMenuSub,\n  DropdownMenuSubContent,\n  DropdownMenuSubTrigger,\n  DropdownMenuRadioGroup,\n}\n","size_bytes":7609},"client/src/components/ui/form.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport {\n  Controller,\n  FormProvider,\n  useFormContext,\n  type ControllerProps,\n  type FieldPath,\n  type FieldValues,\n} from \"react-hook-form\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Label } from \"@/components/ui/label\"\n\nconst Form = FormProvider\n\ntype FormFieldContextValue<\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n> = {\n  name: TName\n}\n\nconst FormFieldContext = React.createContext<FormFieldContextValue>(\n  {} as FormFieldContextValue\n)\n\nconst FormField = <\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n>({\n  ...props\n}: ControllerProps<TFieldValues, TName>) => {\n  return (\n    <FormFieldContext.Provider value={{ name: props.name }}>\n      <Controller {...props} />\n    </FormFieldContext.Provider>\n  )\n}\n\nconst useFormField = () => {\n  const fieldContext = React.useContext(FormFieldContext)\n  const itemContext = React.useContext(FormItemContext)\n  const { getFieldState, formState } = useFormContext()\n\n  const fieldState = getFieldState(fieldContext.name, formState)\n\n  if (!fieldContext) {\n    throw new Error(\"useFormField should be used within <FormField>\")\n  }\n\n  const { id } = itemContext\n\n  return {\n    id,\n    name: fieldContext.name,\n    formItemId: `${id}-form-item`,\n    formDescriptionId: `${id}-form-item-description`,\n    formMessageId: `${id}-form-item-message`,\n    ...fieldState,\n  }\n}\n\ntype FormItemContextValue = {\n  id: string\n}\n\nconst FormItemContext = React.createContext<FormItemContextValue>(\n  {} as FormItemContextValue\n)\n\nconst FormItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const id = React.useId()\n\n  return (\n    <FormItemContext.Provider value={{ id }}>\n      <div ref={ref} className={cn(\"space-y-2\", className)} {...props} />\n    </FormItemContext.Provider>\n  )\n})\nFormItem.displayName = \"FormItem\"\n\nconst FormLabel = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  const { error, formItemId } = useFormField()\n\n  return (\n    <Label\n      ref={ref}\n      className={cn(error && \"text-destructive\", className)}\n      htmlFor={formItemId}\n      {...props}\n    />\n  )\n})\nFormLabel.displayName = \"FormLabel\"\n\nconst FormControl = React.forwardRef<\n  React.ElementRef<typeof Slot>,\n  React.ComponentPropsWithoutRef<typeof Slot>\n>(({ ...props }, ref) => {\n  const { error, formItemId, formDescriptionId, formMessageId } = useFormField()\n\n  return (\n    <Slot\n      ref={ref}\n      id={formItemId}\n      aria-describedby={\n        !error\n          ? `${formDescriptionId}`\n          : `${formDescriptionId} ${formMessageId}`\n      }\n      aria-invalid={!!error}\n      {...props}\n    />\n  )\n})\nFormControl.displayName = \"FormControl\"\n\nconst FormDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => {\n  const { formDescriptionId } = useFormField()\n\n  return (\n    <p\n      ref={ref}\n      id={formDescriptionId}\n      className={cn(\"text-sm text-muted-foreground\", className)}\n      {...props}\n    />\n  )\n})\nFormDescription.displayName = \"FormDescription\"\n\nconst FormMessage = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, children, ...props }, ref) => {\n  const { error, formMessageId } = useFormField()\n  const body = error ? String(error?.message ?? \"\") : children\n\n  if (!body) {\n    return null\n  }\n\n  return (\n    <p\n      ref={ref}\n      id={formMessageId}\n      className={cn(\"text-sm font-medium text-destructive\", className)}\n      {...props}\n    >\n      {body}\n    </p>\n  )\n})\nFormMessage.displayName = \"FormMessage\"\n\nexport {\n  useFormField,\n  Form,\n  FormItem,\n  FormLabel,\n  FormControl,\n  FormDescription,\n  FormMessage,\n  FormField,\n}\n","size_bytes":4120},"client/src/components/ui/hover-card.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as HoverCardPrimitive from \"@radix-ui/react-hover-card\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst HoverCard = HoverCardPrimitive.Root\n\nconst HoverCardTrigger = HoverCardPrimitive.Trigger\n\nconst HoverCardContent = React.forwardRef<\n  React.ElementRef<typeof HoverCardPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof HoverCardPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <HoverCardPrimitive.Content\n    ref={ref}\n    align={align}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 w-64 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-hover-card-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nHoverCardContent.displayName = HoverCardPrimitive.Content.displayName\n\nexport { HoverCard, HoverCardTrigger, HoverCardContent }\n","size_bytes":1251},"client/src/components/ui/input-otp.tsx":{"content":"import * as React from \"react\"\nimport { OTPInput, OTPInputContext } from \"input-otp\"\nimport { Dot } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst InputOTP = React.forwardRef<\n  React.ElementRef<typeof OTPInput>,\n  React.ComponentPropsWithoutRef<typeof OTPInput>\n>(({ className, containerClassName, ...props }, ref) => (\n  <OTPInput\n    ref={ref}\n    containerClassName={cn(\n      \"flex items-center gap-2 has-[:disabled]:opacity-50\",\n      containerClassName\n    )}\n    className={cn(\"disabled:cursor-not-allowed\", className)}\n    {...props}\n  />\n))\nInputOTP.displayName = \"InputOTP\"\n\nconst InputOTPGroup = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"flex items-center\", className)} {...props} />\n))\nInputOTPGroup.displayName = \"InputOTPGroup\"\n\nconst InputOTPSlot = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\"> & { index: number }\n>(({ index, className, ...props }, ref) => {\n  const inputOTPContext = React.useContext(OTPInputContext)\n  const { char, hasFakeCaret, isActive } = inputOTPContext.slots[index]\n\n  return (\n    <div\n      ref={ref}\n      className={cn(\n        \"relative flex h-10 w-10 items-center justify-center border-y border-r border-input text-sm transition-all first:rounded-l-md first:border-l last:rounded-r-md\",\n        isActive && \"z-10 ring-2 ring-ring ring-offset-background\",\n        className\n      )}\n      {...props}\n    >\n      {char}\n      {hasFakeCaret && (\n        <div className=\"pointer-events-none absolute inset-0 flex items-center justify-center\">\n          <div className=\"h-4 w-px animate-caret-blink bg-foreground duration-1000\" />\n        </div>\n      )}\n    </div>\n  )\n})\nInputOTPSlot.displayName = \"InputOTPSlot\"\n\nconst InputOTPSeparator = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ ...props }, ref) => (\n  <div ref={ref} role=\"separator\" {...props}>\n    <Dot />\n  </div>\n))\nInputOTPSeparator.displayName = \"InputOTPSeparator\"\n\nexport { InputOTP, InputOTPGroup, InputOTPSlot, InputOTPSeparator }\n","size_bytes":2154},"client/src/components/ui/input.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Input = React.forwardRef<HTMLInputElement, React.ComponentProps<\"input\">>(\n  ({ className, type, ...props }, ref) => {\n    return (\n      <input\n        type={type}\n        className={cn(\n          \"flex h-10 w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background file:border-0 file:bg-transparent file:text-sm file:font-medium file:text-foreground placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n          className\n        )}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nInput.displayName = \"Input\"\n\nexport { Input }\n","size_bytes":791},"client/src/components/ui/label.tsx":{"content":"import * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst labelVariants = cva(\n  \"text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70\"\n)\n\nconst Label = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root> &\n    VariantProps<typeof labelVariants>\n>(({ className, ...props }, ref) => (\n  <LabelPrimitive.Root\n    ref={ref}\n    className={cn(labelVariants(), className)}\n    {...props}\n  />\n))\nLabel.displayName = LabelPrimitive.Root.displayName\n\nexport { Label }\n","size_bytes":710},"client/src/components/ui/menubar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as MenubarPrimitive from \"@radix-ui/react-menubar\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nfunction MenubarMenu({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Menu>) {\n  return <MenubarPrimitive.Menu {...props} />\n}\n\nfunction MenubarGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Group>) {\n  return <MenubarPrimitive.Group {...props} />\n}\n\nfunction MenubarPortal({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Portal>) {\n  return <MenubarPrimitive.Portal {...props} />\n}\n\nfunction MenubarRadioGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.RadioGroup>) {\n  return <MenubarPrimitive.RadioGroup {...props} />\n}\n\nfunction MenubarSub({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Sub>) {\n  return <MenubarPrimitive.Sub data-slot=\"menubar-sub\" {...props} />\n}\n\nconst Menubar = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"flex h-10 items-center space-x-1 rounded-md border bg-background p-1\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubar.displayName = MenubarPrimitive.Root.displayName\n\nconst MenubarTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-3 py-1.5 text-sm font-medium outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarTrigger.displayName = MenubarPrimitive.Trigger.displayName\n\nconst MenubarSubTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <MenubarPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </MenubarPrimitive.SubTrigger>\n))\nMenubarSubTrigger.displayName = MenubarPrimitive.SubTrigger.displayName\n\nconst MenubarSubContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarSubContent.displayName = MenubarPrimitive.SubContent.displayName\n\nconst MenubarContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Content>\n>(\n  (\n    { className, align = \"start\", alignOffset = -4, sideOffset = 8, ...props },\n    ref\n  ) => (\n    <MenubarPrimitive.Portal>\n      <MenubarPrimitive.Content\n        ref={ref}\n        align={align}\n        alignOffset={alignOffset}\n        sideOffset={sideOffset}\n        className={cn(\n          \"z-50 min-w-[12rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n          className\n        )}\n        {...props}\n      />\n    </MenubarPrimitive.Portal>\n  )\n)\nMenubarContent.displayName = MenubarPrimitive.Content.displayName\n\nconst MenubarItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarItem.displayName = MenubarPrimitive.Item.displayName\n\nconst MenubarCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <MenubarPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.CheckboxItem>\n))\nMenubarCheckboxItem.displayName = MenubarPrimitive.CheckboxItem.displayName\n\nconst MenubarRadioItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <MenubarPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.RadioItem>\n))\nMenubarRadioItem.displayName = MenubarPrimitive.RadioItem.displayName\n\nconst MenubarLabel = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarLabel.displayName = MenubarPrimitive.Label.displayName\n\nconst MenubarSeparator = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nMenubarSeparator.displayName = MenubarPrimitive.Separator.displayName\n\nconst MenubarShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nMenubarShortcut.displayname = \"MenubarShortcut\"\n\nexport {\n  Menubar,\n  MenubarMenu,\n  MenubarTrigger,\n  MenubarContent,\n  MenubarItem,\n  MenubarSeparator,\n  MenubarLabel,\n  MenubarCheckboxItem,\n  MenubarRadioGroup,\n  MenubarRadioItem,\n  MenubarPortal,\n  MenubarSubContent,\n  MenubarSubTrigger,\n  MenubarGroup,\n  MenubarSub,\n  MenubarShortcut,\n}\n","size_bytes":8605},"client/src/components/ui/navigation-menu.tsx":{"content":"import * as React from \"react\"\nimport * as NavigationMenuPrimitive from \"@radix-ui/react-navigation-menu\"\nimport { cva } from \"class-variance-authority\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst NavigationMenu = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative z-10 flex max-w-max flex-1 items-center justify-center\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <NavigationMenuViewport />\n  </NavigationMenuPrimitive.Root>\n))\nNavigationMenu.displayName = NavigationMenuPrimitive.Root.displayName\n\nconst NavigationMenuList = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.List\n    ref={ref}\n    className={cn(\n      \"group flex flex-1 list-none items-center justify-center space-x-1\",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuList.displayName = NavigationMenuPrimitive.List.displayName\n\nconst NavigationMenuItem = NavigationMenuPrimitive.Item\n\nconst navigationMenuTriggerStyle = cva(\n  \"group inline-flex h-10 w-max items-center justify-center rounded-md bg-background px-4 py-2 text-sm font-medium transition-colors hover:bg-accent hover:text-accent-foreground focus:bg-accent focus:text-accent-foreground focus:outline-none disabled:pointer-events-none disabled:opacity-50 data-[state=open]:text-accent-foreground data-[state=open]:bg-accent/50 data-[state=open]:hover:bg-accent data-[state=open]:focus:bg-accent\"\n)\n\nconst NavigationMenuTrigger = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Trigger\n    ref={ref}\n    className={cn(navigationMenuTriggerStyle(), \"group\", className)}\n    {...props}\n  >\n    {children}{\" \"}\n    <ChevronDown\n      className=\"relative top-[1px] ml-1 h-3 w-3 transition duration-200 group-data-[state=open]:rotate-180\"\n      aria-hidden=\"true\"\n    />\n  </NavigationMenuPrimitive.Trigger>\n))\nNavigationMenuTrigger.displayName = NavigationMenuPrimitive.Trigger.displayName\n\nconst NavigationMenuContent = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"left-0 top-0 w-full data-[motion^=from-]:animate-in data-[motion^=to-]:animate-out data-[motion^=from-]:fade-in data-[motion^=to-]:fade-out data-[motion=from-end]:slide-in-from-right-52 data-[motion=from-start]:slide-in-from-left-52 data-[motion=to-end]:slide-out-to-right-52 data-[motion=to-start]:slide-out-to-left-52 md:absolute md:w-auto \",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuContent.displayName = NavigationMenuPrimitive.Content.displayName\n\nconst NavigationMenuLink = NavigationMenuPrimitive.Link\n\nconst NavigationMenuViewport = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Viewport>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Viewport>\n>(({ className, ...props }, ref) => (\n  <div className={cn(\"absolute left-0 top-full flex justify-center\")}>\n    <NavigationMenuPrimitive.Viewport\n      className={cn(\n        \"origin-top-center relative mt-1.5 h-[var(--radix-navigation-menu-viewport-height)] w-full overflow-hidden rounded-md border bg-popover text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-90 md:w-[var(--radix-navigation-menu-viewport-width)]\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  </div>\n))\nNavigationMenuViewport.displayName =\n  NavigationMenuPrimitive.Viewport.displayName\n\nconst NavigationMenuIndicator = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Indicator>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Indicator>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Indicator\n    ref={ref}\n    className={cn(\n      \"top-full z-[1] flex h-1.5 items-end justify-center overflow-hidden data-[state=visible]:animate-in data-[state=hidden]:animate-out data-[state=hidden]:fade-out data-[state=visible]:fade-in\",\n      className\n    )}\n    {...props}\n  >\n    <div className=\"relative top-[60%] h-2 w-2 rotate-45 rounded-tl-sm bg-border shadow-md\" />\n  </NavigationMenuPrimitive.Indicator>\n))\nNavigationMenuIndicator.displayName =\n  NavigationMenuPrimitive.Indicator.displayName\n\nexport {\n  navigationMenuTriggerStyle,\n  NavigationMenu,\n  NavigationMenuList,\n  NavigationMenuItem,\n  NavigationMenuContent,\n  NavigationMenuTrigger,\n  NavigationMenuLink,\n  NavigationMenuIndicator,\n  NavigationMenuViewport,\n}\n","size_bytes":5128},"client/src/components/ui/pagination.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { ButtonProps, buttonVariants } from \"@/components/ui/button\"\n\nconst Pagination = ({ className, ...props }: React.ComponentProps<\"nav\">) => (\n  <nav\n    role=\"navigation\"\n    aria-label=\"pagination\"\n    className={cn(\"mx-auto flex w-full justify-center\", className)}\n    {...props}\n  />\n)\nPagination.displayName = \"Pagination\"\n\nconst PaginationContent = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    className={cn(\"flex flex-row items-center gap-1\", className)}\n    {...props}\n  />\n))\nPaginationContent.displayName = \"PaginationContent\"\n\nconst PaginationItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ className, ...props }, ref) => (\n  <li ref={ref} className={cn(\"\", className)} {...props} />\n))\nPaginationItem.displayName = \"PaginationItem\"\n\ntype PaginationLinkProps = {\n  isActive?: boolean\n} & Pick<ButtonProps, \"size\"> &\n  React.ComponentProps<\"a\">\n\nconst PaginationLink = ({\n  className,\n  isActive,\n  size = \"icon\",\n  ...props\n}: PaginationLinkProps) => (\n  <a\n    aria-current={isActive ? \"page\" : undefined}\n    className={cn(\n      buttonVariants({\n        variant: isActive ? \"outline\" : \"ghost\",\n        size,\n      }),\n      className\n    )}\n    {...props}\n  />\n)\nPaginationLink.displayName = \"PaginationLink\"\n\nconst PaginationPrevious = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to previous page\"\n    size=\"default\"\n    className={cn(\"gap-1 pl-2.5\", className)}\n    {...props}\n  >\n    <ChevronLeft className=\"h-4 w-4\" />\n    <span>Previous</span>\n  </PaginationLink>\n)\nPaginationPrevious.displayName = \"PaginationPrevious\"\n\nconst PaginationNext = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to next page\"\n    size=\"default\"\n    className={cn(\"gap-1 pr-2.5\", className)}\n    {...props}\n  >\n    <span>Next</span>\n    <ChevronRight className=\"h-4 w-4\" />\n  </PaginationLink>\n)\nPaginationNext.displayName = \"PaginationNext\"\n\nconst PaginationEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    aria-hidden\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More pages</span>\n  </span>\n)\nPaginationEllipsis.displayName = \"PaginationEllipsis\"\n\nexport {\n  Pagination,\n  PaginationContent,\n  PaginationEllipsis,\n  PaginationItem,\n  PaginationLink,\n  PaginationNext,\n  PaginationPrevious,\n}\n","size_bytes":2751},"client/src/components/ui/popover.tsx":{"content":"import * as React from \"react\"\nimport * as PopoverPrimitive from \"@radix-ui/react-popover\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Popover = PopoverPrimitive.Root\n\nconst PopoverTrigger = PopoverPrimitive.Trigger\n\nconst PopoverContent = React.forwardRef<\n  React.ElementRef<typeof PopoverPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof PopoverPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <PopoverPrimitive.Portal>\n    <PopoverPrimitive.Content\n      ref={ref}\n      align={align}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 w-72 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-popover-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </PopoverPrimitive.Portal>\n))\nPopoverContent.displayName = PopoverPrimitive.Content.displayName\n\nexport { Popover, PopoverTrigger, PopoverContent }\n","size_bytes":1280},"client/src/components/ui/progress.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ProgressPrimitive from \"@radix-ui/react-progress\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Progress = React.forwardRef<\n  React.ElementRef<typeof ProgressPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ProgressPrimitive.Root>\n>(({ className, value, ...props }, ref) => (\n  <ProgressPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative h-4 w-full overflow-hidden rounded-full bg-secondary\",\n      className\n    )}\n    {...props}\n  >\n    <ProgressPrimitive.Indicator\n      className=\"h-full w-full flex-1 bg-primary transition-all\"\n      style={{ transform: `translateX(-${100 - (value || 0)}%)` }}\n    />\n  </ProgressPrimitive.Root>\n))\nProgress.displayName = ProgressPrimitive.Root.displayName\n\nexport { Progress }\n","size_bytes":791},"client/src/components/ui/radio-group.tsx":{"content":"import * as React from \"react\"\nimport * as RadioGroupPrimitive from \"@radix-ui/react-radio-group\"\nimport { Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst RadioGroup = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Root\n      className={cn(\"grid gap-2\", className)}\n      {...props}\n      ref={ref}\n    />\n  )\n})\nRadioGroup.displayName = RadioGroupPrimitive.Root.displayName\n\nconst RadioGroupItem = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Item>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        \"aspect-square h-4 w-4 rounded-full border border-primary text-primary ring-offset-background focus:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    >\n      <RadioGroupPrimitive.Indicator className=\"flex items-center justify-center\">\n        <Circle className=\"h-2.5 w-2.5 fill-current text-current\" />\n      </RadioGroupPrimitive.Indicator>\n    </RadioGroupPrimitive.Item>\n  )\n})\nRadioGroupItem.displayName = RadioGroupPrimitive.Item.displayName\n\nexport { RadioGroup, RadioGroupItem }\n","size_bytes":1467},"client/src/components/ui/resizable.tsx":{"content":"\"use client\"\n\nimport { GripVertical } from \"lucide-react\"\nimport * as ResizablePrimitive from \"react-resizable-panels\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ResizablePanelGroup = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelGroup>) => (\n  <ResizablePrimitive.PanelGroup\n    className={cn(\n      \"flex h-full w-full data-[panel-group-direction=vertical]:flex-col\",\n      className\n    )}\n    {...props}\n  />\n)\n\nconst ResizablePanel = ResizablePrimitive.Panel\n\nconst ResizableHandle = ({\n  withHandle,\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelResizeHandle> & {\n  withHandle?: boolean\n}) => (\n  <ResizablePrimitive.PanelResizeHandle\n    className={cn(\n      \"relative flex w-px items-center justify-center bg-border after:absolute after:inset-y-0 after:left-1/2 after:w-1 after:-translate-x-1/2 focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring focus-visible:ring-offset-1 data-[panel-group-direction=vertical]:h-px data-[panel-group-direction=vertical]:w-full data-[panel-group-direction=vertical]:after:left-0 data-[panel-group-direction=vertical]:after:h-1 data-[panel-group-direction=vertical]:after:w-full data-[panel-group-direction=vertical]:after:-translate-y-1/2 data-[panel-group-direction=vertical]:after:translate-x-0 [&[data-panel-group-direction=vertical]>div]:rotate-90\",\n      className\n    )}\n    {...props}\n  >\n    {withHandle && (\n      <div className=\"z-10 flex h-4 w-3 items-center justify-center rounded-sm border bg-border\">\n        <GripVertical className=\"h-2.5 w-2.5\" />\n      </div>\n    )}\n  </ResizablePrimitive.PanelResizeHandle>\n)\n\nexport { ResizablePanelGroup, ResizablePanel, ResizableHandle }\n","size_bytes":1723},"client/src/components/ui/scroll-area.tsx":{"content":"import * as React from \"react\"\nimport * as ScrollAreaPrimitive from \"@radix-ui/react-scroll-area\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ScrollArea = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <ScrollAreaPrimitive.Root\n    ref={ref}\n    className={cn(\"relative overflow-hidden\", className)}\n    {...props}\n  >\n    <ScrollAreaPrimitive.Viewport className=\"h-full w-full rounded-[inherit]\">\n      {children}\n    </ScrollAreaPrimitive.Viewport>\n    <ScrollBar />\n    <ScrollAreaPrimitive.Corner />\n  </ScrollAreaPrimitive.Root>\n))\nScrollArea.displayName = ScrollAreaPrimitive.Root.displayName\n\nconst ScrollBar = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>\n>(({ className, orientation = \"vertical\", ...props }, ref) => (\n  <ScrollAreaPrimitive.ScrollAreaScrollbar\n    ref={ref}\n    orientation={orientation}\n    className={cn(\n      \"flex touch-none select-none transition-colors\",\n      orientation === \"vertical\" &&\n        \"h-full w-2.5 border-l border-l-transparent p-[1px]\",\n      orientation === \"horizontal\" &&\n        \"h-2.5 flex-col border-t border-t-transparent p-[1px]\",\n      className\n    )}\n    {...props}\n  >\n    <ScrollAreaPrimitive.ScrollAreaThumb className=\"relative flex-1 rounded-full bg-border\" />\n  </ScrollAreaPrimitive.ScrollAreaScrollbar>\n))\nScrollBar.displayName = ScrollAreaPrimitive.ScrollAreaScrollbar.displayName\n\nexport { ScrollArea, ScrollBar }\n","size_bytes":1642},"client/src/components/ui/select.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SelectPrimitive from \"@radix-ui/react-select\"\nimport { Check, ChevronDown, ChevronUp } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Select = SelectPrimitive.Root\n\nconst SelectGroup = SelectPrimitive.Group\n\nconst SelectValue = SelectPrimitive.Value\n\nconst SelectTrigger = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex h-10 w-full items-center justify-between rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background data-[placeholder]:text-muted-foreground focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 [&>span]:line-clamp-1\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <SelectPrimitive.Icon asChild>\n      <ChevronDown className=\"h-4 w-4 opacity-50\" />\n    </SelectPrimitive.Icon>\n  </SelectPrimitive.Trigger>\n))\nSelectTrigger.displayName = SelectPrimitive.Trigger.displayName\n\nconst SelectScrollUpButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollUpButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollUpButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollUpButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronUp className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollUpButton>\n))\nSelectScrollUpButton.displayName = SelectPrimitive.ScrollUpButton.displayName\n\nconst SelectScrollDownButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollDownButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollDownButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollDownButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronDown className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollDownButton>\n))\nSelectScrollDownButton.displayName =\n  SelectPrimitive.ScrollDownButton.displayName\n\nconst SelectContent = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Content>\n>(({ className, children, position = \"popper\", ...props }, ref) => (\n  <SelectPrimitive.Portal>\n    <SelectPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"relative z-50 max-h-[--radix-select-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-select-content-transform-origin]\",\n        position === \"popper\" &&\n          \"data-[side=bottom]:translate-y-1 data-[side=left]:-translate-x-1 data-[side=right]:translate-x-1 data-[side=top]:-translate-y-1\",\n        className\n      )}\n      position={position}\n      {...props}\n    >\n      <SelectScrollUpButton />\n      <SelectPrimitive.Viewport\n        className={cn(\n          \"p-1\",\n          position === \"popper\" &&\n            \"h-[var(--radix-select-trigger-height)] w-full min-w-[var(--radix-select-trigger-width)]\"\n        )}\n      >\n        {children}\n      </SelectPrimitive.Viewport>\n      <SelectScrollDownButton />\n    </SelectPrimitive.Content>\n  </SelectPrimitive.Portal>\n))\nSelectContent.displayName = SelectPrimitive.Content.displayName\n\nconst SelectLabel = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Label>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Label\n    ref={ref}\n    className={cn(\"py-1.5 pl-8 pr-2 text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nSelectLabel.displayName = SelectPrimitive.Label.displayName\n\nconst SelectItem = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Item>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex w-full cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <SelectPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </SelectPrimitive.ItemIndicator>\n    </span>\n\n    <SelectPrimitive.ItemText>{children}</SelectPrimitive.ItemText>\n  </SelectPrimitive.Item>\n))\nSelectItem.displayName = SelectPrimitive.Item.displayName\n\nconst SelectSeparator = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nSelectSeparator.displayName = SelectPrimitive.Separator.displayName\n\nexport {\n  Select,\n  SelectGroup,\n  SelectValue,\n  SelectTrigger,\n  SelectContent,\n  SelectLabel,\n  SelectItem,\n  SelectSeparator,\n  SelectScrollUpButton,\n  SelectScrollDownButton,\n}\n","size_bytes":5742},"client/src/components/ui/separator.tsx":{"content":"import * as React from \"react\"\nimport * as SeparatorPrimitive from \"@radix-ui/react-separator\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Separator = React.forwardRef<\n  React.ElementRef<typeof SeparatorPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SeparatorPrimitive.Root>\n>(\n  (\n    { className, orientation = \"horizontal\", decorative = true, ...props },\n    ref\n  ) => (\n    <SeparatorPrimitive.Root\n      ref={ref}\n      decorative={decorative}\n      orientation={orientation}\n      className={cn(\n        \"shrink-0 bg-border\",\n        orientation === \"horizontal\" ? \"h-[1px] w-full\" : \"h-full w-[1px]\",\n        className\n      )}\n      {...props}\n    />\n  )\n)\nSeparator.displayName = SeparatorPrimitive.Root.displayName\n\nexport { Separator }\n","size_bytes":756},"client/src/components/ui/sheet.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SheetPrimitive from \"@radix-ui/react-dialog\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Sheet = SheetPrimitive.Root\n\nconst SheetTrigger = SheetPrimitive.Trigger\n\nconst SheetClose = SheetPrimitive.Close\n\nconst SheetPortal = SheetPrimitive.Portal\n\nconst SheetOverlay = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nSheetOverlay.displayName = SheetPrimitive.Overlay.displayName\n\nconst sheetVariants = cva(\n  \"fixed z-50 gap-4 bg-background p-6 shadow-lg transition ease-in-out data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:duration-300 data-[state=open]:duration-500\",\n  {\n    variants: {\n      side: {\n        top: \"inset-x-0 top-0 border-b data-[state=closed]:slide-out-to-top data-[state=open]:slide-in-from-top\",\n        bottom:\n          \"inset-x-0 bottom-0 border-t data-[state=closed]:slide-out-to-bottom data-[state=open]:slide-in-from-bottom\",\n        left: \"inset-y-0 left-0 h-full w-3/4 border-r data-[state=closed]:slide-out-to-left data-[state=open]:slide-in-from-left sm:max-w-sm\",\n        right:\n          \"inset-y-0 right-0 h-full w-3/4  border-l data-[state=closed]:slide-out-to-right data-[state=open]:slide-in-from-right sm:max-w-sm\",\n      },\n    },\n    defaultVariants: {\n      side: \"right\",\n    },\n  }\n)\n\ninterface SheetContentProps\n  extends React.ComponentPropsWithoutRef<typeof SheetPrimitive.Content>,\n    VariantProps<typeof sheetVariants> {}\n\nconst SheetContent = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Content>,\n  SheetContentProps\n>(({ side = \"right\", className, children, ...props }, ref) => (\n  <SheetPortal>\n    <SheetOverlay />\n    <SheetPrimitive.Content\n      ref={ref}\n      className={cn(sheetVariants({ side }), className)}\n      {...props}\n    >\n      {children}\n      <SheetPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-secondary\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </SheetPrimitive.Close>\n    </SheetPrimitive.Content>\n  </SheetPortal>\n))\nSheetContent.displayName = SheetPrimitive.Content.displayName\n\nconst SheetHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetHeader.displayName = \"SheetHeader\"\n\nconst SheetFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetFooter.displayName = \"SheetFooter\"\n\nconst SheetTitle = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold text-foreground\", className)}\n    {...props}\n  />\n))\nSheetTitle.displayName = SheetPrimitive.Title.displayName\n\nconst SheetDescription = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nSheetDescription.displayName = SheetPrimitive.Description.displayName\n\nexport {\n  Sheet,\n  SheetPortal,\n  SheetOverlay,\n  SheetTrigger,\n  SheetClose,\n  SheetContent,\n  SheetHeader,\n  SheetFooter,\n  SheetTitle,\n  SheetDescription,\n}\n","size_bytes":4281},"client/src/components/ui/sidebar.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { VariantProps, cva } from \"class-variance-authority\"\nimport { PanelLeft } from \"lucide-react\"\n\nimport { useIsMobile } from \"@/hooks/use-mobile\"\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\nimport { Input } from \"@/components/ui/input\"\nimport { Separator } from \"@/components/ui/separator\"\nimport {\n  Sheet,\n  SheetContent,\n  SheetDescription,\n  SheetHeader,\n  SheetTitle,\n} from \"@/components/ui/sheet\"\nimport { Skeleton } from \"@/components/ui/skeleton\"\nimport {\n  Tooltip,\n  TooltipContent,\n  TooltipProvider,\n  TooltipTrigger,\n} from \"@/components/ui/tooltip\"\n\nconst SIDEBAR_COOKIE_NAME = \"sidebar_state\"\nconst SIDEBAR_COOKIE_MAX_AGE = 60 * 60 * 24 * 7\nconst SIDEBAR_WIDTH = \"16rem\"\nconst SIDEBAR_WIDTH_MOBILE = \"18rem\"\nconst SIDEBAR_WIDTH_ICON = \"3rem\"\nconst SIDEBAR_KEYBOARD_SHORTCUT = \"b\"\n\ntype SidebarContextProps = {\n  state: \"expanded\" | \"collapsed\"\n  open: boolean\n  setOpen: (open: boolean) => void\n  openMobile: boolean\n  setOpenMobile: (open: boolean) => void\n  isMobile: boolean\n  toggleSidebar: () => void\n}\n\nconst SidebarContext = React.createContext<SidebarContextProps | null>(null)\n\nfunction useSidebar() {\n  const context = React.useContext(SidebarContext)\n  if (!context) {\n    throw new Error(\"useSidebar must be used within a SidebarProvider.\")\n  }\n\n  return context\n}\n\nconst SidebarProvider = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    defaultOpen?: boolean\n    open?: boolean\n    onOpenChange?: (open: boolean) => void\n  }\n>(\n  (\n    {\n      defaultOpen = true,\n      open: openProp,\n      onOpenChange: setOpenProp,\n      className,\n      style,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const isMobile = useIsMobile()\n    const [openMobile, setOpenMobile] = React.useState(false)\n\n    // This is the internal state of the sidebar.\n    // We use openProp and setOpenProp for control from outside the component.\n    const [_open, _setOpen] = React.useState(defaultOpen)\n    const open = openProp ?? _open\n    const setOpen = React.useCallback(\n      (value: boolean | ((value: boolean) => boolean)) => {\n        const openState = typeof value === \"function\" ? value(open) : value\n        if (setOpenProp) {\n          setOpenProp(openState)\n        } else {\n          _setOpen(openState)\n        }\n\n        // This sets the cookie to keep the sidebar state.\n        document.cookie = `${SIDEBAR_COOKIE_NAME}=${openState}; path=/; max-age=${SIDEBAR_COOKIE_MAX_AGE}`\n      },\n      [setOpenProp, open]\n    )\n\n    // Helper to toggle the sidebar.\n    const toggleSidebar = React.useCallback(() => {\n      return isMobile\n        ? setOpenMobile((open) => !open)\n        : setOpen((open) => !open)\n    }, [isMobile, setOpen, setOpenMobile])\n\n    // Adds a keyboard shortcut to toggle the sidebar.\n    React.useEffect(() => {\n      const handleKeyDown = (event: KeyboardEvent) => {\n        if (\n          event.key === SIDEBAR_KEYBOARD_SHORTCUT &&\n          (event.metaKey || event.ctrlKey)\n        ) {\n          event.preventDefault()\n          toggleSidebar()\n        }\n      }\n\n      window.addEventListener(\"keydown\", handleKeyDown)\n      return () => window.removeEventListener(\"keydown\", handleKeyDown)\n    }, [toggleSidebar])\n\n    // We add a state so that we can do data-state=\"expanded\" or \"collapsed\".\n    // This makes it easier to style the sidebar with Tailwind classes.\n    const state = open ? \"expanded\" : \"collapsed\"\n\n    const contextValue = React.useMemo<SidebarContextProps>(\n      () => ({\n        state,\n        open,\n        setOpen,\n        isMobile,\n        openMobile,\n        setOpenMobile,\n        toggleSidebar,\n      }),\n      [state, open, setOpen, isMobile, openMobile, setOpenMobile, toggleSidebar]\n    )\n\n    return (\n      <SidebarContext.Provider value={contextValue}>\n        <TooltipProvider delayDuration={0}>\n          <div\n            style={\n              {\n                \"--sidebar-width\": SIDEBAR_WIDTH,\n                \"--sidebar-width-icon\": SIDEBAR_WIDTH_ICON,\n                ...style,\n              } as React.CSSProperties\n            }\n            className={cn(\n              \"group/sidebar-wrapper flex min-h-svh w-full has-[[data-variant=inset]]:bg-sidebar\",\n              className\n            )}\n            ref={ref}\n            {...props}\n          >\n            {children}\n          </div>\n        </TooltipProvider>\n      </SidebarContext.Provider>\n    )\n  }\n)\nSidebarProvider.displayName = \"SidebarProvider\"\n\nconst Sidebar = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    side?: \"left\" | \"right\"\n    variant?: \"sidebar\" | \"floating\" | \"inset\"\n    collapsible?: \"offcanvas\" | \"icon\" | \"none\"\n  }\n>(\n  (\n    {\n      side = \"left\",\n      variant = \"sidebar\",\n      collapsible = \"offcanvas\",\n      className,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const { isMobile, state, openMobile, setOpenMobile } = useSidebar()\n\n    if (collapsible === \"none\") {\n      return (\n        <div\n          className={cn(\n            \"flex h-full w-[--sidebar-width] flex-col bg-sidebar text-sidebar-foreground\",\n            className\n          )}\n          ref={ref}\n          {...props}\n        >\n          {children}\n        </div>\n      )\n    }\n\n    if (isMobile) {\n      return (\n        <Sheet open={openMobile} onOpenChange={setOpenMobile} {...props}>\n          <SheetContent\n            data-sidebar=\"sidebar\"\n            data-mobile=\"true\"\n            className=\"w-[--sidebar-width] bg-sidebar p-0 text-sidebar-foreground [&>button]:hidden\"\n            style={\n              {\n                \"--sidebar-width\": SIDEBAR_WIDTH_MOBILE,\n              } as React.CSSProperties\n            }\n            side={side}\n          >\n            <SheetHeader className=\"sr-only\">\n              <SheetTitle>Sidebar</SheetTitle>\n              <SheetDescription>Displays the mobile sidebar.</SheetDescription>\n            </SheetHeader>\n            <div className=\"flex h-full w-full flex-col\">{children}</div>\n          </SheetContent>\n        </Sheet>\n      )\n    }\n\n    return (\n      <div\n        ref={ref}\n        className=\"group peer hidden text-sidebar-foreground md:block\"\n        data-state={state}\n        data-collapsible={state === \"collapsed\" ? collapsible : \"\"}\n        data-variant={variant}\n        data-side={side}\n      >\n        {/* This is what handles the sidebar gap on desktop */}\n        <div\n          className={cn(\n            \"relative w-[--sidebar-width] bg-transparent transition-[width] duration-200 ease-linear\",\n            \"group-data-[collapsible=offcanvas]:w-0\",\n            \"group-data-[side=right]:rotate-180\",\n            variant === \"floating\" || variant === \"inset\"\n              ? \"group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4))]\"\n              : \"group-data-[collapsible=icon]:w-[--sidebar-width-icon]\"\n          )}\n        />\n        <div\n          className={cn(\n            \"fixed inset-y-0 z-10 hidden h-svh w-[--sidebar-width] transition-[left,right,width] duration-200 ease-linear md:flex\",\n            side === \"left\"\n              ? \"left-0 group-data-[collapsible=offcanvas]:left-[calc(var(--sidebar-width)*-1)]\"\n              : \"right-0 group-data-[collapsible=offcanvas]:right-[calc(var(--sidebar-width)*-1)]\",\n            // Adjust the padding for floating and inset variants.\n            variant === \"floating\" || variant === \"inset\"\n              ? \"p-2 group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4)_+2px)]\"\n              : \"group-data-[collapsible=icon]:w-[--sidebar-width-icon] group-data-[side=left]:border-r group-data-[side=right]:border-l\",\n            className\n          )}\n          {...props}\n        >\n          <div\n            data-sidebar=\"sidebar\"\n            className=\"flex h-full w-full flex-col bg-sidebar group-data-[variant=floating]:rounded-lg group-data-[variant=floating]:border group-data-[variant=floating]:border-sidebar-border group-data-[variant=floating]:shadow\"\n          >\n            {children}\n          </div>\n        </div>\n      </div>\n    )\n  }\n)\nSidebar.displayName = \"Sidebar\"\n\nconst SidebarTrigger = React.forwardRef<\n  React.ElementRef<typeof Button>,\n  React.ComponentProps<typeof Button>\n>(({ className, onClick, ...props }, ref) => {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <Button\n      ref={ref}\n      data-sidebar=\"trigger\"\n      variant=\"ghost\"\n      size=\"icon\"\n      className={cn(\"h-7 w-7\", className)}\n      onClick={(event) => {\n        onClick?.(event)\n        toggleSidebar()\n      }}\n      {...props}\n    >\n      <PanelLeft />\n      <span className=\"sr-only\">Toggle Sidebar</span>\n    </Button>\n  )\n})\nSidebarTrigger.displayName = \"SidebarTrigger\"\n\nconst SidebarRail = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\">\n>(({ className, ...props }, ref) => {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <button\n      ref={ref}\n      data-sidebar=\"rail\"\n      aria-label=\"Toggle Sidebar\"\n      tabIndex={-1}\n      onClick={toggleSidebar}\n      title=\"Toggle Sidebar\"\n      className={cn(\n        \"absolute inset-y-0 z-20 hidden w-4 -translate-x-1/2 transition-all ease-linear after:absolute after:inset-y-0 after:left-1/2 after:w-[2px] hover:after:bg-sidebar-border group-data-[side=left]:-right-4 group-data-[side=right]:left-0 sm:flex\",\n        \"[[data-side=left]_&]:cursor-w-resize [[data-side=right]_&]:cursor-e-resize\",\n        \"[[data-side=left][data-state=collapsed]_&]:cursor-e-resize [[data-side=right][data-state=collapsed]_&]:cursor-w-resize\",\n        \"group-data-[collapsible=offcanvas]:translate-x-0 group-data-[collapsible=offcanvas]:after:left-full group-data-[collapsible=offcanvas]:hover:bg-sidebar\",\n        \"[[data-side=left][data-collapsible=offcanvas]_&]:-right-2\",\n        \"[[data-side=right][data-collapsible=offcanvas]_&]:-left-2\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarRail.displayName = \"SidebarRail\"\n\nconst SidebarInset = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"main\">\n>(({ className, ...props }, ref) => {\n  return (\n    <main\n      ref={ref}\n      className={cn(\n        \"relative flex w-full flex-1 flex-col bg-background\",\n        \"md:peer-data-[variant=inset]:m-2 md:peer-data-[state=collapsed]:peer-data-[variant=inset]:ml-2 md:peer-data-[variant=inset]:ml-0 md:peer-data-[variant=inset]:rounded-xl md:peer-data-[variant=inset]:shadow\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarInset.displayName = \"SidebarInset\"\n\nconst SidebarInput = React.forwardRef<\n  React.ElementRef<typeof Input>,\n  React.ComponentProps<typeof Input>\n>(({ className, ...props }, ref) => {\n  return (\n    <Input\n      ref={ref}\n      data-sidebar=\"input\"\n      className={cn(\n        \"h-8 w-full bg-background shadow-none focus-visible:ring-2 focus-visible:ring-sidebar-ring\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarInput.displayName = \"SidebarInput\"\n\nconst SidebarHeader = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"header\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarHeader.displayName = \"SidebarHeader\"\n\nconst SidebarFooter = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"footer\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarFooter.displayName = \"SidebarFooter\"\n\nconst SidebarSeparator = React.forwardRef<\n  React.ElementRef<typeof Separator>,\n  React.ComponentProps<typeof Separator>\n>(({ className, ...props }, ref) => {\n  return (\n    <Separator\n      ref={ref}\n      data-sidebar=\"separator\"\n      className={cn(\"mx-2 w-auto bg-sidebar-border\", className)}\n      {...props}\n    />\n  )\n})\nSidebarSeparator.displayName = \"SidebarSeparator\"\n\nconst SidebarContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"content\"\n      className={cn(\n        \"flex min-h-0 flex-1 flex-col gap-2 overflow-auto group-data-[collapsible=icon]:overflow-hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarContent.displayName = \"SidebarContent\"\n\nconst SidebarGroup = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"group\"\n      className={cn(\"relative flex w-full min-w-0 flex-col p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarGroup.displayName = \"SidebarGroup\"\n\nconst SidebarGroupLabel = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & { asChild?: boolean }\n>(({ className, asChild = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"div\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"group-label\"\n      className={cn(\n        \"flex h-8 shrink-0 items-center rounded-md px-2 text-xs font-medium text-sidebar-foreground/70 outline-none ring-sidebar-ring transition-[margin,opacity] duration-200 ease-linear focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        \"group-data-[collapsible=icon]:-mt-8 group-data-[collapsible=icon]:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarGroupLabel.displayName = \"SidebarGroupLabel\"\n\nconst SidebarGroupAction = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & { asChild?: boolean }\n>(({ className, asChild = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"group-action\"\n      className={cn(\n        \"absolute right-3 top-3.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 after:md:hidden\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarGroupAction.displayName = \"SidebarGroupAction\"\n\nconst SidebarGroupContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    data-sidebar=\"group-content\"\n    className={cn(\"w-full text-sm\", className)}\n    {...props}\n  />\n))\nSidebarGroupContent.displayName = \"SidebarGroupContent\"\n\nconst SidebarMenu = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    data-sidebar=\"menu\"\n    className={cn(\"flex w-full min-w-0 flex-col gap-1\", className)}\n    {...props}\n  />\n))\nSidebarMenu.displayName = \"SidebarMenu\"\n\nconst SidebarMenuItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    data-sidebar=\"menu-item\"\n    className={cn(\"group/menu-item relative\", className)}\n    {...props}\n  />\n))\nSidebarMenuItem.displayName = \"SidebarMenuItem\"\n\nconst sidebarMenuButtonVariants = cva(\n  \"peer/menu-button flex w-full items-center gap-2 overflow-hidden rounded-md p-2 text-left text-sm outline-none ring-sidebar-ring transition-[width,height,padding] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 group-has-[[data-sidebar=menu-action]]/menu-item:pr-8 aria-disabled:pointer-events-none aria-disabled:opacity-50 data-[active=true]:bg-sidebar-accent data-[active=true]:font-medium data-[active=true]:text-sidebar-accent-foreground data-[state=open]:hover:bg-sidebar-accent data-[state=open]:hover:text-sidebar-accent-foreground group-data-[collapsible=icon]:!size-8 group-data-[collapsible=icon]:!p-2 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"hover:bg-sidebar-accent hover:text-sidebar-accent-foreground\",\n        outline:\n          \"bg-background shadow-[0_0_0_1px_hsl(var(--sidebar-border))] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground hover:shadow-[0_0_0_1px_hsl(var(--sidebar-accent))]\",\n      },\n      size: {\n        default: \"h-8 text-sm\",\n        sm: \"h-7 text-xs\",\n        lg: \"h-12 text-sm group-data-[collapsible=icon]:!p-0\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst SidebarMenuButton = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & {\n    asChild?: boolean\n    isActive?: boolean\n    tooltip?: string | React.ComponentProps<typeof TooltipContent>\n  } & VariantProps<typeof sidebarMenuButtonVariants>\n>(\n  (\n    {\n      asChild = false,\n      isActive = false,\n      variant = \"default\",\n      size = \"default\",\n      tooltip,\n      className,\n      ...props\n    },\n    ref\n  ) => {\n    const Comp = asChild ? Slot : \"button\"\n    const { isMobile, state } = useSidebar()\n\n    const button = (\n      <Comp\n        ref={ref}\n        data-sidebar=\"menu-button\"\n        data-size={size}\n        data-active={isActive}\n        className={cn(sidebarMenuButtonVariants({ variant, size }), className)}\n        {...props}\n      />\n    )\n\n    if (!tooltip) {\n      return button\n    }\n\n    if (typeof tooltip === \"string\") {\n      tooltip = {\n        children: tooltip,\n      }\n    }\n\n    return (\n      <Tooltip>\n        <TooltipTrigger asChild>{button}</TooltipTrigger>\n        <TooltipContent\n          side=\"right\"\n          align=\"center\"\n          hidden={state !== \"collapsed\" || isMobile}\n          {...tooltip}\n        />\n      </Tooltip>\n    )\n  }\n)\nSidebarMenuButton.displayName = \"SidebarMenuButton\"\n\nconst SidebarMenuAction = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & {\n    asChild?: boolean\n    showOnHover?: boolean\n  }\n>(({ className, asChild = false, showOnHover = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"menu-action\"\n      className={cn(\n        \"absolute right-1 top-1.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 peer-hover/menu-button:text-sidebar-accent-foreground [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 after:md:hidden\",\n        \"peer-data-[size=sm]/menu-button:top-1\",\n        \"peer-data-[size=default]/menu-button:top-1.5\",\n        \"peer-data-[size=lg]/menu-button:top-2.5\",\n        \"group-data-[collapsible=icon]:hidden\",\n        showOnHover &&\n          \"group-focus-within/menu-item:opacity-100 group-hover/menu-item:opacity-100 data-[state=open]:opacity-100 peer-data-[active=true]/menu-button:text-sidebar-accent-foreground md:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarMenuAction.displayName = \"SidebarMenuAction\"\n\nconst SidebarMenuBadge = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    data-sidebar=\"menu-badge\"\n    className={cn(\n      \"pointer-events-none absolute right-1 flex h-5 min-w-5 select-none items-center justify-center rounded-md px-1 text-xs font-medium tabular-nums text-sidebar-foreground\",\n      \"peer-hover/menu-button:text-sidebar-accent-foreground peer-data-[active=true]/menu-button:text-sidebar-accent-foreground\",\n      \"peer-data-[size=sm]/menu-button:top-1\",\n      \"peer-data-[size=default]/menu-button:top-1.5\",\n      \"peer-data-[size=lg]/menu-button:top-2.5\",\n      \"group-data-[collapsible=icon]:hidden\",\n      className\n    )}\n    {...props}\n  />\n))\nSidebarMenuBadge.displayName = \"SidebarMenuBadge\"\n\nconst SidebarMenuSkeleton = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    showIcon?: boolean\n  }\n>(({ className, showIcon = false, ...props }, ref) => {\n  // Random width between 50 to 90%.\n  const width = React.useMemo(() => {\n    return `${Math.floor(Math.random() * 40) + 50}%`\n  }, [])\n\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"menu-skeleton\"\n      className={cn(\"flex h-8 items-center gap-2 rounded-md px-2\", className)}\n      {...props}\n    >\n      {showIcon && (\n        <Skeleton\n          className=\"size-4 rounded-md\"\n          data-sidebar=\"menu-skeleton-icon\"\n        />\n      )}\n      <Skeleton\n        className=\"h-4 max-w-[--skeleton-width] flex-1\"\n        data-sidebar=\"menu-skeleton-text\"\n        style={\n          {\n            \"--skeleton-width\": width,\n          } as React.CSSProperties\n        }\n      />\n    </div>\n  )\n})\nSidebarMenuSkeleton.displayName = \"SidebarMenuSkeleton\"\n\nconst SidebarMenuSub = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    data-sidebar=\"menu-sub\"\n    className={cn(\n      \"mx-3.5 flex min-w-0 translate-x-px flex-col gap-1 border-l border-sidebar-border px-2.5 py-0.5\",\n      \"group-data-[collapsible=icon]:hidden\",\n      className\n    )}\n    {...props}\n  />\n))\nSidebarMenuSub.displayName = \"SidebarMenuSub\"\n\nconst SidebarMenuSubItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ ...props }, ref) => <li ref={ref} {...props} />)\nSidebarMenuSubItem.displayName = \"SidebarMenuSubItem\"\n\nconst SidebarMenuSubButton = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentProps<\"a\"> & {\n    asChild?: boolean\n    size?: \"sm\" | \"md\"\n    isActive?: boolean\n  }\n>(({ asChild = false, size = \"md\", isActive, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"menu-sub-button\"\n      data-size={size}\n      data-active={isActive}\n      className={cn(\n        \"flex h-7 min-w-0 -translate-x-px items-center gap-2 overflow-hidden rounded-md px-2 text-sidebar-foreground outline-none ring-sidebar-ring hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 aria-disabled:pointer-events-none aria-disabled:opacity-50 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0 [&>svg]:text-sidebar-accent-foreground\",\n        \"data-[active=true]:bg-sidebar-accent data-[active=true]:text-sidebar-accent-foreground\",\n        size === \"sm\" && \"text-xs\",\n        size === \"md\" && \"text-sm\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarMenuSubButton.displayName = \"SidebarMenuSubButton\"\n\nexport {\n  Sidebar,\n  SidebarContent,\n  SidebarFooter,\n  SidebarGroup,\n  SidebarGroupAction,\n  SidebarGroupContent,\n  SidebarGroupLabel,\n  SidebarHeader,\n  SidebarInput,\n  SidebarInset,\n  SidebarMenu,\n  SidebarMenuAction,\n  SidebarMenuBadge,\n  SidebarMenuButton,\n  SidebarMenuItem,\n  SidebarMenuSkeleton,\n  SidebarMenuSub,\n  SidebarMenuSubButton,\n  SidebarMenuSubItem,\n  SidebarProvider,\n  SidebarRail,\n  SidebarSeparator,\n  SidebarTrigger,\n  useSidebar,\n}\n","size_bytes":23567},"client/src/components/ui/skeleton.tsx":{"content":"import { cn } from \"@/lib/utils\"\n\nfunction Skeleton({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) {\n  return (\n    <div\n      className={cn(\"animate-pulse rounded-md bg-muted\", className)}\n      {...props}\n    />\n  )\n}\n\nexport { Skeleton }\n","size_bytes":261},"client/src/components/ui/slider.tsx":{"content":"import * as React from \"react\"\nimport * as SliderPrimitive from \"@radix-ui/react-slider\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Slider = React.forwardRef<\n  React.ElementRef<typeof SliderPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SliderPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <SliderPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex w-full touch-none select-none items-center\",\n      className\n    )}\n    {...props}\n  >\n    <SliderPrimitive.Track className=\"relative h-2 w-full grow overflow-hidden rounded-full bg-secondary\">\n      <SliderPrimitive.Range className=\"absolute h-full bg-primary\" />\n    </SliderPrimitive.Track>\n    <SliderPrimitive.Thumb className=\"block h-5 w-5 rounded-full border-2 border-primary bg-background ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50\" />\n  </SliderPrimitive.Root>\n))\nSlider.displayName = SliderPrimitive.Root.displayName\n\nexport { Slider }\n","size_bytes":1077},"client/src/components/ui/switch.tsx":{"content":"import * as React from \"react\"\nimport * as SwitchPrimitives from \"@radix-ui/react-switch\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Switch = React.forwardRef<\n  React.ElementRef<typeof SwitchPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof SwitchPrimitives.Root>\n>(({ className, ...props }, ref) => (\n  <SwitchPrimitives.Root\n    className={cn(\n      \"peer inline-flex h-6 w-11 shrink-0 cursor-pointer items-center rounded-full border-2 border-transparent transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 focus-visible:ring-offset-background disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=unchecked]:bg-input\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  >\n    <SwitchPrimitives.Thumb\n      className={cn(\n        \"pointer-events-none block h-5 w-5 rounded-full bg-background shadow-lg ring-0 transition-transform data-[state=checked]:translate-x-5 data-[state=unchecked]:translate-x-0\"\n      )}\n    />\n  </SwitchPrimitives.Root>\n))\nSwitch.displayName = SwitchPrimitives.Root.displayName\n\nexport { Switch }\n","size_bytes":1139},"client/src/components/ui/table.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Table = React.forwardRef<\n  HTMLTableElement,\n  React.HTMLAttributes<HTMLTableElement>\n>(({ className, ...props }, ref) => (\n  <div className=\"relative w-full overflow-auto\">\n    <table\n      ref={ref}\n      className={cn(\"w-full caption-bottom text-sm\", className)}\n      {...props}\n    />\n  </div>\n))\nTable.displayName = \"Table\"\n\nconst TableHeader = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <thead ref={ref} className={cn(\"[&_tr]:border-b\", className)} {...props} />\n))\nTableHeader.displayName = \"TableHeader\"\n\nconst TableBody = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tbody\n    ref={ref}\n    className={cn(\"[&_tr:last-child]:border-0\", className)}\n    {...props}\n  />\n))\nTableBody.displayName = \"TableBody\"\n\nconst TableFooter = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tfoot\n    ref={ref}\n    className={cn(\n      \"border-t bg-muted/50 font-medium [&>tr]:last:border-b-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableFooter.displayName = \"TableFooter\"\n\nconst TableRow = React.forwardRef<\n  HTMLTableRowElement,\n  React.HTMLAttributes<HTMLTableRowElement>\n>(({ className, ...props }, ref) => (\n  <tr\n    ref={ref}\n    className={cn(\n      \"border-b transition-colors hover:bg-muted/50 data-[state=selected]:bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nTableRow.displayName = \"TableRow\"\n\nconst TableHead = React.forwardRef<\n  HTMLTableCellElement,\n  React.ThHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <th\n    ref={ref}\n    className={cn(\n      \"h-12 px-4 text-left align-middle font-medium text-muted-foreground [&:has([role=checkbox])]:pr-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableHead.displayName = \"TableHead\"\n\nconst TableCell = React.forwardRef<\n  HTMLTableCellElement,\n  React.TdHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <td\n    ref={ref}\n    className={cn(\"p-4 align-middle [&:has([role=checkbox])]:pr-0\", className)}\n    {...props}\n  />\n))\nTableCell.displayName = \"TableCell\"\n\nconst TableCaption = React.forwardRef<\n  HTMLTableCaptionElement,\n  React.HTMLAttributes<HTMLTableCaptionElement>\n>(({ className, ...props }, ref) => (\n  <caption\n    ref={ref}\n    className={cn(\"mt-4 text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nTableCaption.displayName = \"TableCaption\"\n\nexport {\n  Table,\n  TableHeader,\n  TableBody,\n  TableFooter,\n  TableHead,\n  TableRow,\n  TableCell,\n  TableCaption,\n}\n","size_bytes":2765},"client/src/components/ui/tabs.tsx":{"content":"import * as React from \"react\"\nimport * as TabsPrimitive from \"@radix-ui/react-tabs\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Tabs = TabsPrimitive.Root\n\nconst TabsList = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.List\n    ref={ref}\n    className={cn(\n      \"inline-flex h-10 items-center justify-center rounded-md bg-muted p-1 text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsList.displayName = TabsPrimitive.List.displayName\n\nconst TabsTrigger = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"inline-flex items-center justify-center whitespace-nowrap rounded-sm px-3 py-1.5 text-sm font-medium ring-offset-background transition-all focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=active]:bg-background data-[state=active]:text-foreground data-[state=active]:shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsTrigger.displayName = TabsPrimitive.Trigger.displayName\n\nconst TabsContent = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"mt-2 ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsContent.displayName = TabsPrimitive.Content.displayName\n\nexport { Tabs, TabsList, TabsTrigger, TabsContent }\n","size_bytes":1883},"client/src/components/ui/textarea.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Textarea = React.forwardRef<\n  HTMLTextAreaElement,\n  React.ComponentProps<\"textarea\">\n>(({ className, ...props }, ref) => {\n  return (\n    <textarea\n      className={cn(\n        \"flex min-h-[80px] w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  )\n})\nTextarea.displayName = \"Textarea\"\n\nexport { Textarea }\n","size_bytes":689},"client/src/components/ui/toast.tsx":{"content":"import * as React from \"react\"\nimport * as ToastPrimitives from \"@radix-ui/react-toast\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ToastProvider = ToastPrimitives.Provider\n\nconst ToastViewport = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Viewport>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Viewport>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Viewport\n    ref={ref}\n    className={cn(\n      \"fixed top-0 z-[100] flex max-h-screen w-full flex-col-reverse p-4 sm:bottom-0 sm:right-0 sm:top-auto sm:flex-col md:max-w-[420px]\",\n      className\n    )}\n    {...props}\n  />\n))\nToastViewport.displayName = ToastPrimitives.Viewport.displayName\n\nconst toastVariants = cva(\n  \"group pointer-events-auto relative flex w-full items-center justify-between space-x-4 overflow-hidden rounded-md border p-6 pr-8 shadow-lg transition-all data-[swipe=cancel]:translate-x-0 data-[swipe=end]:translate-x-[var(--radix-toast-swipe-end-x)] data-[swipe=move]:translate-x-[var(--radix-toast-swipe-move-x)] data-[swipe=move]:transition-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[swipe=end]:animate-out data-[state=closed]:fade-out-80 data-[state=closed]:slide-out-to-right-full data-[state=open]:slide-in-from-top-full data-[state=open]:sm:slide-in-from-bottom-full\",\n  {\n    variants: {\n      variant: {\n        default: \"border bg-background text-foreground\",\n        destructive:\n          \"destructive group border-destructive bg-destructive text-destructive-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Toast = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Root> &\n    VariantProps<typeof toastVariants>\n>(({ className, variant, ...props }, ref) => {\n  return (\n    <ToastPrimitives.Root\n      ref={ref}\n      className={cn(toastVariants({ variant }), className)}\n      {...props}\n    />\n  )\n})\nToast.displayName = ToastPrimitives.Root.displayName\n\nconst ToastAction = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Action>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Action>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Action\n    ref={ref}\n    className={cn(\n      \"inline-flex h-8 shrink-0 items-center justify-center rounded-md border bg-transparent px-3 text-sm font-medium ring-offset-background transition-colors hover:bg-secondary focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 group-[.destructive]:border-muted/40 group-[.destructive]:hover:border-destructive/30 group-[.destructive]:hover:bg-destructive group-[.destructive]:hover:text-destructive-foreground group-[.destructive]:focus:ring-destructive\",\n      className\n    )}\n    {...props}\n  />\n))\nToastAction.displayName = ToastPrimitives.Action.displayName\n\nconst ToastClose = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Close>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Close>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Close\n    ref={ref}\n    className={cn(\n      \"absolute right-2 top-2 rounded-md p-1 text-foreground/50 opacity-0 transition-opacity hover:text-foreground focus:opacity-100 focus:outline-none focus:ring-2 group-hover:opacity-100 group-[.destructive]:text-red-300 group-[.destructive]:hover:text-red-50 group-[.destructive]:focus:ring-red-400 group-[.destructive]:focus:ring-offset-red-600\",\n      className\n    )}\n    toast-close=\"\"\n    {...props}\n  >\n    <X className=\"h-4 w-4\" />\n  </ToastPrimitives.Close>\n))\nToastClose.displayName = ToastPrimitives.Close.displayName\n\nconst ToastTitle = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Title>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Title>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Title\n    ref={ref}\n    className={cn(\"text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nToastTitle.displayName = ToastPrimitives.Title.displayName\n\nconst ToastDescription = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Description>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Description>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Description\n    ref={ref}\n    className={cn(\"text-sm opacity-90\", className)}\n    {...props}\n  />\n))\nToastDescription.displayName = ToastPrimitives.Description.displayName\n\ntype ToastProps = React.ComponentPropsWithoutRef<typeof Toast>\n\ntype ToastActionElement = React.ReactElement<typeof ToastAction>\n\nexport {\n  type ToastProps,\n  type ToastActionElement,\n  ToastProvider,\n  ToastViewport,\n  Toast,\n  ToastTitle,\n  ToastDescription,\n  ToastClose,\n  ToastAction,\n}\n","size_bytes":4845},"client/src/components/ui/toaster.tsx":{"content":"import { useToast } from \"@/hooks/use-toast\"\nimport {\n  Toast,\n  ToastClose,\n  ToastDescription,\n  ToastProvider,\n  ToastTitle,\n  ToastViewport,\n} from \"@/components/ui/toast\"\n\nexport function Toaster() {\n  const { toasts } = useToast()\n\n  return (\n    <ToastProvider>\n      {toasts.map(function ({ id, title, description, action, ...props }) {\n        return (\n          <Toast key={id} {...props}>\n            <div className=\"grid gap-1\">\n              {title && <ToastTitle>{title}</ToastTitle>}\n              {description && (\n                <ToastDescription>{description}</ToastDescription>\n              )}\n            </div>\n            {action}\n            <ToastClose />\n          </Toast>\n        )\n      })}\n      <ToastViewport />\n    </ToastProvider>\n  )\n}\n","size_bytes":772},"client/src/components/ui/toggle-group.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ToggleGroupPrimitive from \"@radix-ui/react-toggle-group\"\nimport { type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\nimport { toggleVariants } from \"@/components/ui/toggle\"\n\nconst ToggleGroupContext = React.createContext<\n  VariantProps<typeof toggleVariants>\n>({\n  size: \"default\",\n  variant: \"default\",\n})\n\nconst ToggleGroup = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, children, ...props }, ref) => (\n  <ToggleGroupPrimitive.Root\n    ref={ref}\n    className={cn(\"flex items-center justify-center gap-1\", className)}\n    {...props}\n  >\n    <ToggleGroupContext.Provider value={{ variant, size }}>\n      {children}\n    </ToggleGroupContext.Provider>\n  </ToggleGroupPrimitive.Root>\n))\n\nToggleGroup.displayName = ToggleGroupPrimitive.Root.displayName\n\nconst ToggleGroupItem = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Item> &\n    VariantProps<typeof toggleVariants>\n>(({ className, children, variant, size, ...props }, ref) => {\n  const context = React.useContext(ToggleGroupContext)\n\n  return (\n    <ToggleGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        toggleVariants({\n          variant: context.variant || variant,\n          size: context.size || size,\n        }),\n        className\n      )}\n      {...props}\n    >\n      {children}\n    </ToggleGroupPrimitive.Item>\n  )\n})\n\nToggleGroupItem.displayName = ToggleGroupPrimitive.Item.displayName\n\nexport { ToggleGroup, ToggleGroupItem }\n","size_bytes":1753},"client/src/components/ui/toggle.tsx":{"content":"import * as React from \"react\"\nimport * as TogglePrimitive from \"@radix-ui/react-toggle\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst toggleVariants = cva(\n  \"inline-flex items-center justify-center rounded-md text-sm font-medium ring-offset-background transition-colors hover:bg-muted hover:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=on]:bg-accent data-[state=on]:text-accent-foreground [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0 gap-2\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-transparent\",\n        outline:\n          \"border border-input bg-transparent hover:bg-accent hover:text-accent-foreground\",\n      },\n      size: {\n        default: \"h-10 px-3 min-w-10\",\n        sm: \"h-9 px-2.5 min-w-9\",\n        lg: \"h-11 px-5 min-w-11\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst Toggle = React.forwardRef<\n  React.ElementRef<typeof TogglePrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof TogglePrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, ...props }, ref) => (\n  <TogglePrimitive.Root\n    ref={ref}\n    className={cn(toggleVariants({ variant, size, className }))}\n    {...props}\n  />\n))\n\nToggle.displayName = TogglePrimitive.Root.displayName\n\nexport { Toggle, toggleVariants }\n","size_bytes":1527},"client/src/components/ui/tooltip.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as TooltipPrimitive from \"@radix-ui/react-tooltip\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst TooltipProvider = TooltipPrimitive.Provider\n\nconst Tooltip = TooltipPrimitive.Root\n\nconst TooltipTrigger = TooltipPrimitive.Trigger\n\nconst TooltipContent = React.forwardRef<\n  React.ElementRef<typeof TooltipPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TooltipPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <TooltipPrimitive.Content\n    ref={ref}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 overflow-hidden rounded-md border bg-popover px-3 py-1.5 text-sm text-popover-foreground shadow-md animate-in fade-in-0 zoom-in-95 data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=closed]:zoom-out-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-tooltip-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nTooltipContent.displayName = TooltipPrimitive.Content.displayName\n\nexport { Tooltip, TooltipTrigger, TooltipContent, TooltipProvider }\n","size_bytes":1209},"pyproject.toml":{"content":"[project]\nname = \"repl-nix-workspace\"\nversion = \"0.1.0\"\ndescription = \"Add your description here\"\nrequires-python = \">=3.11\"\ndependencies = [\n    \"alembic>=1.16.5\",\n    \"bcrypt>=4.3.0\",\n    \"email-validator>=2.3.0\",\n    \"fastapi>=0.116.1\",\n    \"passlib>=1.7.4\",\n    \"psycopg2-binary>=2.9.10\",\n    \"pydantic>=2.11.7\",\n    \"python-dotenv>=1.1.1\",\n    \"python-jose>=3.5.0\",\n    \"python-multipart>=0.0.20\",\n    \"sqlalchemy>=2.0.43\",\n    \"uvicorn>=0.35.0\",\n]\n","size_bytes":454},"api/auth.py":{"content":"\"\"\"\nAuthentication utilities for FastAPI\n\"\"\"\nimport os\nfrom datetime import datetime, timedelta\nfrom typing import Optional\nfrom jose import JWTError, jwt\nfrom passlib.context import CryptContext\nfrom fastapi import Depends, HTTPException, status\nfrom fastapi.security import HTTPBearer, HTTPAuthorizationCredentials\nfrom sqlalchemy.orm import Session\nfrom .database import get_db\nfrom .models import User\nfrom .schemas import TokenData\n\n# Configuration\nJWT_SECRET = os.getenv(\"JWT_SECRET\", \"your-jwt-secret-key\")\nALGORITHM = \"HS256\"\nACCESS_TOKEN_EXPIRE_HOURS = 24\n\n# Password hashing\npwd_context = CryptContext(schemes=[\"bcrypt\"], deprecated=\"auto\")\n\n# OAuth2 scheme\nsecurity = HTTPBearer()\nsecurity_optional = HTTPBearer(auto_error=False)\n\ndef verify_password(plain_password: str, hashed_password: str) -> bool:\n    \"\"\"Verify a password against its hash\"\"\"\n    return pwd_context.verify(plain_password, hashed_password)\n\ndef get_password_hash(password: str) -> str:\n    \"\"\"Hash a password\"\"\"\n    return pwd_context.hash(password)\n\ndef create_access_token(data: dict, expires_delta: Optional[timedelta] = None):\n    \"\"\"Create a JWT access token\"\"\"\n    to_encode = data.copy()\n    if expires_delta:\n        expire = datetime.utcnow() + expires_delta\n    else:\n        expire = datetime.utcnow() + timedelta(hours=ACCESS_TOKEN_EXPIRE_HOURS)\n    \n    to_encode.update({\"exp\": expire})\n    encoded_jwt = jwt.encode(to_encode, JWT_SECRET, algorithm=ALGORITHM)\n    return encoded_jwt\n\ndef verify_token(token: str) -> TokenData:\n    \"\"\"Verify and decode a JWT token\"\"\"\n    try:\n        payload = jwt.decode(token, JWT_SECRET, algorithms=[ALGORITHM])\n        user_id: str = payload.get(\"userId\")\n        username: str = payload.get(\"username\")\n        \n        if user_id is None:\n            raise HTTPException(\n                status_code=status.HTTP_401_UNAUTHORIZED,\n                detail=\"Invalid authentication credentials\",\n                headers={\"WWW-Authenticate\": \"Bearer\"},\n            )\n        \n        token_data = TokenData(user_id=user_id, username=username)\n        return token_data\n    except JWTError:\n        raise HTTPException(\n            status_code=status.HTTP_401_UNAUTHORIZED,\n            detail=\"Invalid authentication credentials\",\n            headers={\"WWW-Authenticate\": \"Bearer\"},\n        )\n\ndef get_current_user(\n    credentials: HTTPAuthorizationCredentials = Depends(security),\n    db: Session = Depends(get_db)\n) -> User:\n    \"\"\"Get the current authenticated user\"\"\"\n    token = credentials.credentials\n    token_data = verify_token(token)\n    \n    user = db.query(User).filter(User.id == token_data.user_id).first()\n    if user is None:\n        raise HTTPException(\n            status_code=status.HTTP_404_NOT_FOUND,\n            detail=\"User not found\"\n        )\n    \n    return user\n\ndef get_current_user_optional(\n    credentials: Optional[HTTPAuthorizationCredentials] = Depends(security_optional),\n    db: Session = Depends(get_db)\n) -> Optional[User]:\n    \"\"\"Get the current user if authenticated, otherwise return None\"\"\"\n    if not credentials:\n        return None\n    \n    try:\n        token = credentials.credentials\n        token_data = verify_token(token)\n        user = db.query(User).filter(User.id == token_data.user_id).first()\n        return user\n    except HTTPException:\n        return None","size_bytes":3343},"api/database.py":{"content":"\"\"\"\nDatabase configuration and connection setup\n\"\"\"\nimport os\nimport json\nfrom dotenv import load_dotenv\nfrom sqlalchemy import create_engine, text, inspect\nfrom sqlalchemy.orm import sessionmaker, Session\nfrom sqlalchemy.dialects.postgresql import JSONB\nfrom .models import Base\n\n# Load environment variables from .env file\nload_dotenv()\n\n# Database URL from environment variable (preferred for production)\nDATABASE_URL = os.getenv(\"DATABASE_URL\")\n\n# Only fallback to .env file in development if environment variable doesn't exist\nif not DATABASE_URL and os.getenv(\"NODE_ENV\", \"development\") == \"development\":\n    from pathlib import Path\n    env_file = Path(\".env\")\n    if env_file.exists():\n        with open(env_file, 'r') as f:\n            for line in f:\n                if line.strip().startswith('DATABASE_URL=') and not line.strip().startswith('#'):\n                    DATABASE_URL = line.strip().split('=', 1)[1]\n                    break\n\nif not DATABASE_URL:\n    raise ValueError(\"DATABASE_URL environment variable is required\")\n\n# Create engine with proper SSL and connection pooling\nengine = create_engine(\n    DATABASE_URL,\n    pool_pre_ping=True,  # Verify connections before use\n    pool_recycle=300,    # Recycle connections every 5 minutes\n    pool_timeout=10,     # Timeout for getting connection from pool\n    max_overflow=0,      # No overflow connections\n    echo=False          # Set to True for SQL logging if needed\n)\n\ndef parse_tabular_data(tabular_string: str) -> list:\n    \"\"\"\n    Parse tabular string format into list of dictionaries\n    Format: 'column1 | column2\\\\nvalue1 | value2\\\\n...'\n    \"\"\"\n    if not tabular_string or tabular_string.strip() == '':\n        return []\n    \n    try:\n        lines = tabular_string.strip().split('\\\\n')\n        if len(lines) < 2:\n            return []\n        \n        # First line contains headers\n        headers = [h.strip() for h in lines[0].split('|')]\n        \n        # Remaining lines contain data\n        result = []\n        for line in lines[1:]:\n            if line.strip():\n                values = [v.strip() for v in line.split('|')]\n                if len(values) == len(headers):\n                    row = {}\n                    for i, header in enumerate(headers):\n                        value = values[i]\n                        # Try to convert to number if possible\n                        try:\n                            if '.' in value:\n                                value = float(value)\n                            else:\n                                value = int(value)\n                        except ValueError:\n                            pass  # Keep as string\n                        row[header] = value\n                    result.append(row)\n        return result\n    except Exception as e:\n        print(f\"Error parsing tabular data: {e}\")\n        return []\n\ndef run_schema_migrations():\n    \"\"\"\n    Idempotent schema migration to handle JSONB question field transition\n    \"\"\"\n    with engine.begin() as conn:\n        inspector = inspect(engine)\n        \n        # Check if problems table exists\n        if 'problems' not in inspector.get_table_names():\n            print(\"Problems table doesn't exist, will be created by create_tables()\")\n            return\n        \n        # Get current columns\n        columns = [col['name'] for col in inspector.get_columns('problems')]\n        \n        # Check if question column exists\n        if 'question' not in columns:\n            print(\"Adding question JSONB column to problems table...\")\n            \n            # Add question column\n            conn.execute(text(\"ALTER TABLE problems ADD COLUMN question JSONB NULL\"))\n            \n            # Migrate data from old columns if they exist\n            legacy_cols = ['description', 'schema', 'expected_output']\n            existing_legacy = [col for col in legacy_cols if col in columns]\n            \n            if existing_legacy:\n                print(f\"Migrating data from legacy columns: {existing_legacy}\")\n                \n                # First, get all the data that needs migration\n                result = conn.execute(text(\"SELECT id, description, schema, expected_output FROM problems WHERE question IS NULL\"))\n                problems = result.fetchall()\n                \n                for problem in problems:\n                    problem_id, description, schema, expected_output = problem\n                    \n                    # Parse expected_output from tabular format to list of dicts\n                    parsed_output = parse_tabular_data(expected_output or '')\n                    \n                    # Create the question JSONB object\n                    question_data = {\n                        'description': description or '',\n                        'tables': [],  # Schema parsing would need more complex logic\n                        'expectedOutput': parsed_output\n                    }\n                    \n                    # Update the specific row\n                    conn.execute(text(\"\"\"\n                        UPDATE problems \n                        SET question = :question_data\n                        WHERE id = :problem_id\n                    \"\"\"), {'question_data': question_data, 'problem_id': problem_id})\n                \n                # Drop old columns\n                for col in existing_legacy:\n                    print(f\"Dropping legacy column: {col}\")\n                    conn.execute(text(f\"ALTER TABLE problems DROP COLUMN IF EXISTS {col}\"))\n            \n            # Make question NOT NULL\n            conn.execute(text(\"ALTER TABLE problems ALTER COLUMN question SET NOT NULL\"))\n            print(\"Schema migration completed successfully!\")\n        else:\n            # Check if we need to fix existing data with incorrect expectedOutput format\n            result = conn.execute(text(\"\"\"\n                SELECT id, question \n                FROM problems \n                WHERE jsonb_typeof(question->'expectedOutput') = 'string'\n            \"\"\"))\n            problems_to_fix = result.fetchall()\n            \n            if problems_to_fix:\n                print(f\"Fixing {len(problems_to_fix)} problems with incorrect expectedOutput format...\")\n                for problem_id, question_json in problems_to_fix:\n                    # Parse the string expectedOutput to proper list format\n                    expected_output_str = question_json.get('expectedOutput', '')\n                    parsed_output = parse_tabular_data(expected_output_str)\n                    \n                    # Update the expectedOutput field\n                    conn.execute(text(\"\"\"\n                        UPDATE problems \n                        SET question = jsonb_set(question, '$.expectedOutput', :new_output)\n                        WHERE id = :problem_id\n                    \"\"\"), {'new_output': json.dumps(parsed_output), 'problem_id': problem_id})\n                print(\"Fixed incorrect expectedOutput formats!\")\n            else:\n                print(\"Question column already exists, no migration needed\")\n\n# Create session factory\nSessionLocal = sessionmaker(autocommit=False, autoflush=False, bind=engine)\n\n# Create all tables\ndef create_tables():\n    Base.metadata.create_all(bind=engine)\n\n# Dependency to get database session\ndef get_db():\n    db = SessionLocal()\n    try:\n        yield db\n    finally:\n        db.close()","size_bytes":7388},"api/main.py":{"content":"\"\"\"\nFastAPI application - converted from Express.js backend\n\"\"\"\nimport os\nfrom typing import List, Optional\nfrom fastapi import FastAPI, Depends, HTTPException, status, Query\nfrom fastapi.middleware.cors import CORSMiddleware\nfrom fastapi.staticfiles import StaticFiles\nfrom fastapi.responses import FileResponse\nfrom sqlalchemy.orm import Session, joinedload\nfrom sqlalchemy import func, case, and_, desc, Boolean\nfrom datetime import timedelta\nimport random\n\nfrom .database import get_db, create_tables\nfrom .models import User, Problem, Submission, CommunityPost, PostLike, PostComment\nfrom .schemas import (\n    UserCreate, UserResponse, UserLogin, LoginResponse, RegisterResponse,\n    ProblemResponse, SubmissionCreate, SubmissionResponse,\n    CommunityPostCreate, CommunityPostResponse,\n    PostCommentCreate, PostCommentResponse\n)\nfrom .auth import (\n    get_password_hash, verify_password, create_access_token,\n    get_current_user, get_current_user_optional\n)\n\n# Create FastAPI app\napp = FastAPI(\n    title=\"SQLGym API\",\n    description=\"A gamified SQL learning platform API\",\n    version=\"1.0.0\"\n)\n\n# Add CORS middleware\napp.add_middleware(\n    CORSMiddleware,\n    allow_origins=[\"*\"],  # In production, replace with actual frontend URL\n    allow_credentials=True,\n    allow_methods=[\"*\"],\n    allow_headers=[\"*\"],\n)\n\n# Create tables on startup\n@app.on_event(\"startup\")\ndef startup_event():\n    from .database import run_schema_migrations\n    run_schema_migrations()  # Run migrations first\n    create_tables()  # Then create any missing tables\n\n# Development/fallback root endpoint\n# Development/fallback root endpoint  \n@app.get(\"/\")\ndef read_root():\n    if os.path.exists(\"dist/public/index.html\"):\n        return FileResponse(\"dist/public/index.html\")\n    return {\"message\": \"SQLGym FastAPI Backend - Please run 'npm run build' first\"}\n\n# Mount static assets for production\nif os.path.exists(\"dist/public/assets\"):\n    app.mount(\"/assets\", StaticFiles(directory=\"dist/public/assets\"), name=\"assets\")\n\n# Authentication endpoints\n@app.post(\"/api/auth/register\", response_model=RegisterResponse, response_model_by_alias=True)\ndef register(user_data: UserCreate, db: Session = Depends(get_db)):\n    # Check if user already exists\n    existing_user = db.query(User).filter(User.email == user_data.email).first()\n    if existing_user:\n        raise HTTPException(\n            status_code=status.HTTP_400_BAD_REQUEST,\n            detail=\"User already exists\"\n        )\n    \n    # Check if username is taken\n    existing_username = db.query(User).filter(User.username == user_data.username).first()\n    if existing_username:\n        raise HTTPException(\n            status_code=status.HTTP_400_BAD_REQUEST,\n            detail=\"Username already taken\"\n        )\n    \n    # Hash password if provided\n    password_hash = None\n    if user_data.password is not None:\n        password_hash = get_password_hash(user_data.password)\n    \n    # Create user\n    user = User(\n        username=user_data.username,\n        email=user_data.email,\n        password_hash=password_hash,\n        first_name=user_data.first_name,\n        last_name=user_data.last_name,\n        profile_image_url=user_data.profile_image_url,\n        google_id=user_data.google_id,\n        github_id=user_data.github_id,\n        auth_provider=user_data.auth_provider\n    )\n    \n    db.add(user)\n    db.commit()\n    db.refresh(user)\n    \n    # Generate JWT token\n    access_token = create_access_token(\n        data={\"userId\": user.id, \"username\": user.username}\n    )\n    \n    return RegisterResponse(\n        token=access_token,\n        user=UserResponse.from_orm(user)\n    )\n\n@app.post(\"/api/auth/login\", response_model=LoginResponse, response_model_by_alias=True)\ndef login(login_data: UserLogin, db: Session = Depends(get_db)):\n    # Find user by email\n    user = db.query(User).filter(User.email == login_data.email).first()\n    if not user:\n        raise HTTPException(\n            status_code=status.HTTP_401_UNAUTHORIZED,\n            detail=\"Invalid credentials\"\n        )\n    \n    # Verify password\n    if not user.password_hash or not verify_password(login_data.password, user.password_hash):\n        raise HTTPException(\n            status_code=status.HTTP_401_UNAUTHORIZED,\n            detail=\"Invalid credentials\"\n        )\n    \n    # Generate JWT token\n    access_token = create_access_token(\n        data={\"userId\": user.id, \"username\": user.username}\n    )\n    \n    return LoginResponse(\n        token=access_token,\n        user=UserResponse.from_orm(user)\n    )\n\n@app.get(\"/api/auth/user\", response_model=UserResponse, response_model_by_alias=True)\ndef get_current_user_info(current_user: User = Depends(get_current_user)):\n    return UserResponse.from_orm(current_user)\n\n# Problem endpoints\n@app.get(\"/api/problems\", response_model=List[ProblemResponse], response_model_by_alias=True)\ndef get_problems(\n    difficulty: Optional[str] = Query(None),\n    current_user: Optional[User] = Depends(get_current_user_optional),\n    db: Session = Depends(get_db)\n):\n    # Base query with solved count\n    query = db.query(\n        Problem,\n        func.coalesce(\n            func.count(\n                case(\n                    (Submission.is_correct == True, Submission.user_id),\n                    else_=None\n                ).distinct()\n            ), 0\n        ).label(\"solved_count\")\n    ).outerjoin(Submission)\n    \n    # Add user-specific solved status if authenticated\n    if current_user:\n        query = query.add_columns(\n            func.coalesce(\n                func.max(\n                    case(\n                        (and_(Submission.user_id == current_user.id, Submission.is_correct == True), 1),\n                        else_=0\n                    )\n                ), 0\n            ).label(\"is_user_solved\")\n        )\n    else:\n        query = query.add_columns(func.cast(False, Boolean).label(\"is_user_solved\"))\n    \n    # Apply difficulty filter\n    if difficulty:\n        query = query.filter(Problem.difficulty == difficulty)\n    \n    # Group by problem and order by title\n    results = query.group_by(Problem.id).order_by(Problem.title).all()\n    \n    # Format response\n    problems = []\n    for problem, solved_count, is_user_solved in results:\n        problem_data = ProblemResponse.from_orm(problem)\n        problem_data.solved_count = int(solved_count)\n        problem_data.is_user_solved = bool(is_user_solved) if current_user else False\n        problems.append(problem_data)\n    \n    return problems\n\n@app.get(\"/api/problems/{problem_id}\", response_model=ProblemResponse, response_model_by_alias=True)\ndef get_problem(problem_id: str, db: Session = Depends(get_db)):\n    problem = db.query(Problem).filter(Problem.id == problem_id).first()\n    if not problem:\n        raise HTTPException(\n            status_code=status.HTTP_404_NOT_FOUND,\n            detail=\"Problem not found\"\n        )\n    return ProblemResponse.from_orm(problem)\n\n# Submission endpoints\n@app.post(\"/api/submissions\", response_model=SubmissionResponse, response_model_by_alias=True)\ndef create_submission(\n    submission_data: SubmissionCreate,\n    current_user: User = Depends(get_current_user),\n    db: Session = Depends(get_db)\n):\n    # Simulate SQL query execution (simplified version)\n    problem = db.query(Problem).filter(Problem.id == submission_data.problem_id).first()\n    if not problem:\n        raise HTTPException(\n            status_code=status.HTTP_404_NOT_FOUND,\n            detail=\"Problem not found\"\n        )\n    \n    # Simple validation logic (same as Express.js version)\n    is_correct = simulate_query_execution(submission_data.query, problem)\n    execution_time = random.randint(50, 550)  # Random execution time\n    \n    # Create submission\n    submission = Submission(\n        user_id=current_user.id,\n        problem_id=submission_data.problem_id,\n        query=submission_data.query,\n        is_correct=is_correct,\n        execution_time=execution_time\n    )\n    \n    db.add(submission)\n    \n    # If correct, update user progress\n    if is_correct:\n        current_user.problems_solved += 1\n        db.add(current_user)\n    \n    db.commit()\n    db.refresh(submission)\n    \n    return SubmissionResponse.from_orm(submission)\n\n@app.get(\"/api/submissions/user/{user_id}\", response_model=List[SubmissionResponse], response_model_by_alias=True)\ndef get_user_submissions(\n    user_id: str,\n    current_user: User = Depends(get_current_user),\n    db: Session = Depends(get_db)\n):\n    # Users can only view their own submissions\n    if user_id != current_user.id:\n        raise HTTPException(\n            status_code=status.HTTP_403_FORBIDDEN,\n            detail=\"Access denied\"\n        )\n    \n    submissions = db.query(Submission).filter(\n        Submission.user_id == user_id\n    ).order_by(desc(Submission.submitted_at)).all()\n    \n    return [SubmissionResponse.from_orm(sub) for sub in submissions]\n\n# Leaderboard endpoint\n@app.get(\"/api/leaderboard\", response_model=List[UserResponse], response_model_by_alias=True)\ndef get_leaderboard(\n    limit: Optional[int] = Query(50),\n    db: Session = Depends(get_db)\n):\n    users = db.query(User).order_by(\n        desc(User.problems_solved)\n    ).limit(limit).all()\n    \n    return [UserResponse.from_orm(user) for user in users]\n\n# Community endpoints\n@app.get(\"/api/community/posts\", response_model=List[CommunityPostResponse], response_model_by_alias=True)\ndef get_community_posts(db: Session = Depends(get_db)):\n    posts = db.query(CommunityPost).options(\n        joinedload(CommunityPost.user)\n    ).order_by(desc(CommunityPost.created_at)).all()\n    \n    return [CommunityPostResponse.from_orm(post) for post in posts]\n\n@app.post(\"/api/community/posts\", response_model=CommunityPostResponse, response_model_by_alias=True)\ndef create_community_post(\n    post_data: CommunityPostCreate,\n    current_user: User = Depends(get_current_user),\n    db: Session = Depends(get_db)\n):\n    post = CommunityPost(\n        user_id=current_user.id,\n        content=post_data.content,\n        code_snippet=post_data.code_snippet\n    )\n    \n    db.add(post)\n    db.commit()\n    db.refresh(post)\n    \n    # Load user relationship\n    post = db.query(CommunityPost).options(\n        joinedload(CommunityPost.user)\n    ).filter(CommunityPost.id == post.id).first()\n    \n    return CommunityPostResponse.from_orm(post)\n\n@app.post(\"/api/community/posts/{post_id}/like\")\ndef like_post(\n    post_id: str,\n    current_user: User = Depends(get_current_user),\n    db: Session = Depends(get_db)\n):\n    # Check if already liked\n    existing_like = db.query(PostLike).filter(\n        and_(PostLike.user_id == current_user.id, PostLike.post_id == post_id)\n    ).first()\n    \n    if existing_like:\n        raise HTTPException(\n            status_code=status.HTTP_400_BAD_REQUEST,\n            detail=\"Post already liked\"\n        )\n    \n    # Create like\n    like = PostLike(user_id=current_user.id, post_id=post_id)\n    db.add(like)\n    \n    # Update post likes count\n    post = db.query(CommunityPost).filter(CommunityPost.id == post_id).first()\n    if post:\n        post.likes += 1\n        db.add(post)\n    \n    db.commit()\n    return {\"message\": \"Post liked successfully\"}\n\n@app.delete(\"/api/community/posts/{post_id}/like\")\ndef unlike_post(\n    post_id: str,\n    current_user: User = Depends(get_current_user),\n    db: Session = Depends(get_db)\n):\n    # Find and delete like\n    like = db.query(PostLike).filter(\n        and_(PostLike.user_id == current_user.id, PostLike.post_id == post_id)\n    ).first()\n    \n    if not like:\n        raise HTTPException(\n            status_code=status.HTTP_404_NOT_FOUND,\n            detail=\"Like not found\"\n        )\n    \n    db.delete(like)\n    \n    # Update post likes count\n    post = db.query(CommunityPost).filter(CommunityPost.id == post_id).first()\n    if post:\n        post.likes = max(0, post.likes - 1)\n        db.add(post)\n    \n    db.commit()\n    return {\"message\": \"Post unliked successfully\"}\n\n@app.get(\"/api/community/posts/{post_id}/comments\", response_model=List[PostCommentResponse], response_model_by_alias=True)\ndef get_post_comments(post_id: str, db: Session = Depends(get_db)):\n    comments = db.query(PostComment).options(\n        joinedload(PostComment.user)\n    ).filter(PostComment.post_id == post_id).order_by(PostComment.created_at).all()\n    \n    return [PostCommentResponse.from_orm(comment) for comment in comments]\n\n@app.post(\"/api/community/posts/{post_id}/comments\", response_model=PostCommentResponse, response_model_by_alias=True)\ndef create_post_comment(\n    post_id: str,\n    comment_data: PostCommentCreate,\n    current_user: User = Depends(get_current_user),\n    db: Session = Depends(get_db)\n):\n    comment = PostComment(\n        user_id=current_user.id,\n        post_id=post_id,\n        content=comment_data.content\n    )\n    \n    db.add(comment)\n    \n    # Update post comments count\n    post = db.query(CommunityPost).filter(CommunityPost.id == post_id).first()\n    if post:\n        post.comments += 1\n        db.add(post)\n    \n    db.commit()\n    db.refresh(comment)\n    \n    # Load user relationship\n    comment = db.query(PostComment).options(\n        joinedload(PostComment.user)\n    ).filter(PostComment.id == comment.id).first()\n    \n    return PostCommentResponse.from_orm(comment)\n\n# Helper function for query simulation\ndef simulate_query_execution(query: str, problem: Problem) -> bool:\n    \"\"\"\n    Simplified query validation (same logic as Express.js version)\n    \"\"\"\n    normalized_query = query.lower().strip()\n    \n    # Basic checks for different problem types\n    if \"sum\" in problem.title.lower():\n        return (\n            \"select\" in normalized_query and\n            \"from\" in normalized_query and\n            (\"sum\" in normalized_query or \"+\" in normalized_query)\n        )\n    \n    if \"join\" in problem.title.lower():\n        return (\n            \"select\" in normalized_query and\n            \"from\" in normalized_query and\n            \"join\" in normalized_query\n        )\n    \n    # Default validation: must contain SELECT and FROM\n    return \"select\" in normalized_query and \"from\" in normalized_query\n\n# SPA fallback route - handle all non-API routes (must be last)\n# SPA fallback route - handle all non-API routes (must be last)\n@app.get(\"/{full_path:path}\")\ndef spa_fallback(full_path: str):\n    # Don't handle API routes\n    if full_path.startswith(\"api/\"):\n        raise HTTPException(status_code=404, detail=\"API endpoint not found\")\n    \n    # Don't handle asset files\n    if full_path.startswith(\"assets/\") or \".\" in full_path.split(\"/\")[-1]:\n        raise HTTPException(status_code=404, detail=\"File not found\")\n    \n    # Serve SPA for all other routes\n    index_path = \"dist/public/index.html\"\n    if os.path.exists(index_path):\n        return FileResponse(index_path)\n    \n    # Fallback if no built frontend\n    raise HTTPException(status_code=404, detail=\"Frontend not built\")\nif __name__ == \"__main__\":\n    import uvicorn\n    port = int(os.getenv(\"PORT\", 8000))\n    host = \"0.0.0.0\" if os.getenv(\"REPL_ID\") else \"127.0.0.1\"\n    uvicorn.run(app, host=host, port=port)","size_bytes":15115},"api/models.py":{"content":"\"\"\"\nSQLAlchemy models for the PostgreSQL database schema\n\"\"\"\nfrom sqlalchemy import Column, String, Text, Integer, Boolean, DateTime, ForeignKey\nfrom sqlalchemy.ext.declarative import declarative_base\nfrom sqlalchemy.orm import relationship\nfrom sqlalchemy.sql import func\nfrom sqlalchemy.dialects.postgresql import JSON, JSONB\nimport uuid\n\nBase = declarative_base()\n\nclass User(Base):\n    __tablename__ = \"users\"\n    \n    id = Column(String, primary_key=True, default=lambda: str(uuid.uuid4()))\n    username = Column(String(50), unique=True, nullable=False)\n    email = Column(String(255), unique=True, nullable=False)\n    password_hash = Column(Text, name=\"password_hash\")\n    first_name = Column(String(50), name=\"first_name\")\n    last_name = Column(String(50), name=\"last_name\")\n    profile_image_url = Column(Text, name=\"profile_image_url\")\n    google_id = Column(String(255), name=\"google_id\")\n    github_id = Column(String(255), name=\"github_id\")\n    auth_provider = Column(String(20), default=\"email\", nullable=False, name=\"auth_provider\")\n    problems_solved = Column(Integer, default=0, nullable=False, name=\"problems_solved\")\n    created_at = Column(DateTime, default=func.now(), nullable=False, name=\"created_at\")\n    updated_at = Column(DateTime, default=func.now(), onupdate=func.now(), nullable=False, name=\"updated_at\")\n    \n    # Relationships\n    submissions = relationship(\"Submission\", back_populates=\"user\")\n    community_posts = relationship(\"CommunityPost\", back_populates=\"user\")\n    post_likes = relationship(\"PostLike\", back_populates=\"user\")\n    post_comments = relationship(\"PostComment\", back_populates=\"user\")\n\nclass Problem(Base):\n    __tablename__ = \"problems\"\n    \n    id = Column(String, primary_key=True, default=lambda: str(uuid.uuid4()))\n    title = Column(String(200), nullable=False)\n    difficulty = Column(String(20), nullable=False)  # Easy, Medium, Hard\n\n    # Match DB schema: json (not jsonb)\n    tags = Column(JSON, default=list, nullable=False)\n    companies = Column(JSON, default=list, nullable=False)\n    hints = Column(JSON, default=list, nullable=False)\n\n    # Match DB schema: jsonb\n    question = Column(JSONB, nullable=False)  # description, schema, expected_output\n\n    created_at = Column(DateTime, default=func.now(), nullable=False, name=\"created_at\")\n    updated_at = Column(DateTime, default=func.now(), onupdate=func.now(), nullable=False, name=\"updated_at\")\n    \n    # Relationships\n    submissions = relationship(\"Submission\", back_populates=\"problem\")\n\nclass Submission(Base):\n    __tablename__ = \"submissions\"\n    \n    id = Column(String, primary_key=True, default=lambda: str(uuid.uuid4()))\n    user_id = Column(String, ForeignKey(\"users.id\"), nullable=False, name=\"user_id\")\n    problem_id = Column(String, ForeignKey(\"problems.id\"), nullable=False, name=\"problem_id\")\n    query = Column(Text, nullable=False)\n    is_correct = Column(Boolean, nullable=False, name=\"is_correct\")\n    execution_time = Column(Integer, name=\"execution_time\")  # in milliseconds\n    submitted_at = Column(DateTime, default=func.now(), nullable=False, name=\"submitted_at\")\n    \n    # Relationships\n    user = relationship(\"User\", back_populates=\"submissions\")\n    problem = relationship(\"Problem\", back_populates=\"submissions\")\n\nclass CommunityPost(Base):\n    __tablename__ = \"community_posts\"\n    \n    id = Column(String, primary_key=True, default=lambda: str(uuid.uuid4()))\n    user_id = Column(String, ForeignKey(\"users.id\"), nullable=False, name=\"user_id\")\n    content = Column(Text, nullable=False)\n    code_snippet = Column(Text, name=\"code_snippet\")\n    likes = Column(Integer, default=0, nullable=False)\n    comments = Column(Integer, default=0, nullable=False)\n    created_at = Column(DateTime, default=func.now(), nullable=False, name=\"created_at\")\n    updated_at = Column(DateTime, default=func.now(), onupdate=func.now(), nullable=False, name=\"updated_at\")\n    \n    # Relationships\n    user = relationship(\"User\", back_populates=\"community_posts\")\n    post_likes = relationship(\"PostLike\", back_populates=\"post\")\n    post_comments = relationship(\"PostComment\", back_populates=\"post\")\n\nclass PostLike(Base):\n    __tablename__ = \"post_likes\"\n    \n    id = Column(String, primary_key=True, default=lambda: str(uuid.uuid4()))\n    user_id = Column(String, ForeignKey(\"users.id\"), nullable=False, name=\"user_id\")\n    post_id = Column(String, ForeignKey(\"community_posts.id\"), nullable=False, name=\"post_id\")\n    created_at = Column(DateTime, default=func.now(), nullable=False, name=\"created_at\")\n    \n    # Relationships\n    user = relationship(\"User\", back_populates=\"post_likes\")\n    post = relationship(\"CommunityPost\", back_populates=\"post_likes\")\n\nclass PostComment(Base):\n    __tablename__ = \"post_comments\"\n    \n    id = Column(String, primary_key=True, default=lambda: str(uuid.uuid4()))\n    user_id = Column(String, ForeignKey(\"users.id\"), nullable=False, name=\"user_id\")\n    post_id = Column(String, ForeignKey(\"community_posts.id\"), nullable=False, name=\"post_id\")\n    content = Column(Text, nullable=False)\n    created_at = Column(DateTime, default=func.now(), nullable=False, name=\"created_at\")\n    \n    # Relationships\n    user = relationship(\"User\", back_populates=\"post_comments\")\n    post = relationship(\"CommunityPost\", back_populates=\"post_comments\")\n","size_bytes":5322},"api/schemas.py":{"content":"\"\"\"\nPydantic schemas for request/response validation\n\"\"\"\nfrom pydantic import BaseModel, EmailStr, ConfigDict, Field\nfrom pydantic.alias_generators import to_camel\nfrom typing import Optional, List\nfrom datetime import datetime\n\n# Base model for camelCase aliasing\nclass CamelCaseModel(BaseModel):\n    model_config = ConfigDict(\n        alias_generator=to_camel,\n        populate_by_name=True,\n        from_attributes=True\n    )\n\n# User schemas\nclass UserBase(CamelCaseModel):\n    username: str\n    email: EmailStr\n    first_name: Optional[str] = None\n    last_name: Optional[str] = None\n    profile_image_url: Optional[str] = None\n\nclass UserCreate(UserBase):\n    password: Optional[str] = None\n    google_id: Optional[str] = None\n    github_id: Optional[str] = None\n    auth_provider: str = \"email\"\n\nclass UserResponse(UserBase):\n    id: str\n    problems_solved: int\n    created_at: datetime\n\nclass UserLogin(CamelCaseModel):\n    email: EmailStr\n    password: str\n\n# Table column definition for structured display\nclass TableColumn(BaseModel):\n    name: str\n    type: str\n\n# Table data with columns and sample data\nclass TableData(BaseModel):\n    name: str\n    columns: List[TableColumn]\n    sample_data: List[dict] = Field(..., alias=\"sampleData\")\n    \n    model_config = ConfigDict(\n        populate_by_name=True,\n        from_attributes=True\n    )\n\n# Problem question structure for JSONB field - structured format\nclass QuestionData(BaseModel):\n    description: str\n    tables: List[TableData] = []\n    expected_output: List[dict] = Field(..., alias=\"expectedOutput\")\n    \n    model_config = ConfigDict(\n        populate_by_name=True,\n        from_attributes=True\n    )\n\n# Problem schemas\nclass ProblemBase(CamelCaseModel):\n    title: str\n    question: QuestionData  # JSONB field containing description, schema, expectedOutput\n    difficulty: str\n    tags: List[str] = []\n    companies: List[str] = []\n    hints: List[str] = []\n\nclass ProblemCreate(ProblemBase):\n    pass\n\nclass ProblemResponse(ProblemBase):\n    id: str\n    created_at: datetime\n    solved_count: Optional[int] = 0\n    is_user_solved: Optional[bool] = False\n\n# Submission schemas\nclass SubmissionBase(CamelCaseModel):\n    problem_id: str\n    query: str\n\nclass SubmissionCreate(SubmissionBase):\n    pass\n\nclass SubmissionResponse(SubmissionBase):\n    id: str\n    user_id: str\n    is_correct: bool\n    execution_time: Optional[int] = None\n    submitted_at: datetime\n\n# Community post schemas\nclass CommunityPostBase(CamelCaseModel):\n    content: str\n    code_snippet: Optional[str] = None\n\nclass CommunityPostCreate(CommunityPostBase):\n    pass\n\nclass CommunityPostResponse(CommunityPostBase):\n    id: str\n    user_id: str\n    likes: int\n    comments: int\n    created_at: datetime\n    user: UserResponse\n\n# Post comment schemas\nclass PostCommentBase(CamelCaseModel):\n    content: str\n\nclass PostCommentCreate(PostCommentBase):\n    pass\n\nclass PostCommentResponse(PostCommentBase):\n    id: str\n    user_id: str\n    post_id: str\n    created_at: datetime\n    user: UserResponse\n\n# Authentication schemas\nclass Token(CamelCaseModel):\n    access_token: str\n    token_type: str = \"bearer\"\n\nclass TokenData(CamelCaseModel):\n    user_id: Optional[str] = None\n    username: Optional[str] = None\n\nclass LoginResponse(CamelCaseModel):\n    token: str\n    user: UserResponse\n    message: str = \"Login successful\"\n\nclass RegisterResponse(CamelCaseModel):\n    token: str\n    user: UserResponse\n    message: str = \"User created successfully\"","size_bytes":3496},"client/src/pages/crud.py":{"content":"from sqlalchemy.orm import Session\nimport models, schemas\nfrom sqlalchemy import func, case, literal_column\n\ndef get_user(db: Session, user_id: str):\n    return db.query(models.User).filter(models.User.id == user_id).first()\n\ndef upsert_user(db: Session, user: schemas.UserUpsert):\n    db_user = db.query(models.User).filter(models.User.id == user.id).first()\n    if db_user:\n        db_user.email = user.email\n        db_user.first_name = user.first_name\n        db_user.last_name = user.last_name\n        db_user.profile_image_url = user.profile_image_url\n    else:\n        db_user = models.User(**user.dict())\n        db.add(db_user)\n    db.commit()\n    db.refresh(db_user)\n    return db_user\n\ndef get_problems(db: Session, user_id: str | None):\n    # Subquery for total correct submissions count per problem\n    solved_count_sq = db.query(\n        models.Submission.problem_id,\n        func.count(models.Submission.user_id.distinct()).label(\"solved_count\")\n    ).filter(models.Submission.is_correct == True).group_by(models.Submission.problem_id).subquery()\n\n    # Subquery to check if the current user has solved the problem\n    user_solved_sq = None\n    if user_id:\n        user_solved_sq = db.query(\n            models.Submission.problem_id,\n            literal_column(\"1\").label(\"is_user_solved\")\n        ).filter(\n            models.Submission.user_id == user_id,\n            models.Submission.is_correct == True\n        ).distinct().subquery()\n\n    # Main query\n    query = db.query(\n        models.Problem,\n        func.coalesce(solved_count_sq.c.solved_count, 0).label(\"solvedCount\")\n    ).outerjoin(\n        solved_count_sq, models.Problem.id == solved_count_sq.c.problem_id\n    )\n\n    if user_solved_sq is not None:\n        query = query.add_columns(\n            case(\n                (user_solved_sq.c.is_user_solved != None, True),\n                else_=False\n            ).label(\"isUserSolved\")\n        ).outerjoin(\n            user_solved_sq, models.Problem.id == user_solved_sq.c.problem_id\n        )\n    else:\n        # If no user, isUserSolved is always false\n        query = query.add_columns(literal_column(\"false\").label(\"isUserSolved\"))\n    \n    problems_with_stats = query.all()\n\n    # Manually construct the output to match the Pydantic schema\n    results = []\n    for problem, solved_count, is_user_solved in problems_with_stats:\n        results.append(schemas.ProblemOut(\n            id=problem.id,\n            title=problem.title,\n            description=problem.description,\n            difficulty=problem.difficulty,\n            starter_code=problem.starter_code,\n            tags=problem.tags or [],\n            companies=problem.companies or [],\n            solvedCount=solved_count,\n            isUserSolved=is_user_solved\n        ))\n    return results\n\ndef get_problem(db: Session, problem_id: int):\n    return db.query(models.Problem).filter(models.Problem.id == problem_id).first()\n\ndef create_submission(db: Session, submission: schemas.SubmissionCreate, user_id: str):\n    # Mocking correctness check. In a real app, this would execute the SQL.\n    is_correct = \"select\" in submission.user_code.lower() and \"from\" in submission.user_code.lower()\n    db_sub = models.Submission(\n        problem_id=submission.problem_id,\n        user_id=user_id,\n        user_code=submission.user_code,\n        is_correct=is_correct\n    )\n    db.add(db_sub)\n    db.commit()\n    db.refresh(db_sub)\n    return db_sub\n\ndef get_user_submissions(db: Session, user_id: str):\n    return db.query(models.Submission).filter(models.Submission.user_id == user_id).all()\n","size_bytes":3581},"client/src/pages/main.py":{"content":"from fastapi import FastAPI, Depends, HTTPException\nfrom sqlalchemy.orm import Session\nfrom pydantic import BaseModel\nfrom typing import Optional\nimport models, schemas, crud\nfrom database import engine, Base, get_db\n\n# Create tables\nBase.metadata.create_all(bind=engine)\n\napp = FastAPI()\n\n# Mock auth dependency, similar to the one in server/routes.ts\nclass MockUserClaims(BaseModel):\n    sub: str\n    email: str\n    first_name: Optional[str]\n    last_name: Optional[str]\n    profile_image_url: Optional[str]\n\nclass MockAuth(BaseModel):\n    claims: MockUserClaims\n\ndef mock_auth_user() -> MockAuth:\n    # Mock user for development\n    return MockAuth(claims=MockUserClaims(\n      sub=\"mock-user-1\",\n      email=\"jane@techcorp.com\",\n      first_name=\"Jane\",\n      last_name=\"Smith\",\n      profile_image_url=None,\n    ))\n\n# ---------------- AUTH ----------------\n@app.get(\"/api/auth/user\", response_model=schemas.User)\ndef get_current_user(user: MockAuth = Depends(mock_auth_user), db: Session = Depends(get_db)):\n    db_user = crud.get_user(db, user_id=user.claims.sub)\n    if not db_user:\n        claims = user.claims\n        user_data = schemas.UserUpsert(\n            id=claims.sub,\n            email=claims.email,\n            first_name=claims.first_name,\n            last_name=claims.last_name,\n            profile_image_url=claims.profile_image_url,\n        )\n        db_user = crud.upsert_user(db, user=user_data)\n    return db_user\n\n# ---------------- PROBLEMS ----------------\n@app.get(\"/api/problems\", response_model=list[schemas.ProblemOut])\ndef list_problems(user: MockAuth = Depends(mock_auth_user), db: Session = Depends(get_db)):\n    user_id = user.claims.sub\n    return crud.get_problems(db, user_id=user_id)\n\n@app.get(\"/api/problems/{problem_id}\", response_model=schemas.ProblemBase)\ndef get_problem(problem_id: int, db: Session = Depends(get_db)):\n    problem = crud.get_problem(db, problem_id)\n    if not problem:\n        raise HTTPException(status_code=404, detail=\"Problem not found\")\n    return problem\n\n# ---------------- SUBMISSIONS ----------------\n@app.post(\"/api/submissions\", response_model=schemas.SubmissionOut)\ndef submit(sub: schemas.SubmissionCreate, user: MockAuth = Depends(mock_auth_user), db: Session = Depends(get_db)):\n    user_id = user.claims.sub\n    return crud.create_submission(db, sub, user_id=user_id)\n\n@app.get(\"/api/user/submissions\", response_model=list[schemas.SubmissionOut])\ndef get_user_submissions(user: MockAuth = Depends(mock_auth_user), db: Session = Depends(get_db)):\n    submissions = crud.get_user_submissions(db, user_id=user.claims.sub)\n    return submissions\n","size_bytes":2622},"client/src/pages/models.py":{"content":"from sqlalchemy import Column, Integer, String, Text, ForeignKey, Boolean, JSON\nfrom sqlalchemy.orm import relationship\nfrom database import Base\n\nclass User(Base):\n    __tablename__ = \"users\"\n\n    id = Column(String, primary_key=True, index=True)\n    email = Column(String, unique=True, index=True, nullable=False)\n    first_name = Column(String, nullable=True)\n    last_name = Column(String, nullable=True)\n    profile_image_url = Column(String, nullable=True)\n\n    submissions = relationship(\"Submission\", back_populates=\"user\")\n\nclass Problem(Base):\n    __tablename__ = \"problems\"\n\n    id = Column(Integer, primary_key=True, index=True)\n    title = Column(String)\n    description = Column(Text)\n    difficulty = Column(String)\n    starter_code = Column(Text)\n    tags = Column(JSON, default=[], nullable=False)\n    companies = Column(JSON, default=[], nullable=False)\n\n    submissions = relationship(\"Submission\", back_populates=\"problem\")\n\nclass Submission(Base):\n    __tablename__ = \"submissions\"\n\n    id = Column(Integer, primary_key=True, index=True)\n    problem_id = Column(Integer, ForeignKey(\"problems.id\"))\n    user_id = Column(String, ForeignKey(\"users.id\"))\n    user_code = Column(Text)\n    is_correct = Column(Boolean, default=False, nullable=False)\n\n    user = relationship(\"User\", back_populates=\"submissions\")\n    problem = relationship(\"Problem\", back_populates=\"submissions\")\n","size_bytes":1396},"client/src/pages/schemas.py":{"content":"from pydantic import BaseModel\nfrom typing import Optional, List\n\nclass User(BaseModel):\n    id: str\n    email: str\n    first_name: Optional[str] = None\n    last_name: Optional[str] = None\n    profile_image_url: Optional[str] = None\n\n    class Config:\n        orm_mode = True\n\nclass UserUpsert(User):\n    pass\n\nclass ProblemBase(BaseModel):\n    id: int\n    title: str\n    description: str\n    difficulty: str\n    starter_code: str\n    tags: List[str]\n    companies: List[str]\n\nclass ProblemOut(ProblemBase):\n    solvedCount: int\n    isUserSolved: bool\n\n    class Config:\n        orm_mode = True\n\nclass SubmissionCreate(BaseModel):\n    problem_id: int\n    user_code: str\n\nclass SubmissionOut(BaseModel):\n    id: int\n    problem_id: int\n    user_id: str\n    is_correct: bool\n\n    class Config:\n        orm_mode = True\n","size_bytes":816},"api/seed.py":{"content":"import os\nimport sys\nimport json\nimport argparse\nfrom sqlalchemy.orm import Session\n\n# Add the project root to the Python path to allow for absolute imports\nsys.path.insert(0, os.path.abspath(os.path.join(os.path.dirname(__file__), '..')))\n\nfrom api.database import SessionLocal, engine\nfrom api.models import Base, Problem\n\ndef seed_data(env: str):\n    \"\"\"\n    Populates the database with initial data from a JSON file\n    based on the provided environment.\n    \"\"\"\n    # This ensures tables are created before trying to seed them\n    Base.metadata.create_all(bind=engine)\n    \n    db: Session = SessionLocal()\n    \n    try:\n        # Check if problems already exist\n        if db.query(Problem).count() > 0:\n            print(\"Database already contains problems. Skipping seeding.\")\n            return\n\n        # Determine which data file to use\n        file_path = os.path.join(os.path.dirname(__file__), 'data', f'{env}_problems.json')\n        \n        if not os.path.exists(file_path):\n            print(f\"Error: Data file not found at {file_path}\")\n            print(\"Please specify a valid environment: 'demo' or 'production'.\")\n            return\n            \n        print(f\"Seeding database with data from {file_path}...\")\n\n        with open(file_path, 'r') as f:\n            problems_data = json.load(f)\n\n        # Create Problem objects from the loaded data\n        problems_to_add = [Problem(**p) for p in problems_data]\n\n        db.add_all(problems_to_add)\n        db.commit()\n        \n        print(f\"Successfully seeded {len(problems_to_add)} problems from '{env}' environment.\")\n\n    finally:\n        db.close()\n\nif __name__ == \"__main__\":\n    parser = argparse.ArgumentParser(description=\"Seed the database with a specific problem set.\")\n    parser.add_argument(\n        \"env\", \n        choices=[\"demo\", \"production\"], \n        help=\"The environment to seed (e.g., 'demo' or 'production').\"\n    )\n    args = parser.parse_args()\n    \n    seed_data(args.env)\n","size_bytes":1975},"client/src/components/table-display.tsx":{"content":"import { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from '@/components/ui/table';\n\ninterface Column {\n  name: string;\n  type: string;\n}\n\ninterface TableData {\n  name: string;\n  columns: Column[];\n  sampleData: Record<string, any>[];\n}\n\ninterface TableDisplayProps {\n  tables: TableData[];\n  expectedOutput?: Record<string, any>[];\n}\n\nexport default function TableDisplay({ tables, expectedOutput }: TableDisplayProps) {\n  const renderDataTable = (data: Record<string, any>[], title: string) => {\n    if (!data || data.length === 0) return null;\n\n    const headers = Object.keys(data[0]);\n    \n    return (\n      <div className=\"mb-6\">\n        <h4 className=\"font-semibold text-sm text-foreground mb-3\">{title}</h4>\n        <div className=\"border rounded-lg overflow-hidden\">\n          <Table>\n            <TableHeader>\n              <TableRow className=\"bg-muted/50\">\n                {headers.map((header) => (\n                  <TableHead key={header} className=\"font-semibold text-foreground\">\n                    {header}\n                  </TableHead>\n                ))}\n              </TableRow>\n            </TableHeader>\n            <TableBody>\n              {data.map((row, index) => (\n                <TableRow key={index}>\n                  {headers.map((header) => (\n                    <TableCell key={header} className=\"py-2\">\n                      {row[header]}\n                    </TableCell>\n                  ))}\n                </TableRow>\n              ))}\n            </TableBody>\n          </Table>\n        </div>\n      </div>\n    );\n  };\n\n  return (\n    <div className=\"space-y-6\">\n      {tables.map((table) => (\n        <div key={table.name} className=\"space-y-4\">\n          {/* Table Schema */}\n          <div>\n            <h4 className=\"font-semibold text-sm text-foreground mb-3\">\n              <span className=\"font-bold\">{table.name}</span> Table:\n            </h4>\n            <div className=\"border rounded-lg overflow-hidden\">\n              <Table>\n                <TableHeader>\n                  <TableRow className=\"bg-muted/50\">\n                    <TableHead className=\"font-semibold text-foreground\">Column Name</TableHead>\n                    <TableHead className=\"font-semibold text-foreground\">Type</TableHead>\n                  </TableRow>\n                </TableHeader>\n                <TableBody>\n                  {table.columns.map((column) => (\n                    <TableRow key={column.name}>\n                      <TableCell className=\"py-2 font-mono text-sm\">{column.name}</TableCell>\n                      <TableCell className=\"py-2\">{column.type}</TableCell>\n                    </TableRow>\n                  ))}\n                </TableBody>\n              </Table>\n            </div>\n          </div>\n\n          {/* Sample Data */}\n          {table.sampleData && table.sampleData.length > 0 && \n            renderDataTable(table.sampleData, `${table.name} Example Input:`)\n          }\n        </div>\n      ))}\n\n      {/* Expected Output */}\n      {expectedOutput && expectedOutput.length > 0 && \n        renderDataTable(expectedOutput, \"Expected Output:\")\n      }\n    </div>\n  );\n}","size_bytes":3154},"client/src/components/resizable-splitter.tsx":{"content":"import { useState, useRef, useCallback, useEffect } from 'react';\n\ninterface ResizableSplitterProps {\n  leftPanel: React.ReactNode;\n  rightPanel: React.ReactNode;\n  defaultLeftWidth?: number;\n  minLeftWidth?: number;\n  minRightWidth?: number;\n  className?: string;\n}\n\nexport default function ResizableSplitter({\n  leftPanel,\n  rightPanel,\n  defaultLeftWidth = 50,\n  minLeftWidth = 20,\n  minRightWidth = 20,\n  className = ''\n}: ResizableSplitterProps) {\n  const [leftWidth, setLeftWidth] = useState(defaultLeftWidth);\n  const [isDragging, setIsDragging] = useState(false);\n  const containerRef = useRef<HTMLDivElement>(null);\n\n  const handleMouseDown = useCallback((e: React.MouseEvent) => {\n    setIsDragging(true);\n    e.preventDefault();\n  }, []);\n\n  const handleMouseMove = useCallback((e: MouseEvent) => {\n    if (!isDragging || !containerRef.current) return;\n\n    const containerRect = containerRef.current.getBoundingClientRect();\n    const newLeftWidth = ((e.clientX - containerRect.left) / containerRect.width) * 100;\n    \n    // Apply constraints\n    const constrainedWidth = Math.max(\n      minLeftWidth,\n      Math.min(100 - minRightWidth, newLeftWidth)\n    );\n    \n    setLeftWidth(constrainedWidth);\n  }, [isDragging, minLeftWidth, minRightWidth]);\n\n  const handleMouseUp = useCallback(() => {\n    setIsDragging(false);\n  }, []);\n\n  // Add event listeners when dragging\n  useEffect(() => {\n    if (isDragging) {\n      document.addEventListener('mousemove', handleMouseMove);\n      document.addEventListener('mouseup', handleMouseUp);\n      document.body.style.cursor = 'col-resize';\n      document.body.style.userSelect = 'none';\n      \n      return () => {\n        document.removeEventListener('mousemove', handleMouseMove);\n        document.removeEventListener('mouseup', handleMouseUp);\n        document.body.style.cursor = '';\n        document.body.style.userSelect = '';\n      };\n    }\n  }, [isDragging, handleMouseMove, handleMouseUp]);\n\n  return (\n    <div \n      ref={containerRef}\n      className={`flex h-full w-full ${className}`}\n    >\n      {/* Left Panel */}\n      <div \n        style={{ width: `${leftWidth}%` }}\n        className=\"flex-shrink-0 overflow-hidden\"\n      >\n        {leftPanel}\n      </div>\n      \n      {/* Resizer */}\n      <div\n        className=\"w-1 bg-border hover:bg-primary/50 cursor-col-resize flex-shrink-0 transition-colors relative group\"\n        onMouseDown={handleMouseDown}\n      >\n        <div className=\"absolute inset-y-0 -left-1 -right-1 group-hover:bg-primary/20\" />\n      </div>\n      \n      {/* Right Panel */}\n      <div \n        style={{ width: `${100 - leftWidth}%` }}\n        className=\"flex-1 overflow-hidden\"\n      >\n        {rightPanel}\n      </div>\n    </div>\n  );\n}","size_bytes":2736},"client/src/components/vertical-resizable-splitter.tsx":{"content":"import { useState, useRef, useCallback, useEffect } from 'react';\n\ninterface VerticalResizableSplitterProps {\n  topPanel: React.ReactNode;\n  bottomPanel: React.ReactNode;\n  defaultTopHeight?: number;\n  minTopHeight?: number;\n  minBottomHeight?: number;\n  className?: string;\n}\n\nexport default function VerticalResizableSplitter({\n  topPanel,\n  bottomPanel,\n  defaultTopHeight = 70,\n  minTopHeight = 30,\n  minBottomHeight = 20,\n  className = ''\n}: VerticalResizableSplitterProps) {\n  const [topHeight, setTopHeight] = useState(defaultTopHeight);\n  const [isDragging, setIsDragging] = useState(false);\n  const containerRef = useRef<HTMLDivElement>(null);\n\n  const handleMouseDown = useCallback((e: React.MouseEvent) => {\n    setIsDragging(true);\n    e.preventDefault();\n  }, []);\n\n  const handleMouseMove = useCallback((e: MouseEvent) => {\n    if (!isDragging || !containerRef.current) return;\n\n    const containerRect = containerRef.current.getBoundingClientRect();\n    const newTopHeight = ((e.clientY - containerRect.top) / containerRect.height) * 100;\n    \n    // Apply constraints\n    const constrainedHeight = Math.max(\n      minTopHeight,\n      Math.min(100 - minBottomHeight, newTopHeight)\n    );\n    \n    setTopHeight(constrainedHeight);\n  }, [isDragging, minTopHeight, minBottomHeight]);\n\n  const handleMouseUp = useCallback(() => {\n    setIsDragging(false);\n  }, []);\n\n  // Add event listeners when dragging\n  useEffect(() => {\n    if (isDragging) {\n      document.addEventListener('mousemove', handleMouseMove);\n      document.addEventListener('mouseup', handleMouseUp);\n      document.body.style.cursor = 'row-resize';\n      document.body.style.userSelect = 'none';\n      \n      return () => {\n        document.removeEventListener('mousemove', handleMouseMove);\n        document.removeEventListener('mouseup', handleMouseUp);\n        document.body.style.cursor = '';\n        document.body.style.userSelect = '';\n      };\n    }\n  }, [isDragging, handleMouseMove, handleMouseUp]);\n\n  return (\n    <div \n      ref={containerRef}\n      className={`flex flex-col h-full w-full ${className}`}\n    >\n      {/* Top Panel */}\n      <div \n        style={{ height: `${topHeight}%` }}\n        className=\"flex-shrink-0 overflow-hidden\"\n      >\n        {topPanel}\n      </div>\n      \n      {/* Resizer */}\n      <div\n        className=\"h-1 bg-border hover:bg-primary/50 cursor-row-resize flex-shrink-0 transition-colors relative group\"\n        onMouseDown={handleMouseDown}\n      >\n        <div className=\"absolute inset-x-0 -top-1 -bottom-1 group-hover:bg-primary/20\" />\n      </div>\n      \n      {/* Bottom Panel */}\n      <div \n        style={{ height: `${100 - topHeight}%` }}\n        className=\"flex-1 overflow-hidden\"\n      >\n        {bottomPanel}\n      </div>\n    </div>\n  );\n}","size_bytes":2781}},"version":1}